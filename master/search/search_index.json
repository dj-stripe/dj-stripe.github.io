{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#what-is-dj-stripe","title":"What is dj-stripe?","text":"<p>Dj-stripe is an extensible wrapper around the Stripe API that continuously syncs most of the Stripe Data to your local database as pre-implemented Django Models, out of the box! This allows you to use the Django ORM, in your code, to work with the data making it easier and faster!</p> <p>For example, if you need to interact with a customer subscription, you can use dj-stripe\u2019s Subscription Model, in your code, to get the subscription data for that customer as well as the related models\u2019 data too (if need be and potentially in 1 database query!) instead of making multiple slower and unreliable consecutive network calls only to parse through 1 or more of Stripe\u2019s JSON like objects!</p>"},{"location":"#features","title":"Features","text":"<ul> <li> <p>Simplified Security: We make it simple for you to collect sensitive data such as credit card numbers and remain PCI compliant. This means the sensitive data is sent directly to Stripe instead of passing through your server. For more information, see our Integration Security Guide.</p> </li> <li> <p>Wallets: We support all Stripe supported wallets including but not limited to Apple Pay and Google Pay.</p> </li> <li> <p>Payment methods: Accepting more payment methods helps your business expand its global reach and improve checkout conversion.</p> </li> <li> <p>SCA-Ready: The SDK automatically performs native 3D Secure authentication if needed to comply with Strong Customer Authentication regulation in Europe and other countries as mandated by the law.</p> </li> <li> <p>Support for multiple accounts and API keys \u2192 May be done by the time this website is ready</p> </li> <li> <p>Tested with Stripe API 2020-08-27 (see API versions)</p> </li> <li> <p>We support the following Stripe functionalities:</p> </li> </ul> <p> Stripe Core</p> <p> Payment Methods</p> <p> Product</p> <p> Checkout</p> <p> Billing</p> <p> Connect</p> <p> Sigma</p>"},{"location":"#tutorials","title":"Tutorials","text":"<p>The dj-stripe community has come up with some great tutorials:</p>"},{"location":"#videos","title":"Videos","text":"<p>--</p>"},{"location":"#blogs","title":"Blogs","text":"<ul> <li>How to Create a Subscription SaaS Application with Django and Stripe - Sep 2021 - Django 3.2 - dj-stripe 2.4.3</li> <li>Using Django and Stripe for Monthly Subscriptions - May 4, 2021 Uses Stripe Elements</li> <li>Django Stripe Integration with using dj-stripe - Jun 12, 2020</li> </ul> <p>Have a blog, video or online publication? Write about your dj-stripe tips and tricks, then send us a pull request with the link.</p>"},{"location":"#who-uses-dj-stripe","title":"Who uses dj-stripe?","text":""},{"location":"CONTRIBUTING/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"CONTRIBUTING/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"CONTRIBUTING/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/dj-stripe/dj-stripe/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>The version of python and Django you're running</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"CONTRIBUTING/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \"bug\" is open to whoever wants to implement it.</p>"},{"location":"CONTRIBUTING/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with \"feature\" is open to whoever wants to implement it.</p>"},{"location":"CONTRIBUTING/#write-documentation","title":"Write Documentation","text":"<p>dj-stripe could always use more documentation, whether as part of the official dj-stripe docs, in docstrings, or even on the web in blog posts, articles, and such.</p> <p>To see the project's documentation live, run the following command:</p> <pre><code>mkdocs serve\n</code></pre> <p>The documentation site will then be served on http://127.0.0.1:8000.</p> <p>In case of any installation error</p> <p>In case you get the error that some plugin is not installed, please run:     <pre><code>poetry install --with docs\n</code></pre></p> <p>If you wish to just generate the documentation, you can replace <code>serve</code> with <code>build</code>, and the docs will be generated into the <code>site/</code> folder.</p>"},{"location":"CONTRIBUTING/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/dj-stripe/dj-stripe/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome     :)</li> </ul>"},{"location":"CONTRIBUTING/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up local development.</p> <ol> <li> <p>Fork dj-stripe on Github.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/dj-stripe.git\n</code></pre> </li> <li> <p>Set up pre-commit:</p> <pre><code>$ git init # A git repo is required to install pre-commit\n$ pre-commit install\n</code></pre> </li> <li> <p>Set up your test database. If you're running tests using PostgreSQL:</p> <pre><code>$ createdb djstripe\n</code></pre> <p>or if you want to test vs sqlite (for convenience) or MySQL, they can be selected by setting this environment variable:</p> <pre><code>$ export DJSTRIPE_TEST_DB_VENDOR=sqlite\n# or: export DJSTRIPE_TEST_DB_VENDOR=mysql\n</code></pre> <p>For postgres and mysql, the database host,port,username and password can be set with environment variables, see <code>tests/settings.py</code></p> </li> <li> <p>Install Poetry if you do not have it already.</p> <p>You can set up a virtual environment with:</p> <pre><code>$ poetry install\n</code></pre> <p>You can then, at any time, open a shell into that environment with:</p> <pre><code>$ poetry shell\n</code></pre> </li> <li> <p>When you're done making changes, check that your changes pass the tests. A quick     test run can be done as follows:</p> <pre><code>$ DJSTRIPE_TEST_DB_VENDOR=sqlite poetry run pytest --reuse-db\n</code></pre> <p>You should also check that the tests pass with other python and Django versions with tox. pytest will output both command line and html coverage statistics and will warn you if your changes caused code coverage to drop.:</p> <pre><code>$ pip install tox\n$ tox\n</code></pre> </li> <li> <p>If your changes altered the models you may need to generate Django migrations:</p> <pre><code>$ DJSTRIPE_TEST_DB_VENDOR=sqlite poetry run ./manage.py makemigrations\n</code></pre> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol> <p>Congratulations, you're now a dj-stripe contributor! Have some \u2665 from us.</p>"},{"location":"CONTRIBUTING/#preferred-django-model-field-types","title":"Preferred Django Model Field Types","text":"<p>When mapping from Stripe API field types to Django model fields, we try to follow Django best practises where practical.</p> <p>The following types should be preferred for fields that map to the Stripe API (which is almost all fields in our models).</p>"},{"location":"CONTRIBUTING/#strings","title":"Strings","text":"<ul> <li>Stripe API string fields have a default maximum length of 5,000     characters.</li> <li>In some cases a maximum length (<code>maxLength</code>) is specified in the Stripe OpenAPI     schema.</li> <li>We follow Django's     recommendation and     avoid using null on string fields (which means we store <code>\"\"</code> for string fields that     are <code>null</code> in stripe). Note that is enforced in the sync logic in     StripeModel._stripe_object_to_record.</li> <li>For long string fields (eg above 255 characters) we prefer <code>TextField</code> over     <code>Charfield</code>.</li> </ul> <p>Therefore the default type for string fields that don't have a maxLength specified in the Stripe OpenAPI schema should usually be:</p> <pre><code>str_field = TextField(max_length=5000, default=\", blank=True, help_text=\"...\")\n</code></pre>"},{"location":"CONTRIBUTING/#enumerations","title":"Enumerations","text":"<p>Fields that have a defined set of values can be implemented using <code>StripeEnumField</code>.</p>"},{"location":"CONTRIBUTING/#hash-dictionaries","title":"Hash (dictionaries)","text":"<p>Use the <code>JSONField</code> in <code>djstripe.fields</code>.</p>"},{"location":"CONTRIBUTING/#currency-amounts","title":"Currency amounts","text":"<p>Stripe handles all currency amounts as integer cents, we currently have a mixture of fields as integer cents and decimal (eg dollar, euro etc) values, but we are aiming to standardise on cents (see https://github.com/dj-stripe/dj-stripe/issues/955).</p> <p>All new currency amount fields should use <code>StripeQuantumCurrencyAmountField</code>.</p>"},{"location":"CONTRIBUTING/#dates-and-datetimes","title":"Dates and Datetimes","text":"<p>The Stripe API uses an integer timestamp (seconds since the Unix epoch) for dates and datetimes. We store this as a datetime field, using <code>StripeDateTimeField</code>.</p>"},{"location":"CONTRIBUTING/#django-migration-policy","title":"Django Migration Policy","text":"<p>Migrations are considered a breaking change, so it's not usually not acceptable to add a migration to a stable branch, it will be a new <code>MAJOR.MINOR.0</code> release.</p> <p>A workaround to this in the case that the Stripe API data isn't compatible with out model (eg Stripe is sending <code>null</code> to a non-null field) is to implement the <code>_manipulate_stripe_object_hook</code> classmethod on the model.</p>"},{"location":"CONTRIBUTING/#avoid-new-migrations-with-non-schema-changes","title":"Avoid new migrations with non-schema changes","text":"<p>If a code change produces a migration that doesn't alter the database schema (eg changing <code>help_text</code>) then instead of adding a new migration you can edit the most recent migration that affects the field in question.</p> <p>e.g.: https://github.com/dj-stripe/dj-stripe/commit/e2762c38918a90f00c42ecf21187a920bd3a2087</p>"},{"location":"CONTRIBUTING/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>The pull request must not drop code coverage below the current level.</li> <li>If the pull request adds functionality, the docs should be updated. Put your new     functionality into a function with a docstring.</li> <li>If the pull request makes changes to a model, include Django migrations.</li> <li>The pull request should work for Python 3.6+. Check Github     Actions and make sure that the     tests pass for all supported Python versions.</li> <li>Code formatting: Make sure to install <code>pre-commit</code> to automatically run it on <code>staged files</code> or run manually with <code>pre-commit run --all-files</code> at the dj-stripe root to keep a consistent style.</li> </ol>"},{"location":"api_keys/","title":"Managing Stripe API keys","text":"<p>Stripe API keys are stored in the database, and editable from the Django admin.</p> <p>Important Note</p> <p>By default, keys are visible by anyone who has access to the dj-stripe administration.</p>"},{"location":"api_keys/#adding-new-api-keys","title":"Adding new API keys","text":"<p>You may add new API keys via the Dj-Stripe \"API key\" administration. The only required value is the key's \"secret\" value itself. Example:</p> <p></p> <p>Once saved, Dj-Stripe will automatically detect whether the key is a public, restricted or secret key, and whether it's for live or test mode. If it's a secret key, the matching Account object will automatically be fetched as well and the key will be associated with it, so that it can be used to communicate with the Stripe API when dealing with objects belonging to that Account.</p>"},{"location":"api_keys/#updating-the-api-keys","title":"Updating the API keys","text":"<p>When expiring or rolling new secret keys, you should create the new API key in Stripe, then add it from the Django administration. Whenever you are ready, you may delete the old key. (It is safe to keep it around, as long as it hasn't expired. Keeping expired keys in the database may result in errors during usage).</p>"},{"location":"api_keys/#faq","title":"FAQ","text":""},{"location":"api_keys/#why-store-them-in-the-database","title":"Why store them in the database?","text":"<p>As we work on supporting multiple Stripe accounts per instance, it is vital for dj-stripe to have a mechanism to store more than one Stripe API key. It also became obvious that we may want proper programmatic access to create and delete keys. Furthermore, API keys are a legitimate upstream Stripe object, and it is not unlikely the API may allow access to listing other API keys in the future, in which case we will want to move them to the database anyway.</p>"},{"location":"api_keys/#isnt-that-insecure","title":"Isn't that insecure?","text":"<p>Please do keep your billing database encrypted. There's a copy of all your customers' billing data on it!</p> <p>You may also instead create a read-only restricted key with all-read permissions for dj-stripe. There is no added risk there, given that dj-stripe holds a copy of all your data regardless.</p>"},{"location":"api_keys/#im-using-environment-variables-do-i-need-to-change-anything","title":"I'm using environment variables. Do I need to change anything?","text":"<p>Not at this time. The settings <code>STRIPE_LIVE_SECRET_KEY</code> and <code>STRIPE_TEST_SECRET_KEY</code> can still be used.</p>"},{"location":"api_keys/#what-about-public-keys","title":"What about public keys?","text":"<p>Setting <code>STRIPE_LIVE_PUBLIC_KEY</code> and <code>STRIPE_TEST_PUBLIC_KEY</code> will be deprecated in 2.5.0. You do not risk anything by leaving them in your settings: They are not used by Dj-Stripe outside of the Dj-Stripe mixins, which are now themselves deprecated. So you can safely leave them in your settings, or you can move them to the database as well (Keys beginning in <code>pk_test_</code> and <code>pk_live_</code> will be detected as publishable keys).</p>"},{"location":"api_versions/","title":"A note on Stripe API versions","text":"<p>A point that can cause confusion to new users of dj-stripe is that there are several different Stripe API versions in play at once.</p>"},{"location":"api_versions/#your-stripe-accounts-api-version","title":"Your Stripe account's API version","text":"<p>This is the version used by Stripe when sending webhook data to you and the default version used by the Stripe API. You can find this on your Stripe dashboard labelled \"default\". New Stripe accounts are always on the latest version.</p> <p>Read more about it on stripe.com/docs/api/versioning.</p>"},{"location":"api_versions/#stripes-current-latest-api-version","title":"Stripe's current latest API version","text":"<p>You can find this on your Stripe dashboard labelled \"latest\" or in Stripe's API documentation</p> <p>See stripe.com/docs/upgrades on how to upgrade your Stripe API version. Stripe will only allow upgrades to the latest version.</p>"},{"location":"api_versions/#dj-stripe-api-version","title":"Dj-stripe API version","text":"<p>This is the Stripe API version used by dj-stripe in all communication with Stripe, including when processing webhooks (though webhook data is sent to you by Stripe with your API version, we re-fetch the data with dj-stripe's API version), this is because the API schema needs to match dj-stripe's Django model schema.</p> <p>It is defined by <code>STRIPE_API_VERSION</code> with a default of <code>DEFAULT_STRIPE_API_VERSION</code>. You mustn't change this as it ensures that dj-stripe receives data in the format it expects.</p> <p>Note</p> <p>dj-stripe will always use <code>STRIPE_API_VERSION</code> in its requests regardless of what <code>stripe.api_version</code> is set to.</p>"},{"location":"api_versions/#dj-stripe-latest-tested-version","title":"Dj-stripe Latest Tested Version","text":"<p>This is the most recent Stripe account API version used by the maintainers during testing, more recent versions account versions are probably fine though.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#installation","title":"Installation","text":""},{"location":"installation/#get-the-distribution","title":"Get the distribution","text":"<p>Install dj-stripe with pip: <pre><code>    pip install dj-stripe\n</code></pre></p> <p>Or with Poetry (recommended): <pre><code>    poetry add dj-stripe\n</code></pre></p>"},{"location":"installation/#configuration","title":"Configuration","text":"<p>Add <code>djstripe</code> to your <code>INSTALLED_APPS</code>: <pre><code>    INSTALLED_APPS =(\n        ...\n        \"djstripe\",\n        ...\n    )\n</code></pre></p> <p>Add to urls.py:</p> <pre><code>    path(\"stripe/\", include(\"djstripe.urls\", namespace=\"djstripe\")),\n</code></pre> <p>Tell Stripe about the webhook (Stripe webhook docs can be found here) using the full URL of your endpoint from the urls.py step above (e.g. <code>https://example.com/stripe/webhook</code>).</p> <p>Add your Stripe keys and set the operating mode: <pre><code>    STRIPE_LIVE_SECRET_KEY = os.environ.get(\"STRIPE_LIVE_SECRET_KEY\", \"&lt;your secret key&gt;\")\n    STRIPE_TEST_SECRET_KEY = os.environ.get(\"STRIPE_TEST_SECRET_KEY\", \"&lt;your secret key&gt;\")\n    STRIPE_LIVE_MODE = False  # Change to True in production\n</code></pre></p> <p>Note</p> <p>djstripe expects <code>STRIPE_LIVE_MODE</code> to be a Boolean Type. In case you use <code>Bash env vars or equivalent</code> to inject its value, make sure to convert it to a Boolean type. We highly recommended the library django-environ</p> <p>Sync data from Stripe:</p> <p>Note</p> <p>djstripe expects <code>APIKeys</code> of all Stripe Accounts you'd like to sync data for to already be in the DB. They can be Added from Django Admin.</p> <p>Run the commands:</p> <pre><code>    python manage.py migrate\n\n    python manage.py djstripe_sync_models\n</code></pre> <p>See here for notes about usage of the Stripe Elements frontend JS library.</p>"},{"location":"installation/#running-tests","title":"Running Tests","text":"<p>Assuming the tests are run against PostgreSQL:</p> <pre><code>    createdb djstripe\n    pip install tox\n    tox\n</code></pre>"},{"location":"stripe_elements_js/","title":"Integrating Stripe Elements (JS SDK)","text":"<p>Tip</p> <p>TLDR: If you haven't yet migrated to PaymentIntents, prefer <code>stripe.createSource()</code> over <code>stripe.createToken()</code> for better compatibility with PaymentMethods.</p> <p>Attention</p> <p>A point that can cause confusion when integrating Stripe on the web is that there are multiple generations of frontend JS APIs that use Stripe Elements with stripe js v3.</p>"},{"location":"stripe_elements_js/#in-descending-order-of-preference-these-are","title":"In descending order of preference these are:","text":""},{"location":"stripe_elements_js/#payment-intents-sca-compliant","title":"Payment Intents (SCA compliant)","text":"<p>The newest and preferred way of handling payments, which supports SCA compliance (3D secure etc).</p>"},{"location":"stripe_elements_js/#charges-using-stripecreatesource","title":"Charges using stripe.createSource()","text":"<p>This creates Source objects within Stripe, and can be used for various different methods of payment (including, but not limited to cards), but isn't SCA compliant.</p> <p>The Card Elements Quickstart JS example can be used, except use <code>stripe.createSource</code> instead of <code>stripe.createToken</code> and the <code>result.source</code> instead of <code>result.token</code>. <code>Checkout a working example of this</code></p>"},{"location":"stripe_elements_js/#charges-using-stripecreatetoken","title":"Charges using stripe.createToken()","text":"<p>This predates <code>stripe.createSource</code>, and creates legacy Card objects within Stripe, which have some compatibility issues with Payment Methods.</p> <p>If you're using <code>stripe.createToken</code>, see if you can upgrade to <code>stripe.createSource</code> or ideally to Payment Intents .</p> <p>Tip</p> <p>Checkout Card Elements Quickstart JS</p>"},{"location":"upgrade_dj_stripe/","title":"Upgrading dj-stripe Smooth and Carefully","text":""},{"location":"upgrade_dj_stripe/#background","title":"Background","text":"<p>In this article, we will share how to upgrade the <code>dj-stripe</code> package flawlessly and carefully.</p> <p>Important Note</p> <p>Please keep in mind that <code>dj-stripe</code> always squashes the migration files. Which means its migration files are completely changed, and leading to migration issues. So, you can't immediately upgrade your package too far, for example, from <code>2.4.0</code> to <code>2.7.0</code> because it will cause breaking changes, especially in your database migrations.</p>"},{"location":"upgrade_dj_stripe/#how-to-do-it","title":"How to do it?","text":"<p>For example, if your <code>dj-stripe</code> version is <code>2.4.0</code> and your migration files are referring to the old version.</p> <p></p> <p>First, you need to find which version has that old migration. For example:</p> <ol> <li>Search for the latest version that is closest to your package version, for example: <code>2.4.0</code> to <code>2.5.0</code>.</li> <li>Visit this link to find it: https://github.com/dj-stripe/dj-stripe/releases</li> <li>Cross-check the release notes.</li> <li>Find which dj-stripe version is still compatible with your migration file, for example: <code>0006_2_3.py</code>.</li> <li>Find the last migration file of the latest version at https://github.com/dj-stripe/dj-stripe/tree/2.5.0/djstripe/migrations (for example: <code>0008_2_5.py</code>) (both files must exist; if not, it means the new version is no longer compatible with your version).</li> </ol> Old Migration New Migration <ol> <li>Update your <code>requirements.txt</code> file from <code>dj-stripe==2.4.0</code> to <code>dj-stripe==2.5.0</code></li> <li>Run the <code>manage.py migrate djstripe</code> command (this command must not fail; if it does, cross-check steps 1-6).</li> </ol> <pre><code>(env-my-project) \u279c  my-project git:(development) \u2717 docker-compose -f local.yml run django python manage.py migrate djstripe\n[+] Creating 3/0\n \u2714 Container my-project-redis-1     Running                                                                                                                                                                                  0.0s\n \u2714 Container my-project-mailhog-1   Running                                                                                                                                                                                  0.0s\n \u2714 Container my-project-postgres-1  Running                                                                                                                                                                                  0.0s\nPostgreSQL is available\nSystem check identified some issues:\n\nOperations to perform:\n  Apply all migrations: djstripe\nRunning migrations:\n  Applying djstripe.0008_2_5... OK\n</code></pre> <ol> <li>And then, after migrating it, change your migration file to refer to the new version (e.g., from <code>0006_2_3</code> to <code>0008_2_5</code>).</li> </ol> <p></p> <ol> <li>Repeat the same process for higher version.</li> </ol> <p>If you have an issue with the Stripe version, we can also try upgrading it in the <code>requirements.txt</code> file. Check out this issue for more information: https://github.com/dj-stripe/dj-stripe/issues/1842#issuecomment-1319185657.</p> <pre><code>stripe&gt;=4.0.0,&lt;5.0.0  # https://github.com/dj-stripe/dj-stripe/issues/1842#issuecomment-1319185657\n</code></pre>"},{"location":"upgrade_dj_stripe/#conclusion","title":"Conclusion","text":"<ol> <li>Find the closest version that compatible with your version (for doing migration).</li> <li>Update the dependency in <code>requirements.txt</code> file and then deploy it.</li> <li>Don't forget to run the <code>python manage.py migrate djstripe</code> command.</li> <li>Change your migration file to refer to the new version (e.g., from <code>0006_2_3</code> to <code>0008_2_5</code>), and then deploy it.</li> </ol>"},{"location":"upgrade_dj_stripe/#alternatives","title":"Alternatives","text":"<ul> <li>https://stackoverflow.com/a/31122841</li> </ul>"},{"location":"history/0_x/","title":"dj-stripe 0.x release notes","text":""},{"location":"history/0_x/#080-2015-12-30","title":"0.8.0 (2015-12-30)","text":"<ul> <li>better plan ordering documentation (Thanks @cjrh)</li> <li>added a confirmation page when choosing a subscription (Thanks     @chrissmejia, @areski)</li> <li>setup.py reverse dependency fix (#258/#268) (Thanks @ticosax)</li> <li>Dropped official support for Django 1.7 (no code changes were made)</li> <li>Python 3.5 support, Django 1.9.1 support</li> <li>Migration improvements (Thanks @michi88)</li> <li>Fixed \"Invoice matching query does not exist\" bug (#263)     (Thanks @mthornhill)</li> <li>Fixed duplicate content in account view (Thanks @areski)</li> </ul>"},{"location":"history/0_x/#070-2015-09-22","title":"0.7.0 (2015-09-22)","text":"<ul> <li>dj-stripe now responds to the invoice.created event     (Thanks @wahuneke)</li> <li>dj-stripe now cancels subscriptions and purges customers during sync     if they were deleted from the stripe dashboard (Thanks @unformatt)</li> <li>dj-stripe now checks for an active stripe subscription in the     <code>update_plan_quantity</code> call (Thanks @ctrengove)</li> <li>Event processing is now handled by \"event handlers\" - functions     outside of models that respond to various event types and subtypes.     Documentation on how to tie into the event handler system coming     soon. (Thanks @wahuneke)</li> <li>Experimental Python 3.5 support</li> <li>Support for Django 1.6 and lower is now officially gone.</li> <li>Much, much more!</li> </ul>"},{"location":"history/0_x/#060-2015-07-12","title":"0.6.0 (2015-07-12)","text":"<ul> <li>Support for Django 1.6 and lower is now deprecated.</li> <li>Improved test harness now tests coverage and pep8</li> <li>SubscribeFormView and ChangePlanView no longer populate self.error     with form errors</li> <li>InvoiceItems.plan can now be null (as it is with individual     charges), resolving #140 (Thanks @awechsler and @MichelleGlauser     for help troubleshooting)</li> <li>Email templates are now packaged during distribution.</li> <li>sync_plans now takes an optional api_key</li> <li>100% test coverage</li> <li>Stripe ID is now returned as part of each model's str method     (Thanks @areski)</li> <li>Customer model now stores card expiration month and year     (Thanks @jpadilla)</li> <li>Ability to extend subscriptions (Thanks @TigerDX)</li> <li>Support for plan heirarchies (Thanks @chrissmejia)</li> <li>Rest API endpoints for Subscriptions [contrib]     (Thanks @philippeluickx)</li> <li>Admin interface search by email funtionality is removed (#221)     (Thanks @jpadilla)</li> </ul>"},{"location":"history/0_x/#050-2015-05-25","title":"0.5.0 (2015-05-25)","text":"<ul> <li>Began deprecation of support for Django 1.6 and lower.</li> <li>Added formal support for Django 1.8.</li> <li>Removed the StripeSubscriptionSignupForm</li> <li>Removed <code>djstripe.safe_settings</code>. Settings are now all located in     <code>djstripe.settings</code></li> <li><code>DJSTRIPE_TRIAL_PERIOD_FOR_SUBSCRIBER_CALLBACK</code> can no longer be a     module string</li> <li>The sync_subscriber argument has been renamed from     subscriber_model to subscriber</li> <li>Moved available currencies to the DJSTRIPE_CURRENCIES setting     (Thanks @martinhill)</li> <li>Allow passing of extra parameters to stripe Charge API     (Thanks @mthornhill)</li> <li>Support for all available arguments when syncing plans     (Thanks @jamesbrobb)</li> <li>charge.refund() now returns the refunded charge object     (Thanks @mthornhill)</li> <li>Charge model now has captured field and a capture method     (Thanks @mthornhill)</li> <li>Subscription deleted webhook bugfix</li> <li>South migrations are now up to date (Thanks @Tyrdall)</li> </ul>"},{"location":"history/0_x/#040-2015-04-05","title":"0.4.0 (2015-04-05)","text":"<ul> <li>Formal Python 3.3+/Django 1.7 Support (including migrations)</li> <li>Removed Python 2.6 from Travis CI build. (Thanks @audreyr)</li> <li>Dropped Django 1.4 support. (Thanks @audreyr)</li> <li>Deprecated the <code>djstripe.forms.StripeSubscriptionSignupForm</code>. Making     this form work easily with both <code>dj-stripe</code> and <code>django-allauth</code>     required too much abstraction. It will be removed in the 0.5.0     release.</li> <li>Add the ability to add invoice items for a customer (Thanks @kavdev)</li> <li>Add the ability to use a custom customer model (Thanks @kavdev)</li> <li>Added setting to disable Invoice receipt emails (Thanks Chris     Halpert)</li> <li>Enable proration when customer upgrades plan, and pass proration     policy and cancellation at period end for upgrades in settings.     (Thanks Yasmine Charif)</li> <li>Removed the redundant context processor. (Thanks @kavdev)</li> <li>Fixed create a token call in change_card.html (Thanks @dollydagr)</li> <li>Fix <code>charge.dispute.closed</code> typo. (Thanks @ipmb)</li> <li>Fix contributing docs formatting. (Thanks @audreyr)</li> <li>Fix subscription canceled_at_period_end field sync on plan     upgrade (Thanks @nigma)</li> <li>Remove \"account\" bug in Middleware (Thanks @sromero84)</li> <li>Fix correct plan selection on subscription in subscribe_form     template. (Thanks Yasmine Charif)</li> <li>Fix subscription status in account, _subscription_status, and     cancel_subscription templates. (Thanks Yasmine Charif)</li> <li>Now using <code>user.get_username()</code> instead of <code>user.username</code>, to     support custom User models. (Thanks @shvechikov)</li> <li>Update remaining DOM Ids for Bootstrap 3. (Thanks Yasmine Charif)</li> <li>Update publish command in setup.py. (Thanks @pydanny)</li> <li>Explicitly specify tox's virtual environment names.     (Thanks @audreyr)</li> <li>Manually call django.setup() to populate apps registry.     (Thanks @audreyr)</li> </ul>"},{"location":"history/0_x/#035-2014-05-01","title":"0.3.5 (2014-05-01)","text":"<ul> <li>Fixed <code>djstripe_init_customers</code> management command so it works with     custom user models.</li> </ul>"},{"location":"history/0_x/#034-2014-05-01","title":"0.3.4 (2014-05-01)","text":"<ul> <li>Clarify documentation for redirects on app_name.</li> <li>If settings.DEBUG is True, then django-debug-toolbar is exempt from     redirect to subscription form.</li> <li>Use collections.OrderedDict to ensure that plans are listed in order     of price.</li> <li>Add <code>ordereddict</code> library to support Python 2.6 users.</li> <li>Switch from <code>__unicode__</code> to <code>__str__</code> methods on models to better     support Python 3.</li> <li>Add <code>python_2_unicode_compatible</code> decorator to Models.</li> <li>Check for PY3 so the <code>unicode(self.user)</code> in models.Customer doesn't     blow up in Python 3.</li> </ul>"},{"location":"history/0_x/#033-2014-04-24","title":"0.3.3 (2014-04-24)","text":"<ul> <li>Increased the extendability of the views by removing as many     hard-coded URLs as possible and replacing them with <code>success_url</code>     and other attributes/methods.</li> <li>Added single unit purchasing to the cookbook</li> </ul>"},{"location":"history/0_x/#032-2014-01-16","title":"0.3.2 (2014-01-16)","text":"<ul> <li>Made Yasmine Charif a core committer</li> <li>Take into account trial days in a subscription plan (Thanks Yasmine     Charif)</li> <li>Correct invoice period end value (Thanks Yasmine Charif)</li> <li>Make plan cancellation and plan change consistently not prorating     (Thanks Yasmine Charif)</li> <li>Fix circular import when ACCOUNT_SIGNUP_FORM_CLASS is defined     (Thanks Dustin Farris)</li> <li>Add send e-mail receipt action in charges admin panel (Thanks Buddy     Lindsay)</li> <li>Add <code>created</code> field to all ModelAdmins to help with internal     auditing (Thanks Kulbir Singh)</li> </ul>"},{"location":"history/0_x/#031-2013-11-14","title":"0.3.1 (2013-11-14)","text":"<ul> <li>Cancellation fix (Thanks Yasmine Charif)</li> <li>Add setup.cfg for wheel generation (Thanks Charlie Denton)</li> </ul>"},{"location":"history/0_x/#030-2013-11-12","title":"0.3.0 (2013-11-12)","text":"<ul> <li>Fully tested against Django 1.6, 1.5, and 1.4</li> <li>Fix boolean default issue in models (from now on they are all     default to <code>False</code>).</li> <li>Replace duplicated code with     <code>djstripe.utils.user_has_active_subscription</code>.</li> </ul>"},{"location":"history/0_x/#029-2013-09-06","title":"0.2.9 (2013-09-06)","text":"<ul> <li>Cancellation added to views.</li> <li>Support for kwargs on charge and invoice fetching.</li> <li>def charge() now supports send_receipt flag, default to True.</li> <li>Fixed templates to work with Bootstrap 3.0.0 column design.</li> </ul>"},{"location":"history/0_x/#028-2013-09-02","title":"0.2.8 (2013-09-02)","text":"<ul> <li>Improved usage documentation.</li> <li>Corrected order of fields in StripeSubscriptionSignupForm.</li> <li>Corrected transaction history template layout.</li> <li>Updated models to take into account when settings.USE_TZ is     disabled.</li> </ul>"},{"location":"history/0_x/#027-2013-08-24","title":"0.2.7 (2013-08-24)","text":"<ul> <li>Add handy rest_framework permission class.</li> <li>Fixing attribution for django-stripe-payments.</li> <li>Add new status to Invoice model.</li> </ul>"},{"location":"history/0_x/#026-2013-08-20","title":"0.2.6 (2013-08-20)","text":"<ul> <li>Changed name of division tag to djdiv.</li> <li>Added <code>safe_setting.py</code> module to handle edge cases when working     with custom user models.</li> <li>Added cookbook page in the documentation.</li> </ul>"},{"location":"history/0_x/#025-2013-08-18","title":"0.2.5 (2013-08-18)","text":"<ul> <li>Fixed bug in initial checkout</li> <li>You can't purchase the same plan that you currently have.</li> </ul>"},{"location":"history/0_x/#024-2013-08-18","title":"0.2.4 (2013-08-18)","text":"<ul> <li>Recursive package finding.</li> </ul>"},{"location":"history/0_x/#023-2013-08-16","title":"0.2.3 (2013-08-16)","text":"<ul> <li>Fix packaging so all submodules are loaded</li> </ul>"},{"location":"history/0_x/#022-2013-08-15","title":"0.2.2 (2013-08-15)","text":"<ul> <li>Added Registration + Subscription form</li> </ul>"},{"location":"history/0_x/#021-2013-08-12","title":"0.2.1 (2013-08-12)","text":"<ul> <li>Fixed a bug on CurrentSubscription tests</li> <li>Improved usage documentation</li> <li>Added to migration from other tools documentation</li> </ul>"},{"location":"history/0_x/#020-2013-08-12","title":"0.2.0 (2013-08-12)","text":"<ul> <li>Cancellation of plans now works.</li> <li>Upgrades and downgrades of plans now work.</li> <li>Changing of cards now works.</li> <li>Added breadcrumbs to improve navigation.</li> <li>Improved installation instructions.</li> <li>Consolidation of test instructions.</li> <li>Minor improvement to django-stripe-payments documentation</li> <li>Added coverage.py to test process.</li> <li>Added south migrations.</li> <li>Fixed the subscription_payment_required function-based view     decorator.</li> <li>Removed unnecessary django-crispy-forms</li> </ul>"},{"location":"history/0_x/#017-2013-08-08","title":"0.1.7 (2013-08-08)","text":"<ul> <li>Middleware excepts all of the djstripe namespaced URLs. This way     people can pay.</li> </ul>"},{"location":"history/0_x/#016-2013-08-08","title":"0.1.6 (2013-08-08)","text":"<ul> <li>Fixed a couple template paths</li> <li>Fixed the manifest so we include html, images.</li> </ul>"},{"location":"history/0_x/#015-2013-08-08","title":"0.1.5 (2013-08-08)","text":"<ul> <li>Fixed the manifest so we include html, css, js, images.</li> </ul>"},{"location":"history/0_x/#014-2013-08-08","title":"0.1.4 (2013-08-08)","text":"<ul> <li>Change PaymentRequiredMixin to SubscriptionPaymentRequiredMixin</li> <li>Add subscription_payment_required function-based view decorator</li> <li>Added SubscriptionPaymentRedirectMiddleware</li> <li>Much nicer accounts view display</li> <li>Much improved subscription form display</li> <li>Payment plans can have decimals</li> <li>Payment plans can have custom images</li> </ul>"},{"location":"history/0_x/#013-2013-08-7","title":"0.1.3 (2013-08-7)","text":"<ul> <li>Added account view</li> <li>Added Customer.get_or_create method</li> <li>Added djstripe_sync_customers management command</li> <li>sync file for all code that keeps things in sync with stripe</li> <li>Use client-side JavaScript to get history data asynchronously</li> <li>More user friendly action views</li> </ul>"},{"location":"history/0_x/#012-2013-08-6","title":"0.1.2 (2013-08-6)","text":"<ul> <li>Admin working</li> <li>Better publish statement</li> <li>Fix dependencies</li> </ul>"},{"location":"history/0_x/#011-2013-08-6","title":"0.1.1 (2013-08-6)","text":"<ul> <li>Ported internals from django-stripe-payments</li> <li>Began writing the views</li> <li>Travis-CI</li> <li>All tests passing on Python 2.7 and 3.3</li> <li>All tests passing on Django 1.4 and 1.5</li> <li>Began model cleanup</li> <li>Better form</li> <li>Provide better response from management commands</li> </ul>"},{"location":"history/0_x/#010-2013-08-5","title":"0.1.0 (2013-08-5)","text":"<ul> <li>First release on PyPI.</li> </ul>"},{"location":"history/1_x/","title":"dj-stripe 1.x release notes","text":""},{"location":"history/1_x/#124-2019-02-27","title":"1.2.4 (2019-02-27)","text":"<p>This is a bugfix-only version:</p> <ul> <li>Allow billing_cycle_anchor argument when creating a subscription     (#814)</li> <li>Fixup plan amount null with tier plans (#781)</li> <li>Update Cancel subscription view tests to match backport in f64af57</li> <li>Implement Invoice._manipulate_stripe_object_hook for     compatability with API 2018-11-08 (#771)</li> <li>Fix product webhook for type=\"good\" (#724)</li> <li>Add trial_from_plan, trial_period_days args to     Customer.subscribe() (#709)</li> </ul>"},{"location":"history/1_x/#123-2018-10-13","title":"1.2.3 (2018-10-13)","text":"<p>This is a bugfix-only version:</p> <ul> <li>Updated Subscription.cancel() for compatibility with Stripe     2018-08-23 (#723)</li> </ul>"},{"location":"history/1_x/#122-2018-08-11","title":"1.2.2 (2018-08-11)","text":"<p>This is a bugfix-only version:</p> <ul> <li>Fixed an error with request.urlconf in some setups (#562)</li> <li>Always save text-type fields as empty strings in db instead of null     (#713)</li> <li>Fix support for DJSTRIPE_SUBSCRIBER_MODEL_MIGRATION_DEPENDENCY     (#707)</li> <li>Fix reactivate() with Stripe API 2018-02-28 and above</li> </ul>"},{"location":"history/1_x/#121-2018-07-18","title":"1.2.1 (2018-07-18)","text":"<p>This is a bugfix-only version:</p> <ul> <li>Fixed various Python 2.7 compatibility issues</li> <li>Fixed issues with max_length of receipt_number</li> <li>Fixed various fields incorrectly marked as required</li> <li>Handle product webhook calls</li> <li>Fix compatibility with stripe-python 2.0.0</li> </ul>"},{"location":"history/1_x/#120-2018-06-11","title":"1.2.0 (2018-06-11)","text":"<p>The dj-stripe 1.2.0 release resets all migrations.</p> <p>Do not upgrade to 1.2.0 directly from 1.0.1 or below. You must upgrade to 1.1.0 first.</p> <p>Please read the 1.1.0 release notes below for more information.</p>"},{"location":"history/1_x/#110-2018-06-11","title":"1.1.0 (2018-06-11)","text":"<p>In dj-stripe 1.1.0, we made a lot of changes to models in order to bring the dj-stripe model state much closer to the upstream API objects. If you are a current user of dj-stripe, you will most likely have to make changes in order to upgrade. Please read the full changelog below. If you are having trouble upgrading, you may ask for help by filing an issue on GitHub.</p>"},{"location":"history/1_x/#migration-reset","title":"Migration reset","text":"<p>The next version of dj-stripe, 1.2.0, will reset all the migrations to <code>0001_initial</code>. Migrations are currently in an unmaintainable state.</p> <p>What this means is you will not be able to upgrade directly to dj-stripe 1.2.0. You must go through 1.1.0 first, run ``manage.py migrate djstripe``, then upgrade to 1.2.0.</p>"},{"location":"history/1_x/#python-27-end-of-life","title":"Python 2.7 end-of-life","text":"<p>dj-stripe 1.1.0 drops support for Django 1.10 and adds support for Django 2.0. Django 1.11+ and Python 2.7+ or 3.4+ are required.</p> <p>Support for Python versions older than 3.5, and Django versions older than 2.0, will be dropped in dj-stripe 2.0.0.</p>"},{"location":"history/1_x/#backwards-incompatible-changes-and-deprecations","title":"Backwards-incompatible changes and deprecations","text":""},{"location":"history/1_x/#removal-of-polymorphic-models","title":"Removal of polymorphic models","text":"<p>The model architecture of dj-stripe has been simplified. Polymorphic models have been dropped and the old base StripeCustomer, StripeCharge, StripeInvoice, etc models have all been merged into the top-level Customer, Charge, Invoice, etc models.</p> <p>Importing those legacy models from <code>djstripe.stripe_objects</code> will yield the new ones. This is deprecated and support for this will be dropped in dj-stripe 2.0.0.</p>"},{"location":"history/1_x/#full-support-for-stripe-sources-support-for-v3-stripejs","title":"Full support for Stripe Sources (Support for v3 stripe.js)","text":"<p>Stripe sources (<code>src_XXXX</code>) are objects that can arbitrarily reference any of the payment method types that Stripe supports. However, the legacy <code>Card</code> object (with object IDs like <code>card_XXXX</code> or <code>cc_XXXX</code>) is not a Source object, and cannot be turned into a Source object at this time.</p> <p>In order to support both Card and Source objects in ForeignKeys, a new model <code>PaymentMethod</code> has been devised (renamed to <code>DjstripePaymentMethod</code> in 2.0). That model can resolve into a Card, a Source, or a BankAccount object.</p> <ul> <li>The ``default_source`` attribute on ``Customer`` now     refers to a ``PaymentMethod`` object. You will need to call     <code>.resolve()</code> on it to get the Card or Source in question.</li> <li>References to <code>Customer.sources</code> expecting a queryset of Card     objects should be updated to <code>Customer.legacy_cards</code>.</li> <li>The legacy <code>StripeSource</code> name refers to the <code>Card</code> model. This will     be removed in dj-stripe 2.0.0. Update your references to either     <code>Card</code> or <code>Source</code>.</li> <li><code>enums.SourceType</code> has been renamed to <code>enums.LegacySourceType</code>.     <code>enums.SourceType</code> now refers to the actual Stripe Source types     enum.</li> </ul>"},{"location":"history/1_x/#core-fields-renamed","title":"Core fields renamed","text":"<ul> <li>The numeric <code>id</code> field has been renamed to <code>djstripe_id</code>. This     avoids a clash with the upstream stripe id. Accessing <code>.id</code> is     deprecated and **will reference the upstream <code>stripe_id</code> in     dj-stripe 2.0.0</li> </ul>"},{"location":"history/1_x/#100-2017-08-12","title":"1.0.0 (2017-08-12)","text":"<p>It's finally here! We've made significant changes to the codebase and are now compliant with stripe API version 2017-06-05.</p> <p>I want to give a huge thanks to all of our contributors for their help in making this happen, especially Bill Huneke (@wahuneke) for his impressive design work and @jleclanche for really pushing this release along.</p> <p>I also want to welcome onboard two more maintainers, @jleclanche and @lskillen. They've stepped up and have graciously dedicated their resources to making dj-stripe such an amazing package.</p> <p>Almost all methods now mimic the parameters of those same methods in the stripe API. Note that some methods do not have some parameters implemented. This is intentional. That being said, expect all method signatures to be different than those in previous versions of dj-stripe.</p> <p>Finally, please note that there is still a bit of work ahead of us. Not everything in the Stripe API is currently supported by dj-stripe -- we're working on it. That said, v1.0.0 has been thoroughly tested and is verified stable in production applications.</p>"},{"location":"history/1_x/#a-few-things-to-get-excited-for","title":"A few things to get excited for","text":"<ul> <li>Multiple subscription support (finally)</li> <li>Multiple sources support (currently limited to Cards)</li> <li>Idempotency support (See #455, #460 for discussion -- big thanks     to @jleclanche)</li> <li>Full model documentation</li> <li>Objects that come through webhooks are now tied to the API version     set in dj-stripe. No more errors if dj-stripe falls behind the     newest stripe API version.</li> <li>Any create/update action on an object automatically syncs the     object.</li> <li>Concurrent LIVE and TEST mode support (Thanks to @jleclanche). Note     that you'll run into issues if <code>livemode</code> isn't set on your existing     customer objects.</li> <li>All choices are now enum-based (Thanks @jleclanche, See #520).     Access them from the new <code>djstripe.enums</code> module. The ability to     check against model property based choices will be deprecated in 1.1</li> <li>Support for the Coupon model, and coupons on Customer objects.</li> <li>Support for the Payout/Transfer     split from api     version <code>2017-04-06</code>.</li> </ul>"},{"location":"history/1_x/#what-still-needs-to-be-done-in-v110","title":"What still needs to be done (in v1.1.0)","text":"<ul> <li> <p>Documentation. Our original documentation was not very helpful,     but it covered the important bits. It will be very out of date after     this update and will need to be rewritten. If you feel like helping,     we could use all the help we can get to get this pushed out asap.</p> </li> <li> <p>Master sync re-write. This sounds scary, but really isn't. The     current management methods run sync methods on Customer that aren't     very helpful and are due for removal. My plan is to write something     that first updates local data (via <code>api_retrieve</code> and     <code>sync_from_stripe_data</code>) and then pulls all objects from Stripe and     populates the local database with any records that don't already     exist there.</p> <p>You might be wondering, \"Why are they releasing this if there are only a few things left?\" Well, that thinking turned this into a two year release... Trust me, this is a good thing.</p> </li> </ul>"},{"location":"history/1_x/#significant-changes-mostly-backwards-incompatible","title":"Significant changes (mostly backwards-incompatible)","text":"<ul> <li>Idempotency. #460 introduces idempotency keys and implements     idempotency for <code>Customer.get_or_create()</code>. Idempotency will be     enabled for all calls that need it.</li> <li>Improved Admin Interface. This is almost complete. See #451 and     #452.</li> <li>Drop non-trivial endpoint views. We're dropping everything     except the webhook endpoint and the subscription cancel endpoint.     See #428.</li> <li>Drop support for sending receipts. Stripe now handles this for     you. See #478.</li> <li>Drop support for plans as settings, including custom plan     hierarchy (if you want this, write something custom) and the dynamic     trial callback. We've decided to gut having plans as settings.     Stripe should be your source of truth; create your plans there and     sync them down manually. If you need to create plans locally for     testing, etc., simply use the ORM to create Plan models. The sync     rewrite will make this drop less annoying.</li> <li>Orphan Customer Sync. We will now sync Customer objects from     Stripe even if they aren't linked to local subscriber objects. You     can link up subscribers to those Customers manually.</li> <li>Concurrent Live and Test Mode. dj-stripe now supports test-mode     and live-mode Customer objects concurrently. As a result, the     User.customer One-to-One reverse-relationship is now the     User.djstripe_customers RelatedManager. (Thanks @jleclanche) #440.     You'll run into some dj-stripe check issues if you don't update your     KEY settings accordingly. Check our GitHub issue tracker for help on     this.</li> </ul>"},{"location":"history/1_x/#settings","title":"SETTINGS","text":"<ul> <li>The <code>PLAN_CHOICES</code>, <code>PLAN_LIST</code>, and <code>PAYMENT_PLANS</code> objects are     removed. Use Plan.objects.all() instead.</li> <li>The <code>plan_from_stripe_id</code> function is removed. Use     Plan.objects.get(stripe_id=)</li> </ul>"},{"location":"history/1_x/#syncing","title":"SYNCING","text":"<ul> <li>sync_plans no longer takes an api_key</li> <li>sync methods no longer take a <code>cu</code> parameter</li> <li>All sync methods are now private. We're in the process of building a     better syncing mechanism.</li> </ul>"},{"location":"history/1_x/#utilities","title":"UTILITIES","text":"<ul> <li>dj-stripe decorators now take a plan argument. If you're passing in     a custom test function to <code>subscriber_passes_pay_test</code>, be sure to     account for this new argument.</li> </ul>"},{"location":"history/1_x/#mixins","title":"MIXINS","text":"<ul> <li>The context provided by dj-stripe's mixins has changed.     <code>PaymentsContextMixin</code> now provides <code>STRIPE_PUBLIC_KEY</code> and <code>plans</code>     (changed to <code>Plan.objects.all()</code>). <code>SubscriptionMixin</code> now provides     <code>customer</code> and <code>is_plans_plural</code>.</li> <li>We've removed the SubscriptionPaymentRequiredMixin. Use     <code>@method_decorator(\"dispatch\",</code>subscription_payment_required<code>)</code>     instead.</li> </ul>"},{"location":"history/1_x/#middleware","title":"MIDDLEWARE","text":"<ul> <li>dj-stripe middleware doesn't support multiple subscriptions.</li> </ul>"},{"location":"history/1_x/#signals","title":"SIGNALS","text":"<ul> <li>Local custom signals are deprecated in favor of Stripe webhooks:</li> <li><code>cancelled</code> -&gt;     WEBHOOK_SIGNALS[\"customer.subscription.deleted\"]</li> <li><code>card_changed</code> -&gt; WEBHOOK_SIGNALS[\"customer.source.updated\"]</li> <li><code>subscription_made</code> -&gt;     WEBHOOK_SIGNALS[\"customer.subscription.created\"]</li> </ul>"},{"location":"history/1_x/#webhook-events","title":"WEBHOOK EVENTS","text":"<ul> <li>The Event Handlers designed by @wahuneke are the new way to handle     events that come through webhooks. Definitely take a look at     <code>event_handlers.py</code> and <code>webhooks.py</code>.</li> </ul>"},{"location":"history/1_x/#exceptions","title":"EXCEPTIONS","text":"<ul> <li><code>SubscriptionUpdateFailure</code> and <code>SubscriptionCancellationFailure</code>     exceptions are removed. There should no longer be a case where they     would have been useful. Catch native stripe errors in their place     instead.</li> </ul>"},{"location":"history/1_x/#models","title":"MODELS","text":"<p>CHARGE</p> <ul> <li> <p><code>Charge.charge_created</code> -&gt; <code>Charge.stripe_timestamp</code></p> </li> <li> <p><code>Charge.card_last_4</code> and <code>Charge.card_kind</code> are removed. Use     <code>Charge.source.last4</code> and <code>Charge.source.brand</code> (if the source is a     Card)</p> </li> <li> <p><code>Charge.invoice</code> is no longer a foreign key to the Invoice model.     <code>Invoice</code> now has a OneToOne relationship with <code>Charge</code>.     (<code>Charge.invoice</code> will still work, but will no longer be represented     in the database).</p> <p>CUSTOMER</p> </li> <li> <p>dj-stripe now supports test mode and live mode Customer objects     concurrently (See #440). As a result, the     <code>&lt;subscriber_model&gt;.customer</code> OneToOne reverse relationship is no     longer a thing. You should now instead add a <code>customer</code> property to     your subscriber model that checks whether you're in live or test     mode (see djstripe.settings.STRIPE_LIVE_MODE as an example) and     grabs the customer from <code>&lt;subscriber_model&gt;.djstripe_customers</code> with     a simple <code>livemode=</code> filter.</p> </li> <li> <p>Customer no longer has a <code>current_subscription</code> property. We've     added a <code>subscription</code> property that should suit your needs.</p> </li> <li> <p>With the advent of multiple subscriptions, the behavior of     <code>Customer.subscribe()</code> has changed. Before, <code>calling subscribe()</code>     when a customer was already subscribed to a plan would switch the     customer to the new plan with an option to prorate. Now calling     <code>subscribe()</code> simply subscribes that customer to a new plan in     addition to it's current subsription. Use <code>Subscription.update()</code> to     change a subscription's plan instead.</p> </li> <li> <p><code>Customer.cancel_subscription()</code> is removed. Use     <code>Subscription.cancel()</code> instead.</p> </li> <li> <p>The <code>Customer.update_plan_quantity()</code> method is removed. Use     <code>Subscription.update()</code> instead.</p> </li> <li> <p><code>CustomerManager</code> is now <code>SubscriptionManager</code> and works on the     <code>Subscription</code> model instead of the <code>Customer</code> model.</p> </li> <li> <p><code>Customer.has_valid_card()</code> is now <code>Customer.has_valid_source()</code>.</p> </li> <li> <p><code>Customer.update_card()</code> now takes an id. If the id is not supplied,     the default source is updated.</p> </li> <li> <p><code>Customer.stripe_customer</code> property is removed. Use     <code>Customer.api_retrieve()</code> instead.</p> </li> <li> <p>The <code>at_period_end</code> parameter of <code>Customer.cancel_subscription()</code>     now actually follows the     DJSTRIPE_PRORATION_POLICY     setting.</p> </li> <li> <p><code>Customer.card_fingerprint</code>, <code>Customer.card_last_4</code>,     <code>Customer.card_kind</code>, <code>Customer.card_exp_month</code>,     <code>Customer.card_exp_year</code> are all removed. Check     <code>Customer.default_source</code> (if it's a Card) or one of the sources in     <code>Customer.sources</code> (again, if it's a Card) instead.</p> </li> <li> <p>The <code>invoice_id</code> parameter of <code>Customer.add_invoice_item</code> is now     named <code>invoice</code> and can be either an Invoice object or the     stripe_id of an Invoice.</p> <p>EVENT</p> </li> <li> <p><code>Event.kind</code> -&gt; <code>Event.type</code></p> </li> <li> <p>Removed <code>Event.validated_message</code>. Just check if the event is valid</p> <ul> <li>no need to double check (we do that for you)</li> </ul> <p>TRANSFER</p> </li> <li> <p>Removed <code>Transfer.update_status()</code></p> </li> <li> <p>Removed <code>Transfer.event</code></p> </li> <li> <p><code>TransferChargeFee</code> is removed. It hasn't been used in a while due     to a broken API version. Use <code>Transfer.fee_details</code> instead.</p> </li> <li> <p>Any fields that were in <code>Transfer.summary</code> no longer exist and are     therefore deprecated (unused but not removed from the database).     Because of this, <code>TransferManager</code> now only aggregates <code>total_sum</code></p> <p>INVOICE</p> </li> <li> <p><code>Invoice.attempts</code> -&gt; <code>Invoice.attempt_count</code></p> </li> <li> <p>InvoiceItems are no longer created when Invoices are synced. You     must now sync InvoiceItems directly.</p> <p>INVOICEITEM</p> </li> <li> <p>Removed <code>InvoiceItem.line_type</code></p> <p>PLAN</p> </li> <li> <p>Plan no longer has a <code>stripe_plan</code> property. Use <code>api_retrieve()</code>     instead.</p> </li> <li> <p><code>Plan.currency</code> no longer uses choices. Use the     <code>get_supported_currency_choices()</code> utility and create your own     custom choices list instead.</p> </li> <li> <p>Plan interval choices are now in <code>Plan.INTERVAL_TYPE_CHOICES</code></p> <p>SUBSCRIPTION</p> </li> <li> <p><code>Subscription.is_period_current()</code> now checks for a current trial     end if the current period has ended. This change means subscriptions     extended with <code>Subscription.extend()</code> will now be seen as valid.</p> </li> </ul>"},{"location":"history/1_x/#migrations","title":"MIGRATIONS","text":"<p>We'll sync your current records with Stripe in a migration. It will take a while, but it's the only way we can ensure data integrity. There were some fields for which we needed to temporarily add placeholder defaults, so just make sure you have a customer with ID 1 and a plan with ID 1 and you shouldn't run into any issues (create dummy values for these if need be and delete them after the migration).</p>"},{"location":"history/1_x/#big-huge-note-dont-overlook-this","title":"BIG HUGE NOTE - DON'T OVERLOOK THIS","text":"<p>Warning</p> <p>Subscription and InvoiceItem migration is not possible because old records don't have Stripe IDs (so we can't sync them). Our approach is to delete all local subscription and invoiceitem objects and re-sync them from Stripe.</p> <p>We 100% recommend you create a backup of your database before performing this upgrade.</p>"},{"location":"history/1_x/#other-changes","title":"Other changes","text":"<ul> <li>Postgres users now have access to the     <code>DJSTRIPE_USE_NATIVE_JSONFIELD</code> setting. (Thanks @jleclanche) #517,     #523</li> <li>Charge receipts now take <code>DJSTRIPE_SEND_INVOICE_RECEIPT_EMAILS</code> into     account (Thanks @r0fls)</li> <li>Clarified/modified installation documentation (Thanks @pydanny)</li> <li>Corrected and revised ANONYMOUS_USER_ERROR_MSG (Thanks @pydanny)</li> <li>Added fnmatching to <code>SubscriptionPaymentMiddleware</code>     (Thanks @pydanny)</li> <li><code>SubscriptionPaymentMiddleware.process_request()</code> functionality     broken up into multiple methods, making local customizations easier     (Thanks @pydanny)</li> <li>Fully qualified events are now supported by event handlers as     strings e.g. 'customer.subscription.deleted' (Thanks @lskillen)     #316</li> <li>runtests now accepts positional arguments for declaring which tests     to run (Thanks @lskillen) #317</li> <li>It is now possible to reprocess events in both code and the admin     interface (Thanks @lskillen) #318</li> <li>The confirm page now checks that a valid card exists.     (Thanks @scream4ik) #325</li> <li>Added support for viewing upcoming invoices (Thanks @lskillen) #320</li> <li>Event handler improvements and bugfixes (Thanks @lskillen) #321</li> <li>API list() method bugfixes (Thanks @lskillen) #322</li> <li>Added support for a custom webhook event handler (Thanks @lskillen)     #323</li> <li>Django REST Framework contrib package improvements     (Thanks @aleccool213) #334</li> <li>Added <code>tax_percent</code> to CreateSubscriptionSerializer     (Thanks @aleccool213) #349</li> <li>Fixed incorrectly assigned <code>application_fee</code> in Charge calls     (Thanks @kronok) #382</li> <li>Fixed bug caused by API change (Thanks @jessamynsmith) #353</li> <li>Added inline documentation to pretty much everything and enforced     docsytle via flake8 (Thanks @aleccool213)</li> <li>Fixed outdated method call in template (Thanks @kandoio) #391</li> <li>Customer is correctly purged when subscriber is deleted, regardless     of how the deletion happened (Thanks @lskillen) #396</li> <li>Test webhooks are now properly captured and logged. No more bounced     requests to Stripe! (Thanks @jameshiew) #408</li> <li>CancelSubscriptionView redirect is now more flexible     (Thanks @jleclanche) #418</li> <li>Customer.sync_cards() (Thanks @jleclanche) #438</li> <li>Many stability fixes, bugfixes, and code cleanup     (Thanks @jleclanche)</li> <li>Support syncing canceled subscriptions (Thanks @jleclanche) #443</li> <li>Improved admin interface (Thanks @jleclanche with @jameshiew) #451</li> <li>Support concurrent TEST + LIVE API keys (Fix webhook event     processing for both modes) (Thanks @jleclanche) #461</li> <li>Added Stripe Dashboard link to admin change panel     (Thanks @jleclanche) #465</li> <li>Implemented <code>Plan.amount_in_cents</code> (Thanks @jleclanche) #466</li> <li>Implemented <code>Subscription.reactivate()</code> (Thanks @jleclanche) #470</li> <li>Added <code>Plan.human_readable_price</code> (Thanks @jleclanche) #498</li> <li>(Re)attach the Subscriber when we find it's id attached to a     customer on Customer sync (Thanks @jleclanche) #500</li> <li>Made API version configurable (with dj-stripe recommended default)     (Thanks @lskillen) #504</li> </ul>"},{"location":"history/2_4_0/","title":"dj-stripe 2.4.0 release notes (2020-11-19)","text":"<p>Attention</p> <p>To upgrade to 2.4.0 from older versions of dj-stripe, scroll down to the Upgrade Guide.</p>"},{"location":"history/2_4_0/#introducing-sponsorships-and-our-first-sponsor","title":"Introducing sponsorships and our first sponsor","text":"<p>We're excited to introduce our Sponsorship tiers. Individuals may back dj-stripe to assist with development. Larger backers may choose one the paid support plans available to receive support on top of ensuring the long-term viability of the project!</p> <p>And this release was made possible by none other than\u2026 Stripe! Our very first Gold sponsor. Their financial backing has allowed us to pour a lot of work that could not have otherwise happened.</p>"},{"location":"history/2_4_0/#release-notes","title":"Release notes","text":"<ul> <li>Support for Django 3.1 and Python 3.8.</li> <li>Minimum stripe-python version is now 2.48.0.</li> <li>Default Stripe API version is now <code>2020-08-27</code>.</li> <li>First-class support for the Price model, replacing Plans.</li> <li>Support multi-item subscriptions.</li> <li>Support for API keys in the database (see Managing Stripe API     keys).</li> <li>Support for syncing objects for multiple, different Stripe accounts.</li> <li>Use Django 3.1 native JSONField when available.</li> <li>The field <code>djstripe_owner_account</code> has been added to all Stripe models, and is     automatically populated with the Account that owns the API key used to retrieve it.</li> <li>Support for subscription schedules (#899).</li> <li>Add support for Reporting categories and TaxIds</li> <li>Update many models to match latest version of the Stripe API.</li> <li>Fixed Account.get_default_account() for Restricted API Keys.</li> <li>Allow passing arbitrary arguments (any valid SDK argument) to the following methods:<ul> <li><code>Customer.charge()</code></li> <li><code>Customer.subscribe()</code>,</li> <li><code>Charge.capture()</code></li> <li><code>Subscription.update()</code></li> </ul> </li> <li>New management command: <code>djstripe_update_invoiceitem_ids</code>. This command migrates     InvoiceItems using Stripe's old IDs to the new ones.</li> <li>Hundreds of other bugfixes.</li> </ul>"},{"location":"history/2_4_0/#new-feature-in-database-stripe-api-keys","title":"New feature: in-database Stripe API keys","text":"<p>Stripe API keys are now stored in the database, and are now editable in the admin.</p> <p>Warning</p> <p>By default, all keys are visible by anyone who has access to the dj-stripe administration.</p>"},{"location":"history/2_4_0/#why","title":"Why?","text":"<p>As we work on supporting multiple Stripe accounts per instance, it is vital for dj-stripe to have a mechanism to store more than one Stripe API key. It also became obvious that we may want proper programmatic access to create and delete keys. Furthermore, API keys are a legitimate upstream Stripe object, and it is not unlikely the API may allow access to listing other API keys in the future, in which case we will want to move them to the database anyway.</p> <p>In the next release, we are planning to make WebhookEndpoints (and thus webhook secrets) manageable via the database as well.</p>"},{"location":"history/2_4_0/#do-i-need-to-change-anything","title":"Do I need to change anything?","text":"<p>Not at this time. The settings <code>STRIPE_LIVE_SECRET_KEY</code> and <code>STRIPE_TEST_SECRET_KEY</code> can still be used. Their values will however be automatically saved to the database at the earliest opportunity.</p>"},{"location":"history/2_4_0/#what-about-public-keys","title":"What about public keys?","text":"<p>Setting <code>STRIPE_LIVE_PUBLIC_KEY</code> and <code>STRIPE_TEST_PUBLIC_KEY</code> will be deprecated next release. You do not risk anything by leaving them in your settings: They are not used by Dj-Stripe outside of the Dj-Stripe mixins, which are now themselves deprecated. So you can safely leave them in your settings, or you can move them to the database as well (Keys beginning in <code>pk_test_</code> and <code>pk_live_</code> will be detected as publishable keys).</p>"},{"location":"history/2_4_0/#deprecated-features","title":"Deprecated features","text":"<p>Nobody likes features being removed. However, the last few releases we have had to remove features that were not core to what dj-stripe does, or simply poorly-maintained. To keep up with the trend, we are making three major deprecations this release:</p>"},{"location":"history/2_4_0/#creating-plans-from-the-django-admin-is-no-longer-supported","title":"Creating Plans from the Django Admin is no longer supported","text":"<p>The <code>Plan</code> model was special cased in various places, including being the only one which supported being created from the Django administration. This is no longer supported. We have plans to allow creating arbitrary Stripe objects from the Django Admin, but until it can be done consistently, we have decided to remove the feature for Plans (which are deprecated by Stripe anyway). The only object type you should be dealing with from the admin is the new APIKey model.</p> <p>Along with this, we are also deprecating the <code>djstripe_sync_plans_from_stripe</code> management command. You can instead use the <code>djstripe_sync_models</code> management command, which supports arbitrary models.</p>"},{"location":"history/2_4_0/#deprecating-the-rest-api","title":"Deprecating the REST API","text":"<p>We are dropping all support for the REST API and will be fully removing it in 2.5.0. We're doing this because we wish to keep such an API separate from dj-stripe. Work has already started on a new project, and we will be sharing more details about it soon. If you're interested in helping out, please reach out on Github!</p>"},{"location":"history/2_4_0/#deprecating-djstripemiddlewaresubscriptionpaymentmiddleware","title":"Deprecating <code>djstripe.middleware.SubscriptionPaymentMiddleware</code>","text":"<p>Large parts of dj-stripe, including this middleware, were designed before Stripe's major revamps of the old Plan model into Prices, Products, and multi-plan subscriptions. The functionality offered by the middleware is no longer adequate, and building on top of it would not be particularly robust. We may bring similar functionality back in the future, but the middleware as it is is going away (as well as the undocumented <code>djstripe.utils.subscriber_has_active_subscription</code> utility function).</p> <p>If you want to keep the functionality for your project, you may wish to copy the latest version of the middleware.</p>"},{"location":"history/2_4_0/#deprecating-djstripemixins","title":"Deprecating <code>djstripe.mixins</code>","text":"<p>This is being deprecated for similar reasons as the SubscriptionPaymentMiddleware. However, the mixins module was undocumented and never officially supported.</p>"},{"location":"history/2_4_0/#other-deprecations","title":"Other deprecations","text":"<ul> <li>The <code>account</code> field on <code>Charge</code> has been renamed to <code>on_behalf_of</code>, to be consistent     with Stripe's upstream model. Note that this field is separate from     <code>djstripe_owner_account</code>, which is set by dj-stripe itself to match the account of     the API key used.</li> <li><code>Account.get_connected_account_from_token()</code> is deprecated in favour of     <code>Account.get_or_retrieve_for_api_key()</code>, which supports more than just Connect     accounts.</li> <li><code>Customer.has_active_subscription()</code> is deprecated in favour of     <code>Customer.is_subscribed_to()</code>. Note that the former takes a plan as argument,     whereas the latter takes a product as argument.</li> <li>The <code>tax_percent</code> attribute of <code>Invoice</code> is no longer populated and will be removed     in 2.5.0. You may want to use <code>Invoice.default_tax_rates</code> instead, which uses the     new TaxId functionality.</li> <li><code>Customer.business_vat_id</code> is being deprecated in favour of using TaxId models     directly.</li> </ul>"},{"location":"history/2_4_0/#breaking-changes","title":"Breaking changes","text":"<ul> <li>Rename PlanBillingScheme to BillingScheme.</li> <li> <p>Remove <code>Plan.update_name()</code> and these previously-deprecated fields:</p> <ul> <li><code>Customer.business_vat_id</code></li> <li><code>Subscription.start</code></li> <li><code>Subscription.billing</code></li> </ul> </li> </ul>"},{"location":"history/2_4_0/#upgrade-guide","title":"Upgrade Guide","text":"<p>Before you upgrade to dj-stripe 2.4.0, we recommend upgrading to dj-stripe 2.3.0. Upgrading one major release at a time minimizes the risk of issues arising.</p> <p>Upgrading directly to 2.4.0 from dj-stripe versions older than 2.2.0 is unsupported.</p> <p>To upgrade dj-stripe, run <code>pip install --upgrade dj-stripe==2.4.0</code>.</p> <p>Once installed, you can run <code>manage.py migrate djstripe</code> to migrate the database models.</p> <p>Attention</p> <p>If you are doing multiple major dj-stripe upgrades in a row, remember to run the migrate command after every upgrade. Skipping this step WILL cause errors.</p> <p>Note</p> <p>Migrating the database models may take a long time on databases with large amounts of customers.</p>"},{"location":"history/2_4_0/#settings-changes","title":"Settings changes","text":"<p>A new mandatory setting <code>DJSTRIPE_FOREIGN_KEY_TO_FIELD</code> has been added. If you are upgrading from an older version, you need to set it to <code>\"djstripe_id\"</code>.</p> <p>Setting it to <code>\"id\"</code> will make dj-stripe use the Stripe IDs as foreign keys. Although this is recommended for new installations, there is currently no migration available for going from <code>\"djstripe_id\"</code> to <code>\"id\"</code>.</p> <p>For more information on this setting, see Settings.</p>"},{"location":"history/2_4_x/","title":"dj-stripe 2.4.4 release notes (2021-05-22)","text":"<ul> <li>Fix syncing of tax IDs in management commands</li> <li>Set <code>default_auto_field</code> in migrations to prevent creation of extra migrations</li> <li>Misc test and documentation fixes</li> </ul>"},{"location":"history/2_4_x/#dj-stripe-243-release-notes-2021-02-08","title":"dj-stripe 2.4.3 release notes (2021-02-08)","text":"<ul> <li>Fix webhook error when processing events that contain a reference to a deleted     payment method (such as a refund on a payment whose card has been detached or     removed)</li> <li>Fix a couple of regressions in <code>djstripe_sync_models</code> management command.</li> </ul>"},{"location":"history/2_4_x/#dj-stripe-242-release-notes-2021-01-24","title":"dj-stripe 2.4.2 release notes (2021-01-24)","text":""},{"location":"history/2_4_x/#release-notes","title":"Release notes","text":"<ul> <li>Fix error in <code>Customer.add_card()</code> due to Stripe's <code>sources</code> deprecation. (#1293)</li> <li>Fix <code>Subscription.update()</code> usage of the deprecated Stripe <code>prorate</code> argument.     dj-stripe now explicitly uses <code>proration_behavior</code>, setting it to <code>\"none\"</code> when     <code>prorate</code> is <code>False</code>, and <code>\"create_prorations\"</code> when <code>prorate</code> is <code>True</code>.</li> </ul>"},{"location":"history/2_4_x/#dj-stripe-241-release-notes-2020-11-29","title":"dj-stripe 2.4.1 release notes (2020-11-29)","text":""},{"location":"history/2_4_x/#release-notes_1","title":"Release notes","text":"<ul> <li>Upgrade default Stripe API version to <code>2020-08-27</code>. Although we documented doing so     in 2.4.0, it was not correctly set as such. This has been fixed for consistency.</li> <li>The <code>Price</code> model was incorrectly released with an <code>amount_in_cents</code> property,     matching that of the <code>Plan</code> model. However, Price amounts are already in cent. The     property has been removed, use <code>unit_amount</code> instead.</li> <li>Fix <code>Price.human_readable_price</code> calculation</li> <li>Fix non-blank nullable <code>Charge</code> fields</li> <li>Fix Price.tiers not being synced correctly with <code>djstripe_sync_models</code> (#1284)</li> <li>Fix sync model recursion loop (see #1288)</li> </ul>"},{"location":"history/2_5_0/","title":"dj-stripe 2.5.0 (2021-06-06)","text":"<p>Attention</p> <p>It is not possible to upgrade to dj-stripe 2.5.0 from versions older than 2.2.2. To upgrade from an older version, first upgrade to <code>dj-stripe 2.2.2</code>.</p>"},{"location":"history/2_5_0/#release-notes","title":"Release notes","text":"<ul> <li>Minimum Python version is now 3.6.2.</li> <li>Support for Python 3.9 and Django 3.2.</li> <li>In keeping with upstream's cycle, Django 3.0 is no longer officially supported.     (Note that it will still work, because Django 2.2 LTS is still supported.)</li> <li>SQLite versions older than 3.26 are no longer supported.</li> <li>New models: FileLink, Mandate</li> <li>Cards and Bank Accounts are now visible in the admin interface.</li> <li>Lots of model sync fixes since 2.4.0.</li> </ul>"},{"location":"history/2_5_0/#deprecated-features","title":"Deprecated features","text":"<ul> <li>The <code>FileUpload</code> model has been renamed <code>File</code>, for consistency with Stripe's SDK.     Although the old name is still supported, it will eventually be removed.</li> <li>Deprecate <code>charge_immediately</code> argument to <code>Customer.subscribe()</code>. It did not behave     as expected on recent versions of Stripe. If you were using it set to     <code>charge_immediately=False</code>, you can instead pass <code>collection_method=\"send_invoice\"</code>,     which will send the Customer the invoice to manually pay, instead.</li> </ul>"},{"location":"history/2_5_0/#breaking-changes","title":"Breaking changes","text":"<ul> <li>When calling <code>Customer.delete()</code> in prior versions of dj-stripe, the Customer object     would be deleted in the upstream API and the Customer object would be retained but     with a <code>date_purged</code> attribute. This was the only model behaving this way, and it is     no longer the case. If you wish to purge a customer like before, you may call     <code>Customer.purge()</code> instead, though that method may be removed in future versions as     well.</li> <li>Remove deprecated DRF integration (<code>djstripe.contrib.rest_framework</code>)</li> <li>Remove deprecated <code>djstripe.decorators</code> module</li> <li>Remove deprecated <code>djstripe.middleware</code> module</li> <li>Remove deprecated fields <code>Account.business_vat_id</code> and <code>Subscription.tax_percent</code></li> <li>Remove deprecated method <code>Account.get_connected_account_from_token()</code>. Use     <code>Account.get_or_retrieve_for_api_key()</code> instead.</li> <li>Remove deprecated <code>Charge.account</code> property. Use <code>Charge.on_behalf_of</code> instead.</li> <li>Remove deprecated <code>Customer.has_active_subscription()</code> method. Use     <code>Customer.is_subscribed_to(product)</code> instead.</li> <li><code>FileUploadPurpose</code> enum has been renamed <code>FilePurpose</code>.</li> <li><code>FileUploadType</code> enum has been renamed <code>FileType</code>.</li> </ul>"},{"location":"history/2_5_x/","title":"dj-stripe 2.5.1 (2021-07-02)","text":""},{"location":"history/2_5_x/#release-notes","title":"Release notes","text":"<ul> <li>Fixed migration issue for new setups using custom <code>DJSTRIPE_CUSTOMER_MODEL</code>.</li> <li>Display correct JSON for JSONFields in the Django admin.</li> <li>Fix manual syncing of <code>SubscriptionItem</code>.</li> </ul>"},{"location":"history/2_6_0/","title":"dj-stripe 2.6.0 (2022-01-15)","text":"<p>Attention</p> <p>It is not possible to upgrade to dj-stripe 2.6.0 from versions older than 2.3.0. To upgrade from an older version, first upgrade to <code>dj-stripe 2.3.0</code>.</p>"},{"location":"history/2_6_0/#release-highlights","title":"Release highlights","text":"<ul> <li>Support for Python 3.10 and Django 4.0.</li> <li>New models: Mandate, Payout, UsageRecordSummary, WebhookEndpoint (unused)</li> <li>Significant improvements and fixes to Stripe Connect features.</li> <li>Storing Stripe API keys by adding them to the Admin is now supported.     This allows for use of multiple Stripe API keys (multiple Stripe accounts).</li> <li>Support for syncing Connect accounts via <code>djstripe_sync_models</code>.</li> </ul>"},{"location":"history/2_6_0/#deprecated-features","title":"Deprecated features","text":"<ul> <li>The use of the old <code>jsonfield</code>-based <code>JSONField</code> is deprecated and support for it     will be dropped in dj-stripe 2.8.0. <code>django.models.JSONField</code> is available since     Django 3.1.0. To switch to the newer JSONFields, set <code>DJSTRIPE_USE_NATIVE_JSONFIELD</code>     to <code>True</code>. Set it to <code>False</code> to remain on the <code>jsonfield</code>-powered text-based fields.     A manual migration is necessary to convert existing databases from text to json.</li> <li>The <code>DJSTRIPE_PRORATION_POLICY</code> setting is deprecated and will be ignored in 2.8.     Specify <code>proration_policy</code> in the <code>Subscription.update()</code> method explicitly instead.</li> <li><code>Customer.can_charge()</code> is now deprecated. This was a very misleading method which     resulted in incorrect behaviour when Customers had multiple payment methods. It will     be removed in dj-stripe 2.8.0. You can use <code>Customer.payment_methods.all()</code> instead.</li> <li>For similar reasons, <code>Customer.has_valid_source()</code> is deprecated and will be removed     in dj-stripe 2.8.0. You can use <code>Customer.sources.all()</code> instead.</li> </ul>"},{"location":"history/2_6_0/#breaking-changes","title":"Breaking changes","text":"<ul> <li>Python 3.6 is no longer supported. The new minimum version of Python is 3.7.12.</li> <li>Django 2.2 and 3.1 are no longer supported.</li> <li><code>DJSTRIPE_USE_NATIVE_JSONFIELD</code> now defaults to <code>True</code>. If you previously had it set     to <code>False</code>, or did not have it set, you may want to explicitly set it to <code>False</code> in     order to support a pre-existing database. A migration path will later be provided     for this use case.</li> <li>The undocumented <code>get_stripe_api_version()</code> helper function has been removed.</li> <li>Settings for dj-stripe are now in <code>djstripe.settings.djstripe_settings</code> (as opposed     to top-level in <code>djstripe.settings</code>)</li> <li><code>Customer.subscribe()</code> method no longer accepts positional arguments, only keywords.</li> <li><code>charge_immediately</code> support in Customer.subscribe() has been removed (deprecated     in 2.4). Set <code>collection_method</code> instead.</li> <li>The <code>at_period_end</code> argument to <code>Subscription.cancel()</code> now defaults to <code>False</code>,     instead of the value of <code>DJSTRIPE_PRORATION_POLICY</code>.</li> </ul>"},{"location":"history/2_6_0/#other-changes","title":"Other changes","text":"<ul> <li>The Stripe Account that triggered an Event is now available on the field     <code>WebhookEventTrigger.stripe_trigger_account</code>.</li> <li>Fixed recursive fetch/update loop errors in <code>djstripe_sync_models</code>.</li> <li>Migrations have been optimized and should be faster.</li> <li>dj-stripe now checks the apparent validity of API keys used and will raise     <code>InvalidStripeAPIKey</code> if the API key looks completely incorrect.</li> <li><code>Customers</code> can now be subscribed to multiple prices and/or plans by passing the <code>items</code> argument     to <code>Customer.subscribe()</code>.</li> <li>Checkout Session metadata can be used to create/link a Stripe <code>Customer</code> to the     <code>Customer</code> instance specified by the <code>djstripe_settings.SUBSCRIBER_CUSTOMER_KEY</code>.</li> </ul>"},{"location":"history/2_6_x/","title":"dj-stripe 2.6.2 (2022-07-02)","text":"<p>This is a maintenance release to remove the generation of an unnecessary migration when running dj-stripe on Django 4.0. This release does not guarantee Django 4.0 compatibility. Run at your own risk.</p>"},{"location":"history/2_6_x/#release-notes","title":"Release notes","text":"<ul> <li>Update migrations to be compatible with Django 4.0</li> </ul>"},{"location":"history/2_6_x/#dj-stripe-261-2022-02-07","title":"dj-stripe 2.6.1 (2022-02-07)","text":""},{"location":"history/2_6_x/#release-notes_1","title":"Release notes","text":"<ul> <li>Fix issue saving a new WebhookEndpoint from the admin</li> <li>Fix potential IntegrityError when syncing models</li> </ul>"},{"location":"history/2_7_0/","title":"dj-stripe 2.7.0 (2022-10-17)","text":"<p>Attention</p> <p>It is not possible to upgrade to dj-stripe 2.7.0 from versions older than 2.4.0. To upgrade from an older version, first upgrade to dj-stripe 2.4.0.</p> <p>This release focuses on Webhook Endpoints. For more information on the reasoning behind the changes, please see the discussion on Github:</p> <p>https://github.com/dj-stripe/dj-stripe/discussions/1437</p>"},{"location":"history/2_7_0/#release-highlights","title":"Release highlights","text":"<ul> <li>Webhook Endpoints are now configured via the Django administration.</li> <li>Multiple Webhook Endpoints are now supported.</li> <li>Webhook Endpoints now have a unique, non-guessable URL.</li> </ul>"},{"location":"history/2_7_0/#deprecated-features","title":"Deprecated features","text":"<ul> <li>The <code>DJSTRIPE_WEBHOOK_URL</code> setting is deprecated. It will be removed in dj-stripe     2.9. It was added to give a way of \"hiding\" the webhook endpoint URL, but that is no     longer necessary with the new webhook endpoint system.</li> </ul>"},{"location":"history/2_7_0/#breaking-changes","title":"Breaking changes","text":"<ul> <li>Remove the deprecated middleware <code>djstripe.middleware.SubscriptionPaymentMiddleware</code></li> <li>Remove support for the deprecated <code>DJSTRIPE_SUBSCRIPTION_REDIRECT</code> setting</li> <li>Remove support for the <code>DJSTRIPE_SUBSCRIPTION_REQUIRED_EXCEPTION_URLS</code> setting</li> </ul>"},{"location":"history/2_7_0/#other-changes","title":"Other changes","text":"<ul> <li>Many Stripe Connect related fixes (Special thanks to Dominik Bartenstein of Zemtu)</li> <li>Allow passing stripe kwargs in Subscription.cancel()</li> <li>Various admin improvements</li> <li>Add support for managing subscription schedules from the admin</li> </ul>"},{"location":"history/2_7_x/","title":"dj-stripe 2.7.3 (2022-11-26)","text":"<p>Due to Stripe dropping support for the <code>Order</code> model, we have had to restrict the Stripe SDK to versions below 5.0.0.</p> <p>This release thus fixes the following error:</p> <pre><code>AttributeError: module 'stripe' has no attribute 'Order'\n</code></pre> <p>More info: https://github.com/dj-stripe/dj-stripe/issues/1842</p> <p>If you are on an older version of dj-stripe and cannot upgrade, you may simply install an older version of the Stripe SDK, for example with <code>pip install stripe&lt;5.0.0</code>.</p>"},{"location":"history/2_7_x/#dj-stripe-272-2022-10-21","title":"dj-stripe 2.7.2 (2022-10-21)","text":""},{"location":"history/2_7_x/#release-notes","title":"Release notes","text":"<ul> <li>Fix installing with Poetry on Django 4.0 and higher</li> </ul>"},{"location":"history/2_7_x/#dj-stripe-271-2022-10-20","title":"dj-stripe 2.7.1 (2022-10-20)","text":""},{"location":"history/2_7_x/#release-notes_1","title":"Release notes","text":"<ul> <li>Remove an enum value generating an extra migration</li> <li>Allow Django 4.1 as a dependency (Note: Running dj-stripe 2.7.x with Django 4.1 is     untested)</li> </ul>"},{"location":"history/2_8_0/","title":"dj-stripe 2.8.0 (2023-06-28)","text":"<p>Attention</p> <p>It is not possible to upgrade to dj-stripe 2.8.0 from versions older than 2.5.0. To upgrade from an older version, first upgrade to dj-stripe 2.5.0.</p>"},{"location":"history/2_8_0/#release-highlights","title":"Release highlights","text":"<p>This release introduces support for Stripe Identity.</p> <p>It is also slated to be the last major release before dj-stripe 3.0, which will introduce significant, backwards-incompatible changes.</p> <ul> <li>Python 3.11 is now supported.</li> <li>Django 4.1 and 4.2 are now supported.</li> <li>Python 3.7 is no longer supported. Python 3.8 or higher is required.</li> <li>Added <code>LineItem</code> model.</li> <li>Added <code>Discount</code> model.</li> <li>Added <code>SourceTransaction</code>, <code>VerificationSession</code> and <code>VerificationReport</code> models.</li> </ul>"},{"location":"history/2_8_0/#deprecated-features","title":"Deprecated features","text":"<ul> <li><code>DJSTRIPE_WEBHOOK_EVENT_CALLBACK</code> is deprecated in favour of the new webhook signals.</li> <li><code>DJSTRIPE_WEBHOOK_TOLERANCE</code> is deprecated in favour of the new UUID webhooks <code>tolerance</code> model field.</li> </ul>"},{"location":"history/2_8_0/#breaking-changes","title":"Breaking changes","text":"<ul> <li>Remove legacy JSONField support. This drops support for installations with the     <code>DJSTRIPE_USE_NATIVE_JSONFIELD</code> setting set to <code>False</code>.     NOTE: No migration path is available yet.     https://github.com/dj-stripe/dj-stripe/issues/1820</li> <li>Remove <code>djstripe_sync_plans_from_stripe</code> command (deprecated in 2.4.0).     Use <code>djstripe_sync_models price</code> instead.</li> <li>Remove <code>Customer.can_charge()</code>, <code>Customer.has_valid_source()</code> ()</li> <li>Remove <code>DJSTRIPE_PRORATION_POLICY</code> setting (deprecated in 2.6.0)</li> <li>Remove deprecated <code>prorate</code> argument to <code>Subscription.update()</code> (Use Stripe's     <code>proration_behavior</code> argument instead)</li> <li>Remove undocumented <code>set_stripe_api_version()</code> helper function     and context manager <code>stripe_temporary_api_version()</code>.     The API version is now set on each request individually.</li> <li>Updated <code>Charge.refund(...)</code> helper function     to correctly create the desired refund. Note that the     created <code>Refund</code> object is now returned as opposed to     the <code>Charge</code> object.</li> <li>Resolved ambiguity between <code>LineItem</code> and <code>InvoiceItem</code> models. We previously     assumed that the <code>lines</code> List object on <code>Invoice</code> and <code>UpcomingInvoice</code> models only     return <code>InvoiceItem</code> objects. Moreover <code>LineItem</code> objects can also be of type     <code>subscription</code> if the user adds a Subscription to their <code>Invoice</code> as a lineitem.</li> </ul>"},{"location":"history/2_8_0/#other-changes","title":"Other changes","text":"<ul> <li>Updated the Stripe API key and webhook django system check to warning instead of critical.</li> <li>Added various missing model field to CheckoutSession and Payout models.</li> <li>Added support for running tests using the real Stripe API calls.</li> <li><code>stripe.api_version</code> is no longer manipulated by dj-stripe.</li> <li>New webhook signals are available:<ul> <li><code>djstripe.signals.webhook_pre_validate(instance, api_key)</code>: Fired before webhook validation</li> <li><code>djstripe.signals.webhook_post_validate(instance, api_key, valid)</code>: Fired after validation (even unsuccessful validations)</li> <li><code>djstripe.signals.webhook_pre_process(instance, api_key)</code>: Fired before webhook processing. Not fired if the validation failed.</li> <li><code>djstripe.signals.webhook_post_process(instance, api_key)</code>: Fired after webhook successful processing.</li> </ul> </li> <li><code>djstripe.signals.webhook_processing_error</code> now also takes <code>instance</code> and <code>api_key</code> arguments</li> <li>Updated deprecated <code>pkg_resources</code> to <code>importlib</code>.</li> </ul>"},{"location":"history/2_8_x/","title":"dj-stripe 2.8.2 (2023-09-06)","text":"<ul> <li>Automatically set the customer name in Stripe if available</li> <li>Fix error creating WebhookEndpoint in admin panel</li> <li>Pass down kwargs to <code>Invoice.pay()</code> (#1968)</li> <li>Fix crash with certain unsupported payment methods (#1944)</li> </ul>"},{"location":"history/2_8_x/#dj-stripe-281-2023-07-01","title":"dj-stripe 2.8.1 (2023-07-01)","text":"<p>This release removes a migration which caused a crash in certain cases.</p>"},{"location":"history/2_9_0/","title":"dj-stripe 2.9.0 ()","text":""},{"location":"history/2_9_0/#breaking-changes","title":"Breaking Changes","text":"<ul> <li>Transitions all custom webhook handler code to Django's native signals</li> </ul>"},{"location":"history/2_x/","title":"dj-stripe 2.0 ~ 2.3 release notes","text":""},{"location":"history/2_x/#230-2020-04-19","title":"2.3.0 (2020-04-19)","text":"<ul> <li>The minimum version of Django is now 2.1, and Python 3.6.</li> <li>Changed <code>JSONField</code> dependency back to     jsonfield from     jsonfield2 (see Warning     about safe uninstall of jsonfield2 on     upgrade).</li> <li>Fixed handling of <code>TaxRate</code> events (#1094).</li> <li>Fixed pagination issue in <code>Invoice.sync_from_stripe_data</code> (#1052).</li> <li>Fixed pagination issues in <code>Subscription</code> &amp; <code>Charge</code> <code>.sync_from_stripe_data</code> (#1054).</li> <li>Tidyup <code>_stripe_object_set_total_tax_amounts</code> unique handling (#1139).</li> <li>Dropped previously-deprecated <code>Invoice</code> fields (see https://stripe.com/docs/upgrades#2018-11-08 ):<ul> <li><code>.closed</code></li> <li><code>.forgiven</code></li> <li><code>.billing</code> (renamed to <code>.collection_method</code>)</li> </ul> </li> <li>Dropped previously-deprecated <code>enums.InvoiceStatus</code> (#1020).</li> <li>Deprecated the following fields - will be removed in 2.4 (#1087):<ul> <li><code>Subscription.billing</code> (use <code>.collection_method</code> instead)</li> <li><code>Subscription.start</code> (use <code>.start_date</code> instead)</li> <li><code>Subscription.tax_percent</code> (use <code>.default_tax_rates</code> instead)</li> </ul> </li> <li>Added <code>Invoice.status</code> and <code>enums.InvoiceStatus</code> (#1020).</li> <li>Added new <code>Invoice</code> fields (#1020, #1087):<ul> <li><code>.discount</code></li> <li><code>.default_source</code></li> <li><code>.status</code></li> </ul> </li> <li>Added new <code>Subscription</code> fields (#1087):<ul> <li><code>.default_payment_method</code></li> <li><code>.default_source</code></li> <li><code>.next_pending_invoice_item_invoice</code></li> <li><code>.pending_invoice_item_interval</code></li> <li><code>.pending_update</code></li> <li><code>.start_date</code></li> </ul> </li> </ul>"},{"location":"history/2_x/#warning-about-safe-uninstall-of-jsonfield2-on-upgrade","title":"Warning about safe uninstall of jsonfield2 on upgrade","text":"<p>Both jsonfield and jsonfield2 use the same import path, so if upgrading from dj-stripe\\~=2.2.0 in an existing virtualenv, be sure to uninstall jsonfield2 first. eg:</p> <pre><code>    # ensure jsonfield is uninstalled before we install jsonfield2\n    pip uninstall jsonfield2 -y &amp;&amp; pip install \"dj-stripe&gt;=2.3.0dev\"\n</code></pre> <p>Otherwise, <code>pip uninstall jsonfield2</code> will remove jsonfield's <code>jsonfield</code> module from <code>site-packages</code>, which would cause errors like <code>ImportError: cannot import name 'JSONField' from 'jsonfield' (unknown location)</code></p> <p>If you have hit this ImportError already after upgrading, running this should resolve it:</p> <pre><code># remove both jsonfield packages before reinstall to fix ImportError:\npip uninstall jsonfield jsonfield2 -y &amp;&amp; pip install \"dj-stripe&gt;=2.3.0\"\n</code></pre> <p>Note that this is only necessary if upgrading from dj-stripe 2.2.x, which temporarily depended on jsonfield2. This process is not necessary if upgrading from an earlier version of dj-stripe.</p>"},{"location":"history/2_x/#222-2020-01-20","title":"2.2.2 (2020-01-20)","text":"<p>This is a bugfix-only version:</p> <ul> <li>Fixed handling of <code>TaxRate</code> events (#1094).</li> </ul>"},{"location":"history/2_x/#221-2020-01-14","title":"2.2.1 (2020-01-14)","text":"<p>This is a bugfix-only version:</p> <ul> <li>Fixed bad package build.</li> </ul>"},{"location":"history/2_x/#220-2020-01-13","title":"2.2.0 (2020-01-13)","text":"<ul> <li>Changed <code>JSONField</code> dependency package from     jsonfield to     jsonfield2, for Django 3     compatibility (see Warning about safe uninstall of jsonfield on     upgrade).     Note that Django 2.1 requires jsonfield&lt;3.1.</li> <li>Added support for Django 3.0 (requires jsonfield2&gt;=3.0.3).</li> <li>Added support for python 3.8.</li> <li>Refactored <code>UpcomingInvoice</code>, so it's no longer a subclass of     <code>Invoice</code> (to allow <code>Invoice</code> to use <code>ManyToManyFields</code>).</li> <li>Dropped previously-deprecated <code>Account</code> fields (see https://stripe.com/docs/upgrades#2019-02-19 ):<ul> <li><code>.business_name</code></li> <li><code>.business_primary_color</code></li> <li><code>.business_url</code> (changed to a property)</li> <li><code>.debit_negative_balances</code></li> <li><code>.decline_charge_on</code></li> <li><code>.display_name</code></li> <li><code>.legal_entity</code></li> <li><code>.payout_schedule</code></li> <li><code>.payout_statement_descriptor</code></li> <li><code>.statement_descriptor</code></li> <li><code>.support_email</code></li> <li><code>.support_phone</code></li> <li><code>.support_url</code></li> <li><code>.timezone</code></li> <li><code>.verification</code></li> </ul> </li> <li>Dropped previously-deprecated <code>Account.business_logo</code> property     (renamed to <code>.branding_icon</code>)</li> <li>Dropped previously-deprecated <code>Customer.account_balance</code> property     (renamed to <code>.balance</code>)</li> <li>Dropped previously-deprecated properties <code>Invoice.application_fee</code>,     <code>Invoice.date</code></li> <li>Dropped previously-deprecated enum <code>PaymentMethodType</code> (use     <code>DjstripePaymentMethodType</code> instead)</li> <li>Renamed <code>Invoice.billing</code> to <code>.collection_method</code> (added deprecated     property for the old name).</li> <li>Updated <code>Invoice</code> model to add missing fields.</li> <li>Added <code>TaxRate</code> model, and <code>Invoice.default_tax_rates</code>,     <code>InvoiceItem.tax_rates</code>, <code>Invoice.total_tax_amounts</code>,     <code>Subscription.default_tax_rates</code>, <code>SubscriptionItem.tax_rates</code>     (#1027).</li> <li>Change urls.py to use the new style urls.</li> <li>Update forward relation fields in the admin to be raw id fields.</li> <li>Updated <code>StripeQuantumCurrencyAmountField</code> and     <code>StripeDecimalCurrencyAmountField</code> to support Stripe Large Charges     (#1045).</li> <li>Update event handling so <code>customer.subscription.deleted</code> updates     subscriptions to <code>status=\"canceled\"</code> instead of deleting it from our     database, to match Stripe's behaviour (#599).</li> <li>Added missing <code>Refund.reason</code> value, increases field width (#1075).</li> <li>Fixed <code>Refund.status</code> definition, reduces field width (#1076).</li> <li>Deprecated non-standard <code>Invoice.status</code> (renamed to     <code>Invoice.legacy_status</code>) to make way for the Stripe field     (preparation for #1020).</li> </ul>"},{"location":"history/2_x/#warning-about-safe-uninstall-of-jsonfield-on-upgrade","title":"Warning about safe uninstall of jsonfield on upgrade","text":"<p>Both jsonfield and jsonfield2 use the same import path, so if upgrading to dj-stripe&gt;=2.2 in an existing virtualenv, be sure to uninstall jsonfield first. eg:</p> <pre><code># ensure jsonfield is uninstalled before we install jsonfield2\npip uninstall jsonfield -y &amp;&amp; pip install \"dj-stripe&gt;=2.2.0\"\n</code></pre> <p>Otherwise, <code>pip uninstall jsonfield</code> will remove jsonfield2's <code>jsonfield</code> module from <code>site-packages</code>, which would cause errors like <code>ImportError: cannot import name 'JSONField' from 'jsonfield' (unknown location)</code></p> <p>If you have hit this ImportError already after upgrading, running this should resolve it:</p> <pre><code># remove both jsonfield packages before reinstall to fix ImportError:\npip uninstall jsonfield jsonfield2 -y &amp;&amp; pip install \"dj-stripe&gt;=2.2.0\"\n</code></pre>"},{"location":"history/2_x/#note-on-usage-of-stripe-elements-js","title":"Note on usage of Stripe Elements JS","text":"<p>See Integrating Stripe Elements for notes about usage of the Stripe Elements frontend JS library.</p> <p>In summary: If you haven't yet migrated to PaymentIntents, prefer <code>stripe.createSource()</code> to <code>stripe.createToken()</code>.</p>"},{"location":"history/2_x/#211-2019-10-01","title":"2.1.1 (2019-10-01)","text":"<p>This is a bugfix-only release:</p> <ul> <li>Updated webhook signals list (#1000).</li> <li>Fixed issue syncing PaymentIntent with destination charge (#960).</li> <li>Fixed <code>Customer.subscription</code> and <code>.valid_subscriptions()</code> to ignore     <code>status=incomplete_expired</code> (#1006).</li> <li>Fixed error on <code>paymentmethod.detached</code> event with <code>card_xxx</code>     payment methods (#967).</li> <li>Added <code>PaymentMethod.detach()</code> (#943).</li> <li>Updated <code>help_text</code> on all currency fields to make it clear if     they're holding integer cents (<code>StripeQuantumCurrencyAmountField</code>)     or decimal dollar (or euro, pound etc)     (<code>StripeDecimalCurrencyAmountField</code>) (#999)</li> <li>Documented our preferred Django model field types (#986)</li> </ul>"},{"location":"history/2_x/#upcoming-migration-of-currency-fields-storage-as-cents-instead-of-dollars","title":"Upcoming migration of currency fields (storage as cents instead of dollars)","text":"<p>Please be aware that we're looking at standardising our currency storage fields as integer quanta (cents) instead of Decimal (dollar) values, to match stripe.</p> <p>This is intended to be part of the 3.0 release, since it will involve some breaking changes. See #955 for details and discussion.</p>"},{"location":"history/2_x/#210-2019-09-12","title":"2.1.0 (2019-09-12)","text":"<ul> <li>Dropped Django 2.0 support</li> <li>The Python stripe library minimum version is now <code>2.32.0</code>, also     <code>2.36.0</code> is excluded due to a regression (#991).</li> <li>Dropped previously-deprecated <code>Charge.fee_details</code> property.</li> <li>Dropped previously-deprecated <code>Transfer.fee_details</code> property.</li> <li>Dropped previously-deprecated <code>field_name</code> parameter to     <code>sync_from_stripe_data</code></li> <li>Dropped previously-deprecated alias <code>StripeObject</code> of <code>StripeModel</code></li> <li>Dropped previously-deprecated alias <code>PaymentMethod</code> of <code>DjstripePaymentMethod</code></li> <li>Dropped previously-deprecated properties <code>Charge.source_type</code> and     <code>Charge.source_stripe_id</code></li> <li><code>enums.PaymentMethodType</code> has been deprecated, use <code>enums.DjstripePaymentMethodType</code></li> <li>Made <code>SubscriptionItem.quantity</code> nullable as per Plans with     <code>usage_type=\"metered\"</code> (follow-up to #865)</li> <li>Added manage commands <code>djstripe_sync_models</code> and     <code>djstripe_process_events</code> (#727, #89)</li> <li>Fixed issue with re-creating a customer after <code>Customer.purge()</code> (#916)</li> <li>Fixed sync of Customer Bank Accounts (#829)</li> <li>Fixed <code>Subscription.is_status_temporarily_current()</code> (#852)</li> <li>New models<ul> <li>Payment Intent</li> <li>Setup Intent</li> <li>Payment Method</li> <li>Session</li> </ul> </li> <li>Added fields to <code>Customer</code> model: <code>address</code>, <code>invoice_prefix</code>,     <code>invoice_settings</code>, <code>phone</code>, <code>preferred_locales</code>, <code>tax_exempt</code></li> </ul> <p>Changes from API 2018-11-08:</p> <ul> <li>Added <code>Invoice.auto_advance</code>, deprecated <code>Invoice.closed</code> and     <code>Invoice.forgiven</code>, see     https://stripe.com/docs/billing/migration/invoice-states#upgrade-checklist</li> </ul> <p>Changes from API 2019-02-19:</p> <ul> <li> <p>Major changes to Account fields, see     https://stripe.com/docs/upgrades#2019-02-19 , updated Account     fields to match API 2019-02-19:</p> </li> <li> <p>Added <code>Account.business_profile</code>, <code>.business_type</code>, <code>.company</code>,     <code>.individual</code>, <code>.requirements</code>, <code>.settings</code></p> </li> <li>Deprecated the existing fields, to be removed in 2.2</li> <li>Special handling of the icon and logo fields:     &gt; -   Renamed <code>Account.business_logo</code> to <code>Account.branding_icon</code>     &gt;     (note that in Stripe's API <code>Account.business_logo</code> was renamed     &gt;     to <code>Account.settings.branding_icon</code>, and     &gt;     <code>Account.business_logo_large</code> (which we didn't have a field     &gt;     for) was renamed to <code>Account.settings.branding_logo</code>)     &gt; -   Added deprecated property for <code>Account.business_logo</code>     &gt; -   Added <code>Account.branding_logo</code> as a ForeignKey     &gt; -   Populate <code>Account.branding_icon</code> and <code>.branding_logo</code> from the     &gt;     new <code>Account.settings.branding.icon</code> and <code>.logo</code></li> </ul> <p>Changes from API 2019-03-14:</p> <ul> <li>Renamed <code>Invoice.application_fee</code> to     <code>Invoice.application_fee_amount</code> (added deprecated property for the     old name)</li> <li>Removed <code>Invoice.date</code>, in place of <code>Invoice.created</code> (added     deprecated property for the old name)</li> <li>Added <code>Invoice.status_transitions</code></li> <li>Renamed <code>Customer.account_balance</code> to <code>Customer.balance</code> (added     deprecated property for the old name)</li> <li>Renamed <code>Customer.payment_methods</code> to     <code>Customer.customer_payment_methods</code></li> <li>Added new <code>SubscriptionStatus.incomplete</code> and     <code>SubscriptionStatus.incomplete_expired</code> statuses (#974)</li> <li>Added new <code>BalanceTransactionType</code> values (#983)</li> </ul>"},{"location":"history/2_x/#squashed-dev-migrations","title":"Squashed dev migrations","text":"<p>As per our migration policy, unreleased migrations on the master branch have been squashed.</p> <p>If you have been using the 2.1.0dev branch from master, you'll need to run the squashed migrations migrations before upgrading to &gt;=2.1.0.</p> <p>The simplest way to do this is to <code>pip install dj-stripe==2.1.0rc0</code> and migrate, alternatively check out the <code>2.1.0rc0</code> git tag.</p>"},{"location":"history/2_x/#205-2019-09-12","title":"2.0.5 (2019-09-12)","text":"<p>This is a bugfix-only version:</p> <ul> <li>Avoid stripe==2.36.0 due to regression (#991)</li> </ul>"},{"location":"history/2_x/#204-2019-09-09","title":"2.0.4 (2019-09-09)","text":"<p>This is a bugfix-only version:</p> <ul> <li>Fixed irreversible migration (#909)</li> </ul>"},{"location":"history/2_x/#203-2019-06-11","title":"2.0.3 (2019-06-11)","text":"<p>This is a bugfix-only version:</p> <ul> <li>In <code>_get_or_create_from_stripe_object</code>, wrap create <code>_create_from_stripe_object</code> in     transaction, fixes <code>TransactionManagementError</code> on race condition in webhook     processing (#877, #903).</li> </ul>"},{"location":"history/2_x/#202-2019-06-09","title":"2.0.2 (2019-06-09)","text":"<p>This is a bugfix-only version:</p> <ul> <li>Don't save event objects if the webhook processing fails (#832).</li> <li>Fixed IntegrityError when <code>REMOTE_ADDR</code> is an empty string.</li> <li>Deprecated <code>field_name</code> parameter to <code>sync_from_stripe_data</code></li> </ul>"},{"location":"history/2_x/#201-2019-04-29","title":"2.0.1 (2019-04-29)","text":"<p>This is a bugfix-only version:</p> <ul> <li>Fixed an error on <code>invoiceitem.updated</code> (#848).</li> <li>Handle test webhook properly in recent versions of Stripe API     (#779). At some point 2018 Stripe silently changed the ID used for     test events and <code>evt_00000000000000</code> is not used anymore.</li> <li>Fixed OperationalError seen in migration 0003 on postgres (#850).</li> <li>Fixed issue with migration 0003 not being unapplied correctly (#882).</li> <li>Fixed missing <code>SubscriptionItem.quantity</code> on metered Plans (#865).</li> <li>Fixed <code>Plan.create()</code> (#870).</li> </ul>"},{"location":"history/2_x/#200-2019-03-01","title":"2.0.0 (2019-03-01)","text":"<ul> <li>The Python stripe library minimum version is now <code>2.3.0</code>.</li> <li><code>PaymentMethod</code> has been renamed to <code>DjstripePaymentMethod</code> (#841). An alias remains     but will be removed in the next version.</li> <li>Dropped support for Django&lt;2.0, Python&lt;3.4.</li> <li>Dropped previously-deprecated <code>stripe_objects</code> module.</li> <li>Dropped previously-deprecated <code>stripe_timestamp</code> field.</li> <li>Dropped previously-deprecated <code>Charge.receipt_number</code> field.</li> <li>Dropped previously-deprecated <code>StripeSource</code> alias for <code>Card</code></li> <li>Dropped previously-deprecated <code>SubscriptionView</code>, <code>CancelSubscriptionView</code> and     <code>CancelSubscriptionForm</code>.</li> <li>Removed the default value from <code>DJSTRIPE_SUBSCRIPTION_REDIRECT</code>.</li> <li>All <code>stripe_id</code> fields have been renamed <code>id</code>.</li> <li><code>Charge.source_type</code> has been deprecated. Use <code>Charge.source.type</code>.</li> <li><code>Charge.source_stripe_id</code> has been deprecated. Use <code>Charge.source.id</code>.</li> <li>All deprecated Transfer fields (Stripe API 2017-04-06 and older), have been dropped.     This includes <code>date</code>, <code>destination_type</code> (<code>type</code>), <code>failure_code</code>,     <code>failure_message</code>, <code>statement_descriptor</code> and <code>status</code>.</li> <li>Fixed IntegrityError when <code>REMOTE_ADDR</code> is missing (#640).</li> <li>New models:<ul> <li><code>ApplicationFee</code></li> <li><code>ApplicationFeeRefund</code></li> <li><code>BalanceTransaction</code></li> <li><code>CountrySpec</code></li> <li><code>ScheduledQuery</code></li> <li><code>SubscriptionItem</code></li> <li><code>TransferReversal</code></li> <li><code>UsageRecord</code></li> </ul> </li> <li>The <code>fee</code> and <code>fee_details</code> attributes of both the <code>Charge</code> and <code>Transfer</code> objects     are no longer stored in the database. Instead, they access their respective new     <code>balance_transaction</code> foreign key. Note that <code>fee_details</code> has been deprecated on     both models.</li> <li>The <code>fraudulent</code> attribute on <code>Charge</code> is now a property that checks the     <code>fraud_details</code> field.</li> <li>Object key validity is now always enforced (#503).</li> <li><code>Customer.sources</code> no longer refers to a Card queryset, but to a Source queryset. In     order to correctly transition, you should change all your references to     <code>customer.sources</code> to <code>customer.legacy_cards</code> instead. The <code>legacy_cards</code> attribute     already exists in 1.2.0.</li> <li><code>Customer.sources_v3</code> is now named <code>Customer.sources</code>.</li> <li>A new property <code>Customer.payment_methods</code> is now available, which allows you to     iterate over all of a customer's payment methods (sources then cards).</li> <li><code>Card.customer</code> is now nullable and cards are no longer deleted when their     corresponding customer is deleted (#654).</li> <li>Webhook signature verification is now available and is preferred. Set the     <code>DJSTRIPE_WEBHOOK_SECRET</code> setting to your secret to start using it.</li> <li><code>StripeObject</code> has been renamed <code>StripeModel</code>. An alias remains but will be removed     in the next version.</li> <li>The metadata key used in the <code>Customer</code> object can now be configured by changing the     <code>DJSTRIPE_SUBSCRIBER_CUSTOMER_KEY</code> setting. Setting this to None or an empty string     now also disables the behaviour altogether.</li> <li>Text-type fields in dj-stripe will no longer ever be None. Instead, any falsy text     field will return an empty string.</li> <li>Switched test runner to pytest-django</li> <li><code>StripeModel.sync_from_stripe_data()</code> will now automatically retrieve related     objects and populate foreign keys (#681)</li> <li>Added <code>Coupon.name</code></li> <li>Added <code>Transfer.balance_transaction</code></li> <li>Exceptions in webhooks are now re-raised as well as saved in the database (#833)</li> </ul>"},{"location":"history/3_0_0/","title":"dj-stripe 3.0.0 (20XX-XX-XX)","text":"<p>Attention</p> <p>3.0.0 is a significantly backwards-incompatible release. Migrating a 2.x database is unsupported due to significant changes to the data models.</p>"},{"location":"history/3_0_0/#release-highlights","title":"Release highlights","text":"<ul> <li>A new field <code>stripe_data</code> json field has been added to all     supported models. This field contains a copy of the entire object as-is in the Stripe     API.</li> </ul>"},{"location":"history/3_0_0/#breaking-changes","title":"Breaking changes","text":"<p>Attention</p> <p>Many superfluous model fields have been removed, in favour of using <code>stripe_data</code>. We retain model fields for useful foreign keys and other frequently-used fields.</p> <ul> <li>Migrations have been reset.</li> <li>Removed deprecated <code>DJSTRIPE_WEBHOOK_TOLERANCE</code> setting.</li> <li>Removed deprecated <code>DJSTRIPE_WEBHOOK_SECRET</code> setting.</li> <li>Removed deprecated <code>DJSTRIPE_WEBHOOK_VALIDATION</code> setting.</li> <li>Removed deprecated <code>DJSTRIPE_WEBHOOK_URL</code> setting.</li> <li>Removed legacy <code>Customer.add_card()</code> method. Use <code>Custoner.add_payment_method()</code> instead.</li> <li>Most of the models visible in the Django Admin are now read-only. (Note: This does     not change anything functionally, as editing models was not replicated upstream.)</li> <li><code>DJSTRIPE_FOREIGN_KEY_TO_FIELD</code> setting has been removed, which drops support for     legacy <code>djstripe_id</code> foreign keys.</li> <li>Support for webhook endpoints without <code>UUID</code> has been dropped</li> <li>Removed <code>djstripe_update_invoiceitem_ids</code> management command.</li> <li>Removed <code>CountrySpec</code> model as it does not make sense to store it in the database.</li> </ul>"},{"location":"history/3_0_0/#other-changes","title":"Other changes","text":"<ul> <li>Dropped <code>unique_together</code> constraint on the <code>Customer</code> model. This was done because given the same <code>livemode</code> and <code>djstripe_owner_account</code>, a <code>subscriber</code> can be associated with multiple customers and that is Stripe's default behavior.</li> <li>Added missing model fields to Checkout Sessions.</li> <li><code>LineItem</code> instances can also get synced using the <code>djstripe_sync_models</code> management command.</li> <li>Updated <code>check_stripe_api_key</code> django system check to not be a blocker for new dj-stripe users by raising Info warnings on the console. If the Stripe keys were not defined in the settings file, the <code>Critical</code> warning was preventing users to add them directly from the admin as mentioned in the docs. This was creating a chicken-egg situation where one could only add keys in the admin before they were defined in settings.</li> <li>Added <code>paused</code> as a valid status to the SubscriptionStatus enum</li> </ul>"},{"location":"project/authors/","title":"Credits","text":""},{"location":"project/authors/#core-contributors","title":"Core contributors","text":"<ul> <li>Alexander Kavanaugh (Co-maintainer)</li> <li>Jerome Leclanche (Co-maintainer)</li> <li>Arnav Choudhury</li> </ul>"},{"location":"project/authors/#former-core-contributors","title":"Former core contributors","text":"<ul> <li>John Carter</li> <li>Pablo Castellano</li> <li>Daniel Greenfeld</li> <li>Lee Skillen</li> </ul>"},{"location":"project/authors/#contributors","title":"Contributors","text":"<p>dj-stripe is brought to you by many more open source contributors.</p> <p>See the complete list on Github.</p>"},{"location":"project/contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"project/contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"project/contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/dj-stripe/dj-stripe/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>The version of python and Django you're running</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"project/contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \"bug\" is open to whoever wants to implement it.</p>"},{"location":"project/contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with \"feature\" is open to whoever wants to implement it.</p>"},{"location":"project/contributing/#write-documentation","title":"Write Documentation","text":"<p>dj-stripe could always use more documentation, whether as part of the official dj-stripe docs, in docstrings, or even on the web in blog posts, articles, and such.</p> <p>To see the project's documentation live, run the following command:</p> <pre><code>mkdocs serve\n</code></pre> <p>The documentation site will then be served on http://127.0.0.1:8000.</p> <p>In case of any installation error</p> <p>In case you get the error that some plugin is not installed, please run:     <pre><code>poetry install --with docs\n</code></pre></p> <p>If you wish to just generate the documentation, you can replace <code>serve</code> with <code>build</code>, and the docs will be generated into the <code>site/</code> folder.</p>"},{"location":"project/contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/dj-stripe/dj-stripe/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome     :)</li> </ul>"},{"location":"project/contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up local development.</p> <ol> <li> <p>Fork dj-stripe on Github.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/dj-stripe.git\n</code></pre> </li> <li> <p>Set up pre-commit:</p> <pre><code>$ git init # A git repo is required to install pre-commit\n$ pre-commit install\n</code></pre> </li> <li> <p>Set up your test database. If you're running tests using PostgreSQL:</p> <pre><code>$ createdb djstripe\n</code></pre> <p>or if you want to test vs sqlite (for convenience) or MySQL, they can be selected by setting this environment variable:</p> <pre><code>$ export DJSTRIPE_TEST_DB_VENDOR=sqlite\n# or: export DJSTRIPE_TEST_DB_VENDOR=mysql\n</code></pre> <p>For postgres and mysql, the database host,port,username and password can be set with environment variables, see <code>tests/settings.py</code></p> </li> <li> <p>Install Poetry if you do not have it already.</p> <p>You can set up a virtual environment with:</p> <pre><code>$ poetry install\n</code></pre> <p>You can then, at any time, open a shell into that environment with:</p> <pre><code>$ poetry shell\n</code></pre> </li> <li> <p>When you're done making changes, check that your changes pass the tests. A quick     test run can be done as follows:</p> <pre><code>$ DJSTRIPE_TEST_DB_VENDOR=sqlite poetry run pytest --reuse-db\n</code></pre> <p>You should also check that the tests pass with other python and Django versions with tox. pytest will output both command line and html coverage statistics and will warn you if your changes caused code coverage to drop.:</p> <pre><code>$ pip install tox\n$ tox\n</code></pre> </li> <li> <p>If your changes altered the models you may need to generate Django migrations:</p> <pre><code>$ DJSTRIPE_TEST_DB_VENDOR=sqlite poetry run ./manage.py makemigrations\n</code></pre> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol> <p>Congratulations, you're now a dj-stripe contributor! Have some \u2665 from us.</p>"},{"location":"project/contributing/#preferred-django-model-field-types","title":"Preferred Django Model Field Types","text":"<p>When mapping from Stripe API field types to Django model fields, we try to follow Django best practises where practical.</p> <p>The following types should be preferred for fields that map to the Stripe API (which is almost all fields in our models).</p>"},{"location":"project/contributing/#strings","title":"Strings","text":"<ul> <li>Stripe API string fields have a default maximum length of 5,000     characters.</li> <li>In some cases a maximum length (<code>maxLength</code>) is specified in the Stripe OpenAPI     schema.</li> <li>We follow Django's     recommendation and     avoid using null on string fields (which means we store <code>\"\"</code> for string fields that     are <code>null</code> in stripe). Note that is enforced in the sync logic in     StripeModel._stripe_object_to_record.</li> <li>For long string fields (eg above 255 characters) we prefer <code>TextField</code> over     <code>Charfield</code>.</li> </ul> <p>Therefore the default type for string fields that don't have a maxLength specified in the Stripe OpenAPI schema should usually be:</p> <pre><code>str_field = TextField(max_length=5000, default=\", blank=True, help_text=\"...\")\n</code></pre>"},{"location":"project/contributing/#enumerations","title":"Enumerations","text":"<p>Fields that have a defined set of values can be implemented using <code>StripeEnumField</code>.</p>"},{"location":"project/contributing/#hash-dictionaries","title":"Hash (dictionaries)","text":"<p>Use the <code>JSONField</code> in <code>djstripe.fields</code>.</p>"},{"location":"project/contributing/#currency-amounts","title":"Currency amounts","text":"<p>Stripe handles all currency amounts as integer cents, we currently have a mixture of fields as integer cents and decimal (eg dollar, euro etc) values, but we are aiming to standardise on cents (see https://github.com/dj-stripe/dj-stripe/issues/955).</p> <p>All new currency amount fields should use <code>StripeQuantumCurrencyAmountField</code>.</p>"},{"location":"project/contributing/#dates-and-datetimes","title":"Dates and Datetimes","text":"<p>The Stripe API uses an integer timestamp (seconds since the Unix epoch) for dates and datetimes. We store this as a datetime field, using <code>StripeDateTimeField</code>.</p>"},{"location":"project/contributing/#django-migration-policy","title":"Django Migration Policy","text":"<p>Migrations are considered a breaking change, so it's not usually not acceptable to add a migration to a stable branch, it will be a new <code>MAJOR.MINOR.0</code> release.</p> <p>A workaround to this in the case that the Stripe API data isn't compatible with out model (eg Stripe is sending <code>null</code> to a non-null field) is to implement the <code>_manipulate_stripe_object_hook</code> classmethod on the model.</p>"},{"location":"project/contributing/#avoid-new-migrations-with-non-schema-changes","title":"Avoid new migrations with non-schema changes","text":"<p>If a code change produces a migration that doesn't alter the database schema (eg changing <code>help_text</code>) then instead of adding a new migration you can edit the most recent migration that affects the field in question.</p> <p>e.g.: https://github.com/dj-stripe/dj-stripe/commit/e2762c38918a90f00c42ecf21187a920bd3a2087</p>"},{"location":"project/contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>The pull request must not drop code coverage below the current level.</li> <li>If the pull request adds functionality, the docs should be updated. Put your new     functionality into a function with a docstring.</li> <li>If the pull request makes changes to a model, include Django migrations.</li> <li>The pull request should work for Python 3.6+. Check Github     Actions and make sure that the     tests pass for all supported Python versions.</li> <li>Code formatting: Make sure to install <code>pre-commit</code> to automatically run it on <code>staged files</code> or run manually with <code>pre-commit run --all-files</code> at the dj-stripe root to keep a consistent style.</li> </ol>"},{"location":"project/release_process/","title":"Release Process","text":"<p>Note</p> <p>Before <code>MAJOR</code> or <code>MINOR</code> releases:</p> <ul> <li>Review deprecation notes (eg search for \"deprecated\") and remove     deprecated features as appropriate</li> <li>Squash migrations (ONLY on unreleased migrations) - see below</li> </ul>"},{"location":"project/release_process/#squash-migrations","title":"Squash migrations","text":"<p>If there's more than one unreleased migration on master consider squashing them with <code>squashmigrations</code>, immediately before tagging the new release:</p> <ul> <li> <p>Create a new squashed migration with <code>./manage.py squashmigrations</code>     (only squash migrations that have never been in a tagged release)</p> </li> <li> <p>Commit the squashed migration on master with a commit message like     \"Squash x.y.0dev migrations\" (this will allow users who running     master to safely upgrade, see note below about rc package)</p> </li> <li> <p>Then transition the squashed migration to a normal migration as per Django:</p> <ul> <li>Delete all the migration files it replaces</li> <li>Update all migrations that depend on the deleted migrations to     depend on the squashed migration instead</li> <li>Remove the <code>replaces</code> attribute in the Migration class of the     squashed migration (this is how Django tells that it is a     squashed migration)</li> </ul> </li> <li> <p>Commit these changes to master with a message like \"Transition     squashed migration to normal migration\"</p> </li> <li> <p>Then do the normal release process - bump version as another commit     and tag the release</p> </li> </ul> <p>See https://docs.djangoproject.com/en/dev/topics/migrations/#migration-squashing</p>"},{"location":"project/release_process/#tag-package-squashed-migrations-as-rc-package-optional","title":"Tag + package squashed migrations as rc package (optional)","text":"<p>As a convenience to users who are running master, an rc version can be created to package the squashed migration.</p> <p>To do this, immediately after the \"Squash x.y.0dev migrations\" commit, follow the steps below but with a x.y.0rc0 version to tag and package a rc version.</p> <p>Users who have been using the x.y.0dev code from master can then run the squashed migrations migrations before upgrading to &gt;=x.y.0.</p> <p>The simplest way to do this is to <code>pip install dj-stripe==x.y.0rc0</code> and migrate, or alternatively check out the <code>x.y.0rc0</code> git tag and migrate.</p>"},{"location":"project/release_process/#prepare-changes-for-the-release-commit","title":"Prepare changes for the release commit","text":"<ul> <li> <p>Choose your version number (using https://semver.org/ )</p> <ul> <li>if there's a new migration, it should be a <code>MAJOR.0.0</code> or     <code>MAJOR.MINOR.0</code> version.</li> </ul> </li> <li> <p>Review and update <code>HISTORY.md</code></p> <ul> <li>Add a section for this release version</li> <li>Set date on this release version</li> <li>Check that summary of feature/fixes is since the last release is     up to date</li> </ul> </li> <li> <p>Update package version number in <code>setup.cfg</code></p> </li> <li> <p>Review and update supported API version in <code>README.md</code>     (this is the most recent Stripe account version tested against, not     <code>DEFAULT_STRIPE_API_VERSION</code>)</p> </li> <li> <p><code>git add</code> to stage these changes</p> </li> </ul>"},{"location":"project/release_process/#create-signed-release-commit-tag","title":"Create signed release commit tag","text":"<p>Note</p> <p>Before doing this you should have a GPG key set up on github</p> <p>If you don't have a GPG key already, one method is via https://keybase.io/ , and then add it to your github profile.</p> <ul> <li>Create a release tag with the above staged changes (where <code>$VERSION</code>     is the version number to be released:<pre><code>$ git commit -m \"Release $VERSION\"\n$ git tag -fsm \"Release $VERSION\" $VERSION\n</code></pre> </li> </ul> <p>This can be expressed as a bash function as follows:</p> <pre><code>git_release() { git commit -m \"Release $1\" &amp;&amp; git tag -fsm \"Release $1\" $1; }\n</code></pre> <ul> <li>Push the commit and tag:<pre><code>$ git push --follow-tags\n</code></pre> </li> </ul>"},{"location":"project/release_process/#updatecreate-stable-branch","title":"Update/create stable branch","text":"<p>Push these changes to the appropriate <code>stable/MAJOR.MINOR</code> version branch (eg <code>stable/2.0</code>) if they're not already - note that this will trigger the readthedocs build</p>"},{"location":"project/release_process/#release-on-pypi","title":"Release on pypi","text":"<p>See https://packaging.python.org/tutorials/packaging-projects/#generating-distribution-archives</p>"},{"location":"project/sponsors/","title":"Sponsors","text":""},{"location":"project/sponsors/#gold-sponsors","title":"Gold Sponsors","text":"<p>This project is sponsored by none other than Stripe, since August 2020.</p> <p>We're thankful for their contribution, which has allowed us to greatly improve the project, increase QA and testing, and push forward with the dj-stripe 2.4.0 release.</p>"},{"location":"project/sponsors/#silver-sponsors","title":"Silver Sponsors","text":"<p>We do not currently have any Silver sponsors.</p> <p>Want to be the first?</p>"},{"location":"project/support/","title":"Support","text":""},{"location":"project/support/#support-plans","title":"Support plans","text":"<p>dj-stripe offers paid support plans via Github Sponsors:</p> <p>https://github.com/sponsors/dj-stripe</p> <p>All issues and feature requests raised by corporate sponsors will be prioritized. Gold Sponsors also get a dedicated developer point of contact, to help with any questions, issues, or general inquiries relating to dj-stripe.</p>"},{"location":"project/support/#bug-reports-and-feature-requests","title":"Bug reports and feature requests","text":"<p>Please report any issues you come across on the Github issue tracker.</p> <p>Do not hesitate to leave feedback and suggestions there as well. You may also ask usage questions on the issue tracker.</p>"},{"location":"project/test_fixtures/","title":"Test Fixtures","text":"<p>dj-stripe's unit tests rely on fixtures to represent Stripe API and webhook data.</p>"},{"location":"project/test_fixtures/#rationale","title":"Rationale","text":"<p>These fixtures are partly hand-coded and partly generated by creating objects in Stripe and then retrieved via the API.</p> <p>Each approach has pros and cons:</p> <p>Hand-coding the fixtures allows them to be crafted specifically for a test case. They can also be terse, and nested objects can be done by reference to avoid duplication. But maintaining or upgrading them is a painstaking manual process.</p> <p>Generating the fixtures via Stripe gives the big advantage that Stripe schema changes are automatically represented in the fixtures, which should allow us to upgrade dj-stripe's schema to match Stripe much more easily. This would be done by updating dj-stripe's targeted API version (<code>DEFAULT_STRIPE_API_VERSION</code>), regenerating the fixtures, and updating the model to match the fixture changes. The down side is it's tricky to regenerate fixture files without introducing big changes (eg to object ids) - the script does this by mapping a dummy id to various objects.</p>"},{"location":"project/test_fixtures/#regenerating-the-test-fixtures","title":"Regenerating the test fixtures","text":"<p>To regenerate the test fixtures (e.g. to populate the fixtures with new API fields from Stripe), do the following:</p> <ol> <li> <p>(one time only) Create a new Stripe account called \"dj-stripe     scratch\", with country set to United States. (we use US so the     currency matches the existing fixtures matches, in the future it     would be good to test for other countries).</p> </li> <li> <p>If you already had this account ready and want to start again from     scratch, you can delete all of the test data via the button in     Settings &gt; Data https://dashboard.stripe.com/account/data</p> </li> <li> <p>Activate a virtualenv with the dj-stripe project (see Getting     Started)</p> </li> <li> <p>Set the dj-stripe secret key environment variable to the secret key     for this account (<code>export STRIPE_SECRET_KEY=sk_test_...</code>)</p> </li> <li> <p>Run the manage command to create the test objects in your stripe     account if they don't already exist, and regenerate the local     fixture files from them:</p> <pre><code>$ ./manage.py regenerate_test_fixtures\n</code></pre> </li> </ol> <p>The command tries to avoid inconsequential changes to the fixtures (e.g the <code>created</code> timestamp) by restoring a whitelist of values from the existing fixtures.</p> <p>This functionality can be disabled by passing <code>--update-sideeffect-fields</code>.</p>"},{"location":"reference/enums/","title":"Enumerations","text":""},{"location":"reference/enums/#djstripe.enums-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.PlanTiersMode","title":"<code>djstripe.enums.PlanTiersMode = PriceTiersMode</code>  <code>module-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PlanUsageType","title":"<code>djstripe.enums.PlanUsageType = PriceUsageType</code>  <code>module-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums-classes","title":"Classes","text":""},{"location":"reference/enums/#djstripe.enums.APIKeyType","title":"<code>djstripe.enums.APIKeyType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>API Key Types (internal model only)</p> Source code in <code>djstripe/enums.py</code> <pre><code>class APIKeyType(Enum):\n    \"\"\"\n    API Key Types (internal model only)\n    \"\"\"\n\n    publishable = _(\"Publishable key\")\n    secret = _(\"Secret key\")\n    restricted = _(\"Restricted key\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.APIKeyType-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.APIKeyType.publishable","title":"<code>djstripe.enums.APIKeyType.publishable = _('Publishable key')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.APIKeyType.restricted","title":"<code>djstripe.enums.APIKeyType.restricted = _('Restricted key')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.APIKeyType.secret","title":"<code>djstripe.enums.APIKeyType.secret = _('Secret key')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode","title":"<code>djstripe.enums.ApiErrorCode</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Charge failure error codes.</p> <p>https://stripe.com/docs/error-codes</p> Source code in <code>djstripe/enums.py</code> <pre><code>class ApiErrorCode(Enum):\n    \"\"\"\n    Charge failure error codes.\n\n    https://stripe.com/docs/error-codes\n    \"\"\"\n\n    account_already_exists = _(\"Account already exists\")\n    account_country_invalid_address = _(\"Account country invalid address\")\n    account_invalid = _(\"Account invalid\")\n    account_number_invalid = _(\"Account number invalid\")\n    alipay_upgrade_required = _(\"Alipay upgrade required\")\n    amount_too_large = _(\"Amount too large\")\n    amount_too_small = _(\"Amount too small\")\n    api_key_expired = _(\"Api key expired\")\n    balance_insufficient = _(\"Balance insufficient\")\n    bank_account_exists = _(\"Bank account exists\")\n    bank_account_unusable = _(\"Bank account unusable\")\n    bank_account_unverified = _(\"Bank account unverified\")\n    bitcoin_upgrade_required = _(\"Bitcoin upgrade required\")\n    card_declined = _(\"Card was declined\")\n    charge_already_captured = _(\"Charge already captured\")\n    charge_already_refunded = _(\"Charge already refunded\")\n    charge_disputed = _(\"Charge disputed\")\n    charge_exceeds_source_limit = _(\"Charge exceeds source limit\")\n    charge_expired_for_capture = _(\"Charge expired for capture\")\n    country_unsupported = _(\"Country unsupported\")\n    coupon_expired = _(\"Coupon expired\")\n    customer_max_subscriptions = _(\"Customer max subscriptions\")\n    email_invalid = _(\"Email invalid\")\n    expired_card = _(\"Expired card\")\n    idempotency_key_in_use = _(\"Idempotency key in use\")\n    incorrect_address = _(\"Incorrect address\")\n    incorrect_cvc = _(\"Incorrect security code\")\n    incorrect_number = _(\"Incorrect number\")\n    incorrect_zip = _(\"ZIP code failed validation\")\n    instant_payouts_unsupported = _(\"Instant payouts unsupported\")\n    invalid_card_type = _(\"Invalid card type\")\n    invalid_charge_amount = _(\"Invalid charge amount\")\n    invalid_cvc = _(\"Invalid security code\")\n    invalid_expiry_month = _(\"Invalid expiration month\")\n    invalid_expiry_year = _(\"Invalid expiration year\")\n    invalid_number = _(\"Invalid number\")\n    invalid_source_usage = _(\"Invalid source usage\")\n    invoice_no_customer_line_items = _(\"Invoice no customer line items\")\n    invoice_no_subscription_line_items = _(\"Invoice no subscription line items\")\n    invoice_not_editable = _(\"Invoice not editable\")\n    invoice_upcoming_none = _(\"Invoice upcoming none\")\n    livemode_mismatch = _(\"Livemode mismatch\")\n    missing = _(\"No card being charged\")\n    not_allowed_on_standard_account = _(\"Not allowed on standard account\")\n    order_creation_failed = _(\"Order creation failed\")\n    order_required_settings = _(\"Order required settings\")\n    order_status_invalid = _(\"Order status invalid\")\n    order_upstream_timeout = _(\"Order upstream timeout\")\n    out_of_inventory = _(\"Out of inventory\")\n    parameter_invalid_empty = _(\"Parameter invalid empty\")\n    parameter_invalid_integer = _(\"Parameter invalid integer\")\n    parameter_invalid_string_blank = _(\"Parameter invalid string blank\")\n    parameter_invalid_string_empty = _(\"Parameter invalid string empty\")\n    parameter_missing = _(\"Parameter missing\")\n    parameter_unknown = _(\"Parameter unknown\")\n    parameters_exclusive = _(\"Parameters exclusive\")\n    payment_intent_authentication_failure = _(\"Payment intent authentication failure\")\n    payment_intent_incompatible_payment_method = _(\n        \"Payment intent incompatible payment method\"\n    )\n    payment_intent_invalid_parameter = _(\"Payment intent invalid parameter\")\n    payment_intent_payment_attempt_failed = _(\"Payment intent payment attempt failed\")\n    payment_intent_unexpected_state = _(\"Payment intent unexpected state\")\n    payment_method_unactivated = _(\"Payment method unactivated\")\n    payment_method_unexpected_state = _(\"Payment method unexpected state\")\n    payouts_not_allowed = _(\"Payouts not allowed\")\n    platform_api_key_expired = _(\"Platform api key expired\")\n    postal_code_invalid = _(\"Postal code invalid\")\n    processing_error = _(\"Processing error\")\n    product_inactive = _(\"Product inactive\")\n    rate_limit = _(\"Rate limit\")\n    resource_already_exists = _(\"Resource already exists\")\n    resource_missing = _(\"Resource missing\")\n    routing_number_invalid = _(\"Routing number invalid\")\n    secret_key_required = _(\"Secret key required\")\n    sepa_unsupported_account = _(\"SEPA unsupported account\")\n    shipping_calculation_failed = _(\"Shipping calculation failed\")\n    sku_inactive = _(\"SKU inactive\")\n    state_unsupported = _(\"State unsupported\")\n    tax_id_invalid = _(\"Tax id invalid\")\n    taxes_calculation_failed = _(\"Taxes calculation failed\")\n    testmode_charges_only = _(\"Testmode charges only\")\n    tls_version_unsupported = _(\"TLS version unsupported\")\n    token_already_used = _(\"Token already used\")\n    token_in_use = _(\"Token in use\")\n    transfers_not_allowed = _(\"Transfers not allowed\")\n    upstream_order_creation_failed = _(\"Upstream order creation failed\")\n    url_invalid = _(\"URL invalid\")\n\n    # deprecated\n    invalid_swipe_data = _(\"Invalid swipe data\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.ApiErrorCode-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.account_already_exists","title":"<code>djstripe.enums.ApiErrorCode.account_already_exists = _('Account already exists')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.account_country_invalid_address","title":"<code>djstripe.enums.ApiErrorCode.account_country_invalid_address = _('Account country invalid address')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.account_invalid","title":"<code>djstripe.enums.ApiErrorCode.account_invalid = _('Account invalid')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.account_number_invalid","title":"<code>djstripe.enums.ApiErrorCode.account_number_invalid = _('Account number invalid')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.alipay_upgrade_required","title":"<code>djstripe.enums.ApiErrorCode.alipay_upgrade_required = _('Alipay upgrade required')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.amount_too_large","title":"<code>djstripe.enums.ApiErrorCode.amount_too_large = _('Amount too large')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.amount_too_small","title":"<code>djstripe.enums.ApiErrorCode.amount_too_small = _('Amount too small')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.api_key_expired","title":"<code>djstripe.enums.ApiErrorCode.api_key_expired = _('Api key expired')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.balance_insufficient","title":"<code>djstripe.enums.ApiErrorCode.balance_insufficient = _('Balance insufficient')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.bank_account_exists","title":"<code>djstripe.enums.ApiErrorCode.bank_account_exists = _('Bank account exists')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.bank_account_unusable","title":"<code>djstripe.enums.ApiErrorCode.bank_account_unusable = _('Bank account unusable')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.bank_account_unverified","title":"<code>djstripe.enums.ApiErrorCode.bank_account_unverified = _('Bank account unverified')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.bitcoin_upgrade_required","title":"<code>djstripe.enums.ApiErrorCode.bitcoin_upgrade_required = _('Bitcoin upgrade required')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.card_declined","title":"<code>djstripe.enums.ApiErrorCode.card_declined = _('Card was declined')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.charge_already_captured","title":"<code>djstripe.enums.ApiErrorCode.charge_already_captured = _('Charge already captured')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.charge_already_refunded","title":"<code>djstripe.enums.ApiErrorCode.charge_already_refunded = _('Charge already refunded')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.charge_disputed","title":"<code>djstripe.enums.ApiErrorCode.charge_disputed = _('Charge disputed')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.charge_exceeds_source_limit","title":"<code>djstripe.enums.ApiErrorCode.charge_exceeds_source_limit = _('Charge exceeds source limit')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.charge_expired_for_capture","title":"<code>djstripe.enums.ApiErrorCode.charge_expired_for_capture = _('Charge expired for capture')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.country_unsupported","title":"<code>djstripe.enums.ApiErrorCode.country_unsupported = _('Country unsupported')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.coupon_expired","title":"<code>djstripe.enums.ApiErrorCode.coupon_expired = _('Coupon expired')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.customer_max_subscriptions","title":"<code>djstripe.enums.ApiErrorCode.customer_max_subscriptions = _('Customer max subscriptions')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.email_invalid","title":"<code>djstripe.enums.ApiErrorCode.email_invalid = _('Email invalid')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.expired_card","title":"<code>djstripe.enums.ApiErrorCode.expired_card = _('Expired card')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.idempotency_key_in_use","title":"<code>djstripe.enums.ApiErrorCode.idempotency_key_in_use = _('Idempotency key in use')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.incorrect_address","title":"<code>djstripe.enums.ApiErrorCode.incorrect_address = _('Incorrect address')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.incorrect_cvc","title":"<code>djstripe.enums.ApiErrorCode.incorrect_cvc = _('Incorrect security code')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.incorrect_number","title":"<code>djstripe.enums.ApiErrorCode.incorrect_number = _('Incorrect number')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.incorrect_zip","title":"<code>djstripe.enums.ApiErrorCode.incorrect_zip = _('ZIP code failed validation')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.instant_payouts_unsupported","title":"<code>djstripe.enums.ApiErrorCode.instant_payouts_unsupported = _('Instant payouts unsupported')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.invalid_card_type","title":"<code>djstripe.enums.ApiErrorCode.invalid_card_type = _('Invalid card type')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.invalid_charge_amount","title":"<code>djstripe.enums.ApiErrorCode.invalid_charge_amount = _('Invalid charge amount')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.invalid_cvc","title":"<code>djstripe.enums.ApiErrorCode.invalid_cvc = _('Invalid security code')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.invalid_expiry_month","title":"<code>djstripe.enums.ApiErrorCode.invalid_expiry_month = _('Invalid expiration month')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.invalid_expiry_year","title":"<code>djstripe.enums.ApiErrorCode.invalid_expiry_year = _('Invalid expiration year')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.invalid_number","title":"<code>djstripe.enums.ApiErrorCode.invalid_number = _('Invalid number')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.invalid_source_usage","title":"<code>djstripe.enums.ApiErrorCode.invalid_source_usage = _('Invalid source usage')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.invalid_swipe_data","title":"<code>djstripe.enums.ApiErrorCode.invalid_swipe_data = _('Invalid swipe data')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.invoice_no_customer_line_items","title":"<code>djstripe.enums.ApiErrorCode.invoice_no_customer_line_items = _('Invoice no customer line items')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.invoice_no_subscription_line_items","title":"<code>djstripe.enums.ApiErrorCode.invoice_no_subscription_line_items = _('Invoice no subscription line items')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.invoice_not_editable","title":"<code>djstripe.enums.ApiErrorCode.invoice_not_editable = _('Invoice not editable')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.invoice_upcoming_none","title":"<code>djstripe.enums.ApiErrorCode.invoice_upcoming_none = _('Invoice upcoming none')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.livemode_mismatch","title":"<code>djstripe.enums.ApiErrorCode.livemode_mismatch = _('Livemode mismatch')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.missing","title":"<code>djstripe.enums.ApiErrorCode.missing = _('No card being charged')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.not_allowed_on_standard_account","title":"<code>djstripe.enums.ApiErrorCode.not_allowed_on_standard_account = _('Not allowed on standard account')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.order_creation_failed","title":"<code>djstripe.enums.ApiErrorCode.order_creation_failed = _('Order creation failed')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.order_required_settings","title":"<code>djstripe.enums.ApiErrorCode.order_required_settings = _('Order required settings')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.order_status_invalid","title":"<code>djstripe.enums.ApiErrorCode.order_status_invalid = _('Order status invalid')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.order_upstream_timeout","title":"<code>djstripe.enums.ApiErrorCode.order_upstream_timeout = _('Order upstream timeout')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.out_of_inventory","title":"<code>djstripe.enums.ApiErrorCode.out_of_inventory = _('Out of inventory')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.parameter_invalid_empty","title":"<code>djstripe.enums.ApiErrorCode.parameter_invalid_empty = _('Parameter invalid empty')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.parameter_invalid_integer","title":"<code>djstripe.enums.ApiErrorCode.parameter_invalid_integer = _('Parameter invalid integer')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.parameter_invalid_string_blank","title":"<code>djstripe.enums.ApiErrorCode.parameter_invalid_string_blank = _('Parameter invalid string blank')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.parameter_invalid_string_empty","title":"<code>djstripe.enums.ApiErrorCode.parameter_invalid_string_empty = _('Parameter invalid string empty')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.parameter_missing","title":"<code>djstripe.enums.ApiErrorCode.parameter_missing = _('Parameter missing')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.parameter_unknown","title":"<code>djstripe.enums.ApiErrorCode.parameter_unknown = _('Parameter unknown')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.parameters_exclusive","title":"<code>djstripe.enums.ApiErrorCode.parameters_exclusive = _('Parameters exclusive')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.payment_intent_authentication_failure","title":"<code>djstripe.enums.ApiErrorCode.payment_intent_authentication_failure = _('Payment intent authentication failure')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.payment_intent_incompatible_payment_method","title":"<code>djstripe.enums.ApiErrorCode.payment_intent_incompatible_payment_method = _('Payment intent incompatible payment method')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.payment_intent_invalid_parameter","title":"<code>djstripe.enums.ApiErrorCode.payment_intent_invalid_parameter = _('Payment intent invalid parameter')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.payment_intent_payment_attempt_failed","title":"<code>djstripe.enums.ApiErrorCode.payment_intent_payment_attempt_failed = _('Payment intent payment attempt failed')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.payment_intent_unexpected_state","title":"<code>djstripe.enums.ApiErrorCode.payment_intent_unexpected_state = _('Payment intent unexpected state')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.payment_method_unactivated","title":"<code>djstripe.enums.ApiErrorCode.payment_method_unactivated = _('Payment method unactivated')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.payment_method_unexpected_state","title":"<code>djstripe.enums.ApiErrorCode.payment_method_unexpected_state = _('Payment method unexpected state')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.payouts_not_allowed","title":"<code>djstripe.enums.ApiErrorCode.payouts_not_allowed = _('Payouts not allowed')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.platform_api_key_expired","title":"<code>djstripe.enums.ApiErrorCode.platform_api_key_expired = _('Platform api key expired')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.postal_code_invalid","title":"<code>djstripe.enums.ApiErrorCode.postal_code_invalid = _('Postal code invalid')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.processing_error","title":"<code>djstripe.enums.ApiErrorCode.processing_error = _('Processing error')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.product_inactive","title":"<code>djstripe.enums.ApiErrorCode.product_inactive = _('Product inactive')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.rate_limit","title":"<code>djstripe.enums.ApiErrorCode.rate_limit = _('Rate limit')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.resource_already_exists","title":"<code>djstripe.enums.ApiErrorCode.resource_already_exists = _('Resource already exists')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.resource_missing","title":"<code>djstripe.enums.ApiErrorCode.resource_missing = _('Resource missing')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.routing_number_invalid","title":"<code>djstripe.enums.ApiErrorCode.routing_number_invalid = _('Routing number invalid')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.secret_key_required","title":"<code>djstripe.enums.ApiErrorCode.secret_key_required = _('Secret key required')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.sepa_unsupported_account","title":"<code>djstripe.enums.ApiErrorCode.sepa_unsupported_account = _('SEPA unsupported account')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.shipping_calculation_failed","title":"<code>djstripe.enums.ApiErrorCode.shipping_calculation_failed = _('Shipping calculation failed')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.sku_inactive","title":"<code>djstripe.enums.ApiErrorCode.sku_inactive = _('SKU inactive')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.state_unsupported","title":"<code>djstripe.enums.ApiErrorCode.state_unsupported = _('State unsupported')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.tax_id_invalid","title":"<code>djstripe.enums.ApiErrorCode.tax_id_invalid = _('Tax id invalid')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.taxes_calculation_failed","title":"<code>djstripe.enums.ApiErrorCode.taxes_calculation_failed = _('Taxes calculation failed')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.testmode_charges_only","title":"<code>djstripe.enums.ApiErrorCode.testmode_charges_only = _('Testmode charges only')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.tls_version_unsupported","title":"<code>djstripe.enums.ApiErrorCode.tls_version_unsupported = _('TLS version unsupported')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.token_already_used","title":"<code>djstripe.enums.ApiErrorCode.token_already_used = _('Token already used')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.token_in_use","title":"<code>djstripe.enums.ApiErrorCode.token_in_use = _('Token in use')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.transfers_not_allowed","title":"<code>djstripe.enums.ApiErrorCode.transfers_not_allowed = _('Transfers not allowed')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.upstream_order_creation_failed","title":"<code>djstripe.enums.ApiErrorCode.upstream_order_creation_failed = _('Upstream order creation failed')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ApiErrorCode.url_invalid","title":"<code>djstripe.enums.ApiErrorCode.url_invalid = _('URL invalid')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionReportingCategory","title":"<code>djstripe.enums.BalanceTransactionReportingCategory</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class BalanceTransactionReportingCategory(Enum):\n    \"\"\"\n    https://stripe.com/docs/reports/reporting-categories\n    \"\"\"\n\n    advance = _(\"Advance\")\n    advance_funding = _(\"Advance funding\")\n    anticipation_repayment = _(\"Anticipation loan repayment (BR)\")\n    charge = _(\"Charge\")\n    charge_failure = _(\"Charge failure\")\n    connect_collection_transfer = _(\"Stripe Connect collection transfer\")\n    connect_reserved_funds = _(\"Stripe Connect reserved funds\")\n    dispute = _(\"Dispute\")\n    dispute_reversal = _(\"Dispute reversal\")\n    fee = _(\"Stripe fee\")\n    issuing_authorization_hold = _(\"Issuing authorization hold\")\n    issuing_authorization_release = _(\"Issuing authorization release\")\n    issuing_dispute = _(\"Issuing dispute\")\n    issuing_transaction = _(\"Issuing transaction\")\n    other_adjustment = _(\"Other adjustment\")\n    partial_capture_reversal = _(\"Partial capture reversal\")\n    payout = _(\"Payout\")\n    payout_reversal = _(\"Payout reversal\")\n    platform_earning = _(\"Stripe Connect platform earning\")\n    platform_earning_refund = _(\"Stripe Connect platform earning refund\")\n    refund = _(\"Refund\")\n    refund_failure = _(\"Refund failure\")\n    risk_reserved_funds = _(\"Risk-reserved funds\")\n    tax = _(\"Tax\")\n    topup = _(\"Top-up\")\n    topup_reversal = _(\"Top-up reversal\")\n    transfer = _(\"Stripe Connect transfer\")\n    transfer_reversal = _(\"Stripe Connect transfer reversal\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.BalanceTransactionReportingCategory-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionReportingCategory.advance","title":"<code>djstripe.enums.BalanceTransactionReportingCategory.advance = _('Advance')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionReportingCategory.advance_funding","title":"<code>djstripe.enums.BalanceTransactionReportingCategory.advance_funding = _('Advance funding')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionReportingCategory.anticipation_repayment","title":"<code>djstripe.enums.BalanceTransactionReportingCategory.anticipation_repayment = _('Anticipation loan repayment (BR)')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionReportingCategory.charge","title":"<code>djstripe.enums.BalanceTransactionReportingCategory.charge = _('Charge')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionReportingCategory.charge_failure","title":"<code>djstripe.enums.BalanceTransactionReportingCategory.charge_failure = _('Charge failure')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionReportingCategory.connect_collection_transfer","title":"<code>djstripe.enums.BalanceTransactionReportingCategory.connect_collection_transfer = _('Stripe Connect collection transfer')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionReportingCategory.connect_reserved_funds","title":"<code>djstripe.enums.BalanceTransactionReportingCategory.connect_reserved_funds = _('Stripe Connect reserved funds')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionReportingCategory.dispute","title":"<code>djstripe.enums.BalanceTransactionReportingCategory.dispute = _('Dispute')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionReportingCategory.dispute_reversal","title":"<code>djstripe.enums.BalanceTransactionReportingCategory.dispute_reversal = _('Dispute reversal')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionReportingCategory.fee","title":"<code>djstripe.enums.BalanceTransactionReportingCategory.fee = _('Stripe fee')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionReportingCategory.issuing_authorization_hold","title":"<code>djstripe.enums.BalanceTransactionReportingCategory.issuing_authorization_hold = _('Issuing authorization hold')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionReportingCategory.issuing_authorization_release","title":"<code>djstripe.enums.BalanceTransactionReportingCategory.issuing_authorization_release = _('Issuing authorization release')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionReportingCategory.issuing_dispute","title":"<code>djstripe.enums.BalanceTransactionReportingCategory.issuing_dispute = _('Issuing dispute')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionReportingCategory.issuing_transaction","title":"<code>djstripe.enums.BalanceTransactionReportingCategory.issuing_transaction = _('Issuing transaction')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionReportingCategory.other_adjustment","title":"<code>djstripe.enums.BalanceTransactionReportingCategory.other_adjustment = _('Other adjustment')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionReportingCategory.partial_capture_reversal","title":"<code>djstripe.enums.BalanceTransactionReportingCategory.partial_capture_reversal = _('Partial capture reversal')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionReportingCategory.payout","title":"<code>djstripe.enums.BalanceTransactionReportingCategory.payout = _('Payout')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionReportingCategory.payout_reversal","title":"<code>djstripe.enums.BalanceTransactionReportingCategory.payout_reversal = _('Payout reversal')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionReportingCategory.platform_earning","title":"<code>djstripe.enums.BalanceTransactionReportingCategory.platform_earning = _('Stripe Connect platform earning')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionReportingCategory.platform_earning_refund","title":"<code>djstripe.enums.BalanceTransactionReportingCategory.platform_earning_refund = _('Stripe Connect platform earning refund')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionReportingCategory.refund","title":"<code>djstripe.enums.BalanceTransactionReportingCategory.refund = _('Refund')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionReportingCategory.refund_failure","title":"<code>djstripe.enums.BalanceTransactionReportingCategory.refund_failure = _('Refund failure')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionReportingCategory.risk_reserved_funds","title":"<code>djstripe.enums.BalanceTransactionReportingCategory.risk_reserved_funds = _('Risk-reserved funds')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionReportingCategory.tax","title":"<code>djstripe.enums.BalanceTransactionReportingCategory.tax = _('Tax')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionReportingCategory.topup","title":"<code>djstripe.enums.BalanceTransactionReportingCategory.topup = _('Top-up')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionReportingCategory.topup_reversal","title":"<code>djstripe.enums.BalanceTransactionReportingCategory.topup_reversal = _('Top-up reversal')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionReportingCategory.transfer","title":"<code>djstripe.enums.BalanceTransactionReportingCategory.transfer = _('Stripe Connect transfer')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionReportingCategory.transfer_reversal","title":"<code>djstripe.enums.BalanceTransactionReportingCategory.transfer_reversal = _('Stripe Connect transfer reversal')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionStatus","title":"<code>djstripe.enums.BalanceTransactionStatus</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class BalanceTransactionStatus(Enum):\n    available = _(\"Available\")\n    pending = _(\"Pending\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.BalanceTransactionStatus-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionStatus.available","title":"<code>djstripe.enums.BalanceTransactionStatus.available = _('Available')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionStatus.pending","title":"<code>djstripe.enums.BalanceTransactionStatus.pending = _('Pending')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionType","title":"<code>djstripe.enums.BalanceTransactionType</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class BalanceTransactionType(Enum):\n    # https://stripe.com/docs/reports/balance-transaction-types\n    adjustment = _(\"Adjustment\")\n    advance = _(\"Advance\")\n    advance_funding = _(\"Advance funding\")\n    anticipation_repayment = _(\"Anticipation loan repayment\")\n    application_fee = _(\"Application fee\")\n    application_fee_refund = _(\"Application fee refund\")\n    balance_transfer_inbound = _(\"Balance transfer (inbound)\")\n    balance_transfer_outbound = _(\"Balance transfer (outbound)\")\n    charge = _(\"Charge\")\n    connect_collection_transfer = _(\"Connect collection transfer\")\n    contribution = _(\"Charitable contribution\")\n    issuing_authorization_hold = _(\"Issuing authorization hold\")\n    issuing_authorization_release = _(\"Issuing authorization release\")\n    issuing_dispute = _(\"Issuing dispute\")\n    issuing_transaction = _(\"Issuing transaction\")\n    network_cost = _(\"Network cost\")\n    payment = _(\"Payment\")\n    payment_failure_refund = _(\"Payment failure refund\")\n    payment_refund = _(\"Payment refund\")\n    payout = _(\"Payout\")\n    payout_cancel = _(\"Payout cancellation\")\n    payout_failure = _(\"Payout failure\")\n    refund = _(\"Refund\")\n    refund_failure = _(\"Refund failure\")\n    reserve_transaction = _(\"Reserve transaction\")\n    reserved_funds = _(\"Reserved funds\")\n    stripe_fee = _(\"Stripe fee\")\n    stripe_fx_fee = _(\"Stripe currency conversion fee\")\n    tax_fee = _(\"Tax fee\")\n    topup = _(\"Topup\")\n    topup_reversal = _(\"Topup reversal\")\n    transfer = _(\"Transfer\")\n    transfer_cancel = _(\"Transfer cancel\")\n    transfer_failure = _(\"Transfer failure\")\n    transfer_refund = _(\"Transfer refund\")\n    validation = _(\"Validation\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.BalanceTransactionType-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionType.adjustment","title":"<code>djstripe.enums.BalanceTransactionType.adjustment = _('Adjustment')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionType.advance","title":"<code>djstripe.enums.BalanceTransactionType.advance = _('Advance')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionType.advance_funding","title":"<code>djstripe.enums.BalanceTransactionType.advance_funding = _('Advance funding')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionType.anticipation_repayment","title":"<code>djstripe.enums.BalanceTransactionType.anticipation_repayment = _('Anticipation loan repayment')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionType.application_fee","title":"<code>djstripe.enums.BalanceTransactionType.application_fee = _('Application fee')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionType.application_fee_refund","title":"<code>djstripe.enums.BalanceTransactionType.application_fee_refund = _('Application fee refund')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionType.balance_transfer_inbound","title":"<code>djstripe.enums.BalanceTransactionType.balance_transfer_inbound = _('Balance transfer (inbound)')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionType.balance_transfer_outbound","title":"<code>djstripe.enums.BalanceTransactionType.balance_transfer_outbound = _('Balance transfer (outbound)')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionType.charge","title":"<code>djstripe.enums.BalanceTransactionType.charge = _('Charge')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionType.connect_collection_transfer","title":"<code>djstripe.enums.BalanceTransactionType.connect_collection_transfer = _('Connect collection transfer')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionType.contribution","title":"<code>djstripe.enums.BalanceTransactionType.contribution = _('Charitable contribution')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionType.issuing_authorization_hold","title":"<code>djstripe.enums.BalanceTransactionType.issuing_authorization_hold = _('Issuing authorization hold')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionType.issuing_authorization_release","title":"<code>djstripe.enums.BalanceTransactionType.issuing_authorization_release = _('Issuing authorization release')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionType.issuing_dispute","title":"<code>djstripe.enums.BalanceTransactionType.issuing_dispute = _('Issuing dispute')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionType.issuing_transaction","title":"<code>djstripe.enums.BalanceTransactionType.issuing_transaction = _('Issuing transaction')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionType.network_cost","title":"<code>djstripe.enums.BalanceTransactionType.network_cost = _('Network cost')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionType.payment","title":"<code>djstripe.enums.BalanceTransactionType.payment = _('Payment')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionType.payment_failure_refund","title":"<code>djstripe.enums.BalanceTransactionType.payment_failure_refund = _('Payment failure refund')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionType.payment_refund","title":"<code>djstripe.enums.BalanceTransactionType.payment_refund = _('Payment refund')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionType.payout","title":"<code>djstripe.enums.BalanceTransactionType.payout = _('Payout')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionType.payout_cancel","title":"<code>djstripe.enums.BalanceTransactionType.payout_cancel = _('Payout cancellation')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionType.payout_failure","title":"<code>djstripe.enums.BalanceTransactionType.payout_failure = _('Payout failure')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionType.refund","title":"<code>djstripe.enums.BalanceTransactionType.refund = _('Refund')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionType.refund_failure","title":"<code>djstripe.enums.BalanceTransactionType.refund_failure = _('Refund failure')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionType.reserve_transaction","title":"<code>djstripe.enums.BalanceTransactionType.reserve_transaction = _('Reserve transaction')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionType.reserved_funds","title":"<code>djstripe.enums.BalanceTransactionType.reserved_funds = _('Reserved funds')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionType.stripe_fee","title":"<code>djstripe.enums.BalanceTransactionType.stripe_fee = _('Stripe fee')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionType.stripe_fx_fee","title":"<code>djstripe.enums.BalanceTransactionType.stripe_fx_fee = _('Stripe currency conversion fee')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionType.tax_fee","title":"<code>djstripe.enums.BalanceTransactionType.tax_fee = _('Tax fee')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionType.topup","title":"<code>djstripe.enums.BalanceTransactionType.topup = _('Topup')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionType.topup_reversal","title":"<code>djstripe.enums.BalanceTransactionType.topup_reversal = _('Topup reversal')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionType.transfer","title":"<code>djstripe.enums.BalanceTransactionType.transfer = _('Transfer')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionType.transfer_cancel","title":"<code>djstripe.enums.BalanceTransactionType.transfer_cancel = _('Transfer cancel')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionType.transfer_failure","title":"<code>djstripe.enums.BalanceTransactionType.transfer_failure = _('Transfer failure')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionType.transfer_refund","title":"<code>djstripe.enums.BalanceTransactionType.transfer_refund = _('Transfer refund')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BalanceTransactionType.validation","title":"<code>djstripe.enums.BalanceTransactionType.validation = _('Validation')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BankAccountHolderType","title":"<code>djstripe.enums.BankAccountHolderType</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class BankAccountHolderType(Enum):\n    individual = _(\"Individual\")\n    company = _(\"Company\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.BankAccountHolderType-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.BankAccountHolderType.company","title":"<code>djstripe.enums.BankAccountHolderType.company = _('Company')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BankAccountHolderType.individual","title":"<code>djstripe.enums.BankAccountHolderType.individual = _('Individual')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BankAccountStatus","title":"<code>djstripe.enums.BankAccountStatus</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class BankAccountStatus(Enum):\n    new = _(\"New\")\n    validated = _(\"Validated\")\n    verified = _(\"Verified\")\n    verification_failed = _(\"Verification failed\")\n    errored = _(\"Errored\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.BankAccountStatus-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.BankAccountStatus.errored","title":"<code>djstripe.enums.BankAccountStatus.errored = _('Errored')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BankAccountStatus.new","title":"<code>djstripe.enums.BankAccountStatus.new = _('New')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BankAccountStatus.validated","title":"<code>djstripe.enums.BankAccountStatus.validated = _('Validated')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BankAccountStatus.verification_failed","title":"<code>djstripe.enums.BankAccountStatus.verification_failed = _('Verification failed')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BankAccountStatus.verified","title":"<code>djstripe.enums.BankAccountStatus.verified = _('Verified')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BillingScheme","title":"<code>djstripe.enums.BillingScheme</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class BillingScheme(Enum):\n    per_unit = _(\"Per-unit\")\n    tiered = _(\"Tiered\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.BillingScheme-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.BillingScheme.per_unit","title":"<code>djstripe.enums.BillingScheme.per_unit = _('Per-unit')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.BillingScheme.tiered","title":"<code>djstripe.enums.BillingScheme.tiered = _('Tiered')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.CaptureMethod","title":"<code>djstripe.enums.CaptureMethod</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class CaptureMethod(Enum):\n    automatic = _(\"Automatic\")\n    manual = _(\"Manual\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.CaptureMethod-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.CaptureMethod.automatic","title":"<code>djstripe.enums.CaptureMethod.automatic = _('Automatic')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.CaptureMethod.manual","title":"<code>djstripe.enums.CaptureMethod.manual = _('Manual')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.CardBrand","title":"<code>djstripe.enums.CardBrand</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class CardBrand(Enum):\n    AmericanExpress = (_(\"American Express\"), \"American Express\")\n    DinersClub = (_(\"Diners Club\"), \"Diners Club\")\n    Discover = _(\"Discover\")\n    JCB = _(\"JCB\")\n    MasterCard = _(\"MasterCard\")\n    UnionPay = _(\"UnionPay\")\n    Visa = _(\"Visa\")\n    Unknown = _(\"Unknown\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.CardBrand-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.CardBrand.AmericanExpress","title":"<code>djstripe.enums.CardBrand.AmericanExpress = (_('American Express'), 'American Express')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.CardBrand.DinersClub","title":"<code>djstripe.enums.CardBrand.DinersClub = (_('Diners Club'), 'Diners Club')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.CardBrand.Discover","title":"<code>djstripe.enums.CardBrand.Discover = _('Discover')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.CardBrand.JCB","title":"<code>djstripe.enums.CardBrand.JCB = _('JCB')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.CardBrand.MasterCard","title":"<code>djstripe.enums.CardBrand.MasterCard = _('MasterCard')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.CardBrand.UnionPay","title":"<code>djstripe.enums.CardBrand.UnionPay = _('UnionPay')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.CardBrand.Unknown","title":"<code>djstripe.enums.CardBrand.Unknown = _('Unknown')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.CardBrand.Visa","title":"<code>djstripe.enums.CardBrand.Visa = _('Visa')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.CardCheckResult","title":"<code>djstripe.enums.CardCheckResult</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class CardCheckResult(Enum):\n    pass_ = (_(\"Pass\"), \"pass\")\n    fail = _(\"Fail\")\n    unavailable = _(\"Unavailable\")\n    unchecked = _(\"Unchecked\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.CardCheckResult-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.CardCheckResult.fail","title":"<code>djstripe.enums.CardCheckResult.fail = _('Fail')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.CardCheckResult.pass_","title":"<code>djstripe.enums.CardCheckResult.pass_ = (_('Pass'), 'pass')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.CardCheckResult.unavailable","title":"<code>djstripe.enums.CardCheckResult.unavailable = _('Unavailable')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.CardCheckResult.unchecked","title":"<code>djstripe.enums.CardCheckResult.unchecked = _('Unchecked')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.CardFundingType","title":"<code>djstripe.enums.CardFundingType</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class CardFundingType(Enum):\n    credit = _(\"Credit\")\n    debit = _(\"Debit\")\n    prepaid = _(\"Prepaid\")\n    unknown = _(\"Unknown\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.CardFundingType-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.CardFundingType.credit","title":"<code>djstripe.enums.CardFundingType.credit = _('Credit')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.CardFundingType.debit","title":"<code>djstripe.enums.CardFundingType.debit = _('Debit')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.CardFundingType.prepaid","title":"<code>djstripe.enums.CardFundingType.prepaid = _('Prepaid')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.CardFundingType.unknown","title":"<code>djstripe.enums.CardFundingType.unknown = _('Unknown')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.CardTokenizationMethod","title":"<code>djstripe.enums.CardTokenizationMethod</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class CardTokenizationMethod(Enum):\n    apple_pay = _(\"Apple Pay\")\n    android_pay = _(\"Android Pay\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.CardTokenizationMethod-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.CardTokenizationMethod.android_pay","title":"<code>djstripe.enums.CardTokenizationMethod.android_pay = _('Android Pay')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.CardTokenizationMethod.apple_pay","title":"<code>djstripe.enums.CardTokenizationMethod.apple_pay = _('Apple Pay')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ChargeStatus","title":"<code>djstripe.enums.ChargeStatus</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class ChargeStatus(Enum):\n    succeeded = _(\"Succeeded\")\n    pending = _(\"Pending\")\n    failed = _(\"Failed\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.ChargeStatus-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.ChargeStatus.failed","title":"<code>djstripe.enums.ChargeStatus.failed = _('Failed')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ChargeStatus.pending","title":"<code>djstripe.enums.ChargeStatus.pending = _('Pending')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ChargeStatus.succeeded","title":"<code>djstripe.enums.ChargeStatus.succeeded = _('Succeeded')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ConfirmationMethod","title":"<code>djstripe.enums.ConfirmationMethod</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class ConfirmationMethod(Enum):\n    automatic = _(\"Automatic\")\n    manual = _(\"Manual\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.ConfirmationMethod-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.ConfirmationMethod.automatic","title":"<code>djstripe.enums.ConfirmationMethod.automatic = _('Automatic')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ConfirmationMethod.manual","title":"<code>djstripe.enums.ConfirmationMethod.manual = _('Manual')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.CouponDuration","title":"<code>djstripe.enums.CouponDuration</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class CouponDuration(Enum):\n    once = _(\"Once\")\n    repeating = _(\"Multi-month\")\n    forever = _(\"Forever\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.CouponDuration-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.CouponDuration.forever","title":"<code>djstripe.enums.CouponDuration.forever = _('Forever')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.CouponDuration.once","title":"<code>djstripe.enums.CouponDuration.once = _('Once')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.CouponDuration.repeating","title":"<code>djstripe.enums.CouponDuration.repeating = _('Multi-month')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.CustomerTaxExempt","title":"<code>djstripe.enums.CustomerTaxExempt</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class CustomerTaxExempt(Enum):\n    none = _(\"None\")\n    exempt = _(\"Exempt\")\n    reverse = _(\"Reverse\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.CustomerTaxExempt-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.CustomerTaxExempt.exempt","title":"<code>djstripe.enums.CustomerTaxExempt.exempt = _('Exempt')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.CustomerTaxExempt.none","title":"<code>djstripe.enums.CustomerTaxExempt.none = _('None')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.CustomerTaxExempt.reverse","title":"<code>djstripe.enums.CustomerTaxExempt.reverse = _('Reverse')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.DisputeReason","title":"<code>djstripe.enums.DisputeReason</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class DisputeReason(Enum):\n    duplicate = _(\"Duplicate\")\n    fraudulent = _(\"Fraudulent\")\n    subscription_canceled = _(\"Subscription canceled\")\n    product_unacceptable = _(\"Product unacceptable\")\n    product_not_received = _(\"Product not received\")\n    unrecognized = _(\"Unrecognized\")\n    credit_not_processed = _(\"Credit not processed\")\n    general = _(\"General\")\n    incorrect_account_details = _(\"Incorrect account details\")\n    insufficient_funds = _(\"Insufficient funds\")\n    bank_cannot_process = _(\"Bank cannot process\")\n    debit_not_authorized = _(\"Debit not authorized\")\n    customer_initiated = _(\"Customer-initiated\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.DisputeReason-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.DisputeReason.bank_cannot_process","title":"<code>djstripe.enums.DisputeReason.bank_cannot_process = _('Bank cannot process')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.DisputeReason.credit_not_processed","title":"<code>djstripe.enums.DisputeReason.credit_not_processed = _('Credit not processed')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.DisputeReason.customer_initiated","title":"<code>djstripe.enums.DisputeReason.customer_initiated = _('Customer-initiated')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.DisputeReason.debit_not_authorized","title":"<code>djstripe.enums.DisputeReason.debit_not_authorized = _('Debit not authorized')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.DisputeReason.duplicate","title":"<code>djstripe.enums.DisputeReason.duplicate = _('Duplicate')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.DisputeReason.fraudulent","title":"<code>djstripe.enums.DisputeReason.fraudulent = _('Fraudulent')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.DisputeReason.general","title":"<code>djstripe.enums.DisputeReason.general = _('General')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.DisputeReason.incorrect_account_details","title":"<code>djstripe.enums.DisputeReason.incorrect_account_details = _('Incorrect account details')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.DisputeReason.insufficient_funds","title":"<code>djstripe.enums.DisputeReason.insufficient_funds = _('Insufficient funds')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.DisputeReason.product_not_received","title":"<code>djstripe.enums.DisputeReason.product_not_received = _('Product not received')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.DisputeReason.product_unacceptable","title":"<code>djstripe.enums.DisputeReason.product_unacceptable = _('Product unacceptable')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.DisputeReason.subscription_canceled","title":"<code>djstripe.enums.DisputeReason.subscription_canceled = _('Subscription canceled')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.DisputeReason.unrecognized","title":"<code>djstripe.enums.DisputeReason.unrecognized = _('Unrecognized')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.DisputeStatus","title":"<code>djstripe.enums.DisputeStatus</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class DisputeStatus(Enum):\n    warning_needs_response = _(\"Warning needs response\")\n    warning_under_review = _(\"Warning under review\")\n    warning_closed = _(\"Warning closed\")\n    needs_response = _(\"Needs response\")\n    under_review = _(\"Under review\")\n    charge_refunded = _(\"Charge refunded\")\n    won = _(\"Won\")\n    lost = _(\"Lost\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.DisputeStatus-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.DisputeStatus.charge_refunded","title":"<code>djstripe.enums.DisputeStatus.charge_refunded = _('Charge refunded')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.DisputeStatus.lost","title":"<code>djstripe.enums.DisputeStatus.lost = _('Lost')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.DisputeStatus.needs_response","title":"<code>djstripe.enums.DisputeStatus.needs_response = _('Needs response')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.DisputeStatus.under_review","title":"<code>djstripe.enums.DisputeStatus.under_review = _('Under review')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.DisputeStatus.warning_closed","title":"<code>djstripe.enums.DisputeStatus.warning_closed = _('Warning closed')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.DisputeStatus.warning_needs_response","title":"<code>djstripe.enums.DisputeStatus.warning_needs_response = _('Warning needs response')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.DisputeStatus.warning_under_review","title":"<code>djstripe.enums.DisputeStatus.warning_under_review = _('Warning under review')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.DisputeStatus.won","title":"<code>djstripe.enums.DisputeStatus.won = _('Won')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.DjstripePaymentMethodType","title":"<code>djstripe.enums.DjstripePaymentMethodType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>A djstripe-specific enum for the DjStripePaymentMethod model.</p> Source code in <code>djstripe/enums.py</code> <pre><code>class DjstripePaymentMethodType(Enum):\n    \"\"\"\n    A djstripe-specific enum for the DjStripePaymentMethod model.\n    \"\"\"\n\n    alipay_account = _(\"Alipay account\")\n    card = _(\"Card\")\n    bank_account = _(\"Bank account\")\n    source = _(\"Source\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.DjstripePaymentMethodType-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.DjstripePaymentMethodType.alipay_account","title":"<code>djstripe.enums.DjstripePaymentMethodType.alipay_account = _('Alipay account')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.DjstripePaymentMethodType.bank_account","title":"<code>djstripe.enums.DjstripePaymentMethodType.bank_account = _('Bank account')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.DjstripePaymentMethodType.card","title":"<code>djstripe.enums.DjstripePaymentMethodType.card = _('Card')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.DjstripePaymentMethodType.source","title":"<code>djstripe.enums.DjstripePaymentMethodType.source = _('Source')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.Enum","title":"<code>djstripe.enums.Enum</code>","text":"Source code in <code>djstripe/enums.py</code> <pre><code>class Enum(metaclass=EnumMetaClass):\n    pass\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.EnumMetaClass","title":"<code>djstripe.enums.EnumMetaClass</code>","text":"<p>               Bases: <code>type</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class EnumMetaClass(type):\n    def __init__(cls, name, bases, classdict):\n        def _human_enum_values(enum):\n            return cls.__choices__[enum]\n\n        # add a class attribute\n        cls.humanize = _human_enum_values\n\n    @classmethod\n    def __prepare__(cls, name, bases):\n        return OrderedDict()\n\n    def __new__(cls, name, bases, classdict):\n        members = []\n        keys = {}\n        choices = OrderedDict()\n        for key, value in classdict.items():\n            if key.startswith(\"__\"):\n                continue\n            members.append(key)\n            if isinstance(value, tuple):\n                value, alias = value\n                keys[alias] = key\n            else:\n                alias = None\n            keys[alias or key] = key\n            choices[alias or key] = value\n\n        for k, v in keys.items():\n            classdict[v] = k\n\n        classdict[\"__choices__\"] = choices\n        classdict[\"__members__\"] = members\n\n        # Note: Differences between Python 2.x and Python 3.x force us to\n        # explicitly use unicode here, and to explicitly sort the list. In\n        # Python 2.x, class members are unordered and so the ordering will\n        # vary on different systems based on internal hashing. Without this\n        # Django will continually require new no-op migrations.\n        classdict[\"choices\"] = tuple(\n            (str(k), str(v))\n            for k, v in sorted(choices.items(), key=operator.itemgetter(0))\n        )\n\n        return type.__new__(cls, name, bases, classdict)\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.EnumMetaClass-functions","title":"Functions","text":""},{"location":"reference/enums/#djstripe.enums.EnumMetaClass.__init__","title":"<code>djstripe.enums.EnumMetaClass.__init__(name, bases, classdict)</code>","text":"Source code in <code>djstripe/enums.py</code> <pre><code>def __init__(cls, name, bases, classdict):\n    def _human_enum_values(enum):\n        return cls.__choices__[enum]\n\n    # add a class attribute\n    cls.humanize = _human_enum_values\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.EnumMetaClass.__new__","title":"<code>djstripe.enums.EnumMetaClass.__new__(name, bases, classdict)</code>","text":"Source code in <code>djstripe/enums.py</code> <pre><code>def __new__(cls, name, bases, classdict):\n    members = []\n    keys = {}\n    choices = OrderedDict()\n    for key, value in classdict.items():\n        if key.startswith(\"__\"):\n            continue\n        members.append(key)\n        if isinstance(value, tuple):\n            value, alias = value\n            keys[alias] = key\n        else:\n            alias = None\n        keys[alias or key] = key\n        choices[alias or key] = value\n\n    for k, v in keys.items():\n        classdict[v] = k\n\n    classdict[\"__choices__\"] = choices\n    classdict[\"__members__\"] = members\n\n    # Note: Differences between Python 2.x and Python 3.x force us to\n    # explicitly use unicode here, and to explicitly sort the list. In\n    # Python 2.x, class members are unordered and so the ordering will\n    # vary on different systems based on internal hashing. Without this\n    # Django will continually require new no-op migrations.\n    classdict[\"choices\"] = tuple(\n        (str(k), str(v))\n        for k, v in sorted(choices.items(), key=operator.itemgetter(0))\n    )\n\n    return type.__new__(cls, name, bases, classdict)\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.EnumMetaClass.__prepare__","title":"<code>djstripe.enums.EnumMetaClass.__prepare__(name, bases)</code>  <code>classmethod</code>","text":"Source code in <code>djstripe/enums.py</code> <pre><code>@classmethod\ndef __prepare__(cls, name, bases):\n    return OrderedDict()\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.FilePurpose","title":"<code>djstripe.enums.FilePurpose</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class FilePurpose(Enum):\n    account_requirement = _(\"Account requirement\")\n    additional_verification = _(\"Additional verification\")\n    business_icon = _(\"Business icon\")\n    business_logo = _(\"Business logo\")\n    customer_signature = _(\"Customer signature\")\n    credit_note = _(\"Credit Note\")\n    dispute_evidence = _(\"Dispute evidence\")\n    document_provider_identity_document = _(\"Document provider identity document\")\n    finance_report_run = _(\"Finance report run\")\n    identity_document = _(\"Identity document\")\n    identity_document_downloadable = _(\"Identity document (downloadable)\")\n    invoice_statement = _(\"Invoice statement\")\n    pci_document = _(\"PCI document\")\n    selfie = _(\"Selfie (Stripe Identity)\")\n    sigma_scheduled_query = _(\"Sigma scheduled query\")\n    tax_document_user_upload = _(\"Tax document user upload\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.FilePurpose-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.FilePurpose.account_requirement","title":"<code>djstripe.enums.FilePurpose.account_requirement = _('Account requirement')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.FilePurpose.additional_verification","title":"<code>djstripe.enums.FilePurpose.additional_verification = _('Additional verification')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.FilePurpose.business_icon","title":"<code>djstripe.enums.FilePurpose.business_icon = _('Business icon')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.FilePurpose.business_logo","title":"<code>djstripe.enums.FilePurpose.business_logo = _('Business logo')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.FilePurpose.credit_note","title":"<code>djstripe.enums.FilePurpose.credit_note = _('Credit Note')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.FilePurpose.customer_signature","title":"<code>djstripe.enums.FilePurpose.customer_signature = _('Customer signature')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.FilePurpose.dispute_evidence","title":"<code>djstripe.enums.FilePurpose.dispute_evidence = _('Dispute evidence')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.FilePurpose.document_provider_identity_document","title":"<code>djstripe.enums.FilePurpose.document_provider_identity_document = _('Document provider identity document')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.FilePurpose.finance_report_run","title":"<code>djstripe.enums.FilePurpose.finance_report_run = _('Finance report run')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.FilePurpose.identity_document","title":"<code>djstripe.enums.FilePurpose.identity_document = _('Identity document')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.FilePurpose.identity_document_downloadable","title":"<code>djstripe.enums.FilePurpose.identity_document_downloadable = _('Identity document (downloadable)')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.FilePurpose.invoice_statement","title":"<code>djstripe.enums.FilePurpose.invoice_statement = _('Invoice statement')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.FilePurpose.pci_document","title":"<code>djstripe.enums.FilePurpose.pci_document = _('PCI document')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.FilePurpose.selfie","title":"<code>djstripe.enums.FilePurpose.selfie = _('Selfie (Stripe Identity)')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.FilePurpose.sigma_scheduled_query","title":"<code>djstripe.enums.FilePurpose.sigma_scheduled_query = _('Sigma scheduled query')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.FilePurpose.tax_document_user_upload","title":"<code>djstripe.enums.FilePurpose.tax_document_user_upload = _('Tax document user upload')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.FileType","title":"<code>djstripe.enums.FileType</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class FileType(Enum):\n    pdf = _(\"PDF\")\n    jpg = _(\"JPG\")\n    png = _(\"PNG\")\n    csv = _(\"CSV\")\n    xls = _(\"XLS\")\n    xlsx = _(\"XLSX\")\n    docx = _(\"DOCX\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.FileType-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.FileType.csv","title":"<code>djstripe.enums.FileType.csv = _('CSV')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.FileType.docx","title":"<code>djstripe.enums.FileType.docx = _('DOCX')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.FileType.jpg","title":"<code>djstripe.enums.FileType.jpg = _('JPG')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.FileType.pdf","title":"<code>djstripe.enums.FileType.pdf = _('PDF')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.FileType.png","title":"<code>djstripe.enums.FileType.png = _('PNG')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.FileType.xls","title":"<code>djstripe.enums.FileType.xls = _('XLS')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.FileType.xlsx","title":"<code>djstripe.enums.FileType.xlsx = _('XLSX')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.IntentStatus","title":"<code>djstripe.enums.IntentStatus</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Status of Intents which apply both to PaymentIntents and SetupIntents.</p> Source code in <code>djstripe/enums.py</code> <pre><code>class IntentStatus(Enum):\n    \"\"\"\n    Status of Intents which apply both to PaymentIntents\n    and SetupIntents.\n    \"\"\"\n\n    requires_payment_method = _(\n        \"Intent created and requires a Payment Method to be attached.\"\n    )\n    requires_confirmation = _(\"Intent is ready to be confirmed.\")\n    requires_action = _(\"Payment Method require additional action, such as 3D secure.\")\n    processing = _(\"Required actions have been handled.\")\n    canceled = _(\n        \"Cancellation invalidates the intent for future confirmation and \"\n        \"cannot be undone.\"\n    )\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.IntentStatus-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.IntentStatus.canceled","title":"<code>djstripe.enums.IntentStatus.canceled = _('Cancellation invalidates the intent for future confirmation and cannot be undone.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.IntentStatus.processing","title":"<code>djstripe.enums.IntentStatus.processing = _('Required actions have been handled.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.IntentStatus.requires_action","title":"<code>djstripe.enums.IntentStatus.requires_action = _('Payment Method require additional action, such as 3D secure.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.IntentStatus.requires_confirmation","title":"<code>djstripe.enums.IntentStatus.requires_confirmation = _('Intent is ready to be confirmed.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.IntentStatus.requires_payment_method","title":"<code>djstripe.enums.IntentStatus.requires_payment_method = _('Intent created and requires a Payment Method to be attached.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.IntentUsage","title":"<code>djstripe.enums.IntentUsage</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class IntentUsage(Enum):\n    on_session = _(\"On session\")\n    off_session = _(\"Off session\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.IntentUsage-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.IntentUsage.off_session","title":"<code>djstripe.enums.IntentUsage.off_session = _('Off session')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.IntentUsage.on_session","title":"<code>djstripe.enums.IntentUsage.on_session = _('On session')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.InvoiceBillingReason","title":"<code>djstripe.enums.InvoiceBillingReason</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class InvoiceBillingReason(Enum):\n    subscription_cycle = _(\"Subscription cycle\")\n    subscription_create = _(\"Subscription create\")\n    subscription_update = _(\"Subscription update\")\n    subscription = _(\"Subscription\")\n    manual = _(\"Manual\")\n    upcoming = _(\"Upcoming\")\n    subscription_threshold = _(\"Subscription threshold\")\n    automatic_pending_invoice_item_invoice = _(\"Automatic pending invoice item invoice\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.InvoiceBillingReason-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.InvoiceBillingReason.automatic_pending_invoice_item_invoice","title":"<code>djstripe.enums.InvoiceBillingReason.automatic_pending_invoice_item_invoice = _('Automatic pending invoice item invoice')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.InvoiceBillingReason.manual","title":"<code>djstripe.enums.InvoiceBillingReason.manual = _('Manual')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.InvoiceBillingReason.subscription","title":"<code>djstripe.enums.InvoiceBillingReason.subscription = _('Subscription')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.InvoiceBillingReason.subscription_create","title":"<code>djstripe.enums.InvoiceBillingReason.subscription_create = _('Subscription create')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.InvoiceBillingReason.subscription_cycle","title":"<code>djstripe.enums.InvoiceBillingReason.subscription_cycle = _('Subscription cycle')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.InvoiceBillingReason.subscription_threshold","title":"<code>djstripe.enums.InvoiceBillingReason.subscription_threshold = _('Subscription threshold')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.InvoiceBillingReason.subscription_update","title":"<code>djstripe.enums.InvoiceBillingReason.subscription_update = _('Subscription update')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.InvoiceBillingReason.upcoming","title":"<code>djstripe.enums.InvoiceBillingReason.upcoming = _('Upcoming')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.InvoiceCollectionMethod","title":"<code>djstripe.enums.InvoiceCollectionMethod</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class InvoiceCollectionMethod(Enum):\n    charge_automatically = _(\"Charge automatically\")\n    send_invoice = _(\"Send invoice\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.InvoiceCollectionMethod-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.InvoiceCollectionMethod.charge_automatically","title":"<code>djstripe.enums.InvoiceCollectionMethod.charge_automatically = _('Charge automatically')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.InvoiceCollectionMethod.send_invoice","title":"<code>djstripe.enums.InvoiceCollectionMethod.send_invoice = _('Send invoice')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.InvoiceStatus","title":"<code>djstripe.enums.InvoiceStatus</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class InvoiceStatus(Enum):\n    draft = _(\"Draft\")\n    open = _(\"Open\")\n    paid = _(\"Paid\")\n    uncollectible = _(\"Uncollectible\")\n    void = _(\"Void\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.InvoiceStatus-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.InvoiceStatus.draft","title":"<code>djstripe.enums.InvoiceStatus.draft = _('Draft')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.InvoiceStatus.open","title":"<code>djstripe.enums.InvoiceStatus.open = _('Open')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.InvoiceStatus.paid","title":"<code>djstripe.enums.InvoiceStatus.paid = _('Paid')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.InvoiceStatus.uncollectible","title":"<code>djstripe.enums.InvoiceStatus.uncollectible = _('Uncollectible')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.InvoiceStatus.void","title":"<code>djstripe.enums.InvoiceStatus.void = _('Void')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.LegacySourceType","title":"<code>djstripe.enums.LegacySourceType</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class LegacySourceType(Enum):\n    card = _(\"Card\")\n    bank_account = _(\"Bank account\")\n    bitcoin_receiver = _(\"Bitcoin receiver\")\n    alipay_account = _(\"Alipay account\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.LegacySourceType-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.LegacySourceType.alipay_account","title":"<code>djstripe.enums.LegacySourceType.alipay_account = _('Alipay account')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.LegacySourceType.bank_account","title":"<code>djstripe.enums.LegacySourceType.bank_account = _('Bank account')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.LegacySourceType.bitcoin_receiver","title":"<code>djstripe.enums.LegacySourceType.bitcoin_receiver = _('Bitcoin receiver')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.LegacySourceType.card","title":"<code>djstripe.enums.LegacySourceType.card = _('Card')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.LineItem","title":"<code>djstripe.enums.LineItem</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class LineItem(Enum):\n    invoiceitem = _(\"Invoice Item\")\n    subscription = _(\"Subscription\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.LineItem-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.LineItem.invoiceitem","title":"<code>djstripe.enums.LineItem.invoiceitem = _('Invoice Item')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.LineItem.subscription","title":"<code>djstripe.enums.LineItem.subscription = _('Subscription')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.MandateStatus","title":"<code>djstripe.enums.MandateStatus</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class MandateStatus(Enum):\n    active = _(\"Active\")\n    inactive = _(\"Inactive\")\n    pending = _(\"Pending\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.MandateStatus-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.MandateStatus.active","title":"<code>djstripe.enums.MandateStatus.active = _('Active')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.MandateStatus.inactive","title":"<code>djstripe.enums.MandateStatus.inactive = _('Inactive')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.MandateStatus.pending","title":"<code>djstripe.enums.MandateStatus.pending = _('Pending')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.MandateType","title":"<code>djstripe.enums.MandateType</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class MandateType(Enum):\n    multi_use = _(\"Multi-use\")\n    single_use = _(\"Single-use\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.MandateType-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.MandateType.multi_use","title":"<code>djstripe.enums.MandateType.multi_use = _('Multi-use')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.MandateType.single_use","title":"<code>djstripe.enums.MandateType.single_use = _('Single-use')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.OrderStatus","title":"<code>djstripe.enums.OrderStatus</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class OrderStatus(Enum):\n    open = _(\"Open\")\n    submitted = _(\"Submitted\")\n    processing = _(\"Processing\")\n    complete = _(\"Complete\")\n    canceled = _(\"Canceled\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.OrderStatus-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.OrderStatus.canceled","title":"<code>djstripe.enums.OrderStatus.canceled = _('Canceled')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.OrderStatus.complete","title":"<code>djstripe.enums.OrderStatus.complete = _('Complete')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.OrderStatus.open","title":"<code>djstripe.enums.OrderStatus.open = _('Open')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.OrderStatus.processing","title":"<code>djstripe.enums.OrderStatus.processing = _('Processing')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.OrderStatus.submitted","title":"<code>djstripe.enums.OrderStatus.submitted = _('Submitted')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PaymentIntentCancellationReason","title":"<code>djstripe.enums.PaymentIntentCancellationReason</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class PaymentIntentCancellationReason(Enum):\n    # see also SetupIntentCancellationReason\n    # User provided reasons:\n    duplicate = _(\"Duplicate\")\n    fraudulent = _(\"Fraudulent\")\n    abandoned = _(\"Abandoned\")\n    requested_by_customer = _(\"Requested by Customer\")\n    # Reasons generated by Stripe internally\n    failed_invoice = _(\"Failed invoice\")\n    void_invoice = _(\"Void invoice\")\n    automatic = _(\"Automatic\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.PaymentIntentCancellationReason-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.PaymentIntentCancellationReason.abandoned","title":"<code>djstripe.enums.PaymentIntentCancellationReason.abandoned = _('Abandoned')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PaymentIntentCancellationReason.automatic","title":"<code>djstripe.enums.PaymentIntentCancellationReason.automatic = _('Automatic')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PaymentIntentCancellationReason.duplicate","title":"<code>djstripe.enums.PaymentIntentCancellationReason.duplicate = _('Duplicate')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PaymentIntentCancellationReason.failed_invoice","title":"<code>djstripe.enums.PaymentIntentCancellationReason.failed_invoice = _('Failed invoice')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PaymentIntentCancellationReason.fraudulent","title":"<code>djstripe.enums.PaymentIntentCancellationReason.fraudulent = _('Fraudulent')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PaymentIntentCancellationReason.requested_by_customer","title":"<code>djstripe.enums.PaymentIntentCancellationReason.requested_by_customer = _('Requested by Customer')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PaymentIntentCancellationReason.void_invoice","title":"<code>djstripe.enums.PaymentIntentCancellationReason.void_invoice = _('Void invoice')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PaymentIntentStatus","title":"<code>djstripe.enums.PaymentIntentStatus</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class PaymentIntentStatus(Enum):\n    requires_payment_method = _(\n        \"Intent created and requires a Payment Method to be attached.\"\n    )\n    requires_confirmation = _(\"Intent is ready to be confirmed.\")\n    requires_action = _(\"Payment Method require additional action, such as 3D secure.\")\n    processing = _(\"Required actions have been handled.\")\n    requires_capture = _(\"Capture the funds on the cards which have been put on holds.\")\n    canceled = _(\n        \"Cancellation invalidates the intent for future confirmation and \"\n        \"cannot be undone.\"\n    )\n    succeeded = _(\"The funds are in your account.\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.PaymentIntentStatus-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.PaymentIntentStatus.canceled","title":"<code>djstripe.enums.PaymentIntentStatus.canceled = _('Cancellation invalidates the intent for future confirmation and cannot be undone.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PaymentIntentStatus.processing","title":"<code>djstripe.enums.PaymentIntentStatus.processing = _('Required actions have been handled.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PaymentIntentStatus.requires_action","title":"<code>djstripe.enums.PaymentIntentStatus.requires_action = _('Payment Method require additional action, such as 3D secure.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PaymentIntentStatus.requires_capture","title":"<code>djstripe.enums.PaymentIntentStatus.requires_capture = _('Capture the funds on the cards which have been put on holds.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PaymentIntentStatus.requires_confirmation","title":"<code>djstripe.enums.PaymentIntentStatus.requires_confirmation = _('Intent is ready to be confirmed.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PaymentIntentStatus.requires_payment_method","title":"<code>djstripe.enums.PaymentIntentStatus.requires_payment_method = _('Intent created and requires a Payment Method to be attached.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PaymentIntentStatus.succeeded","title":"<code>djstripe.enums.PaymentIntentStatus.succeeded = _('The funds are in your account.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PaymentMethodType","title":"<code>djstripe.enums.PaymentMethodType</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class PaymentMethodType(Enum):\n    acss_debit = _(\"ACSS Dbit\")\n    affirm = _(\"Affirm\")\n    afterpay_clearpay = _(\"Afterpay Clearpay\")\n    alipay = _(\"Alipay\")\n    au_becs_debit = _(\"BECS Debit (Australia)\")\n    bacs_debit = _(\"Bacs Direct Debit\")\n    bancontact = _(\"Bancontact\")\n    blik = _(\"BLIK\")\n    boleto = _(\"Boleto\")\n    card = _(\"Card\")\n    card_present = _(\"Card present\")\n    cashapp = _(\"Cash App\")\n    customer_balance = _(\"Customer Balance\")\n    eps = _(\"EPS\")\n    fpx = _(\"FPX\")\n    giropay = _(\"Giropay\")\n    grabpay = _(\"Grabpay\")\n    ideal = _(\"iDEAL\")\n    interac_present = _(\"Interac (card present)\")\n    klarna = _(\"Klarna\")\n    konbini = _(\"Konbini\")\n    link = _(\"Link\")\n    oxxo = _(\"OXXO\")\n    p24 = _(\"Przelewy24\")\n    paynow = _(\"PayNow\")\n    paypal = _(\"PayPal\")\n    pix = _(\"Pix\")\n    promptpay = _(\"PromptPay\")\n    sepa_debit = _(\"SEPA Direct Debit\")\n    sofort = _(\"SOFORT\")\n    us_bank_account = _(\"ACH Direct Debit\")\n    wechat_pay = _(\"Wechat Pay\")\n    zip = _(\"Zip\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.PaymentMethodType-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.PaymentMethodType.acss_debit","title":"<code>djstripe.enums.PaymentMethodType.acss_debit = _('ACSS Dbit')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PaymentMethodType.affirm","title":"<code>djstripe.enums.PaymentMethodType.affirm = _('Affirm')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PaymentMethodType.afterpay_clearpay","title":"<code>djstripe.enums.PaymentMethodType.afterpay_clearpay = _('Afterpay Clearpay')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PaymentMethodType.alipay","title":"<code>djstripe.enums.PaymentMethodType.alipay = _('Alipay')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PaymentMethodType.au_becs_debit","title":"<code>djstripe.enums.PaymentMethodType.au_becs_debit = _('BECS Debit (Australia)')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PaymentMethodType.bacs_debit","title":"<code>djstripe.enums.PaymentMethodType.bacs_debit = _('Bacs Direct Debit')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PaymentMethodType.bancontact","title":"<code>djstripe.enums.PaymentMethodType.bancontact = _('Bancontact')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PaymentMethodType.blik","title":"<code>djstripe.enums.PaymentMethodType.blik = _('BLIK')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PaymentMethodType.boleto","title":"<code>djstripe.enums.PaymentMethodType.boleto = _('Boleto')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PaymentMethodType.card","title":"<code>djstripe.enums.PaymentMethodType.card = _('Card')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PaymentMethodType.card_present","title":"<code>djstripe.enums.PaymentMethodType.card_present = _('Card present')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PaymentMethodType.cashapp","title":"<code>djstripe.enums.PaymentMethodType.cashapp = _('Cash App')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PaymentMethodType.customer_balance","title":"<code>djstripe.enums.PaymentMethodType.customer_balance = _('Customer Balance')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PaymentMethodType.eps","title":"<code>djstripe.enums.PaymentMethodType.eps = _('EPS')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PaymentMethodType.fpx","title":"<code>djstripe.enums.PaymentMethodType.fpx = _('FPX')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PaymentMethodType.giropay","title":"<code>djstripe.enums.PaymentMethodType.giropay = _('Giropay')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PaymentMethodType.grabpay","title":"<code>djstripe.enums.PaymentMethodType.grabpay = _('Grabpay')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PaymentMethodType.ideal","title":"<code>djstripe.enums.PaymentMethodType.ideal = _('iDEAL')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PaymentMethodType.interac_present","title":"<code>djstripe.enums.PaymentMethodType.interac_present = _('Interac (card present)')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PaymentMethodType.klarna","title":"<code>djstripe.enums.PaymentMethodType.klarna = _('Klarna')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PaymentMethodType.konbini","title":"<code>djstripe.enums.PaymentMethodType.konbini = _('Konbini')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PaymentMethodType.link","title":"<code>djstripe.enums.PaymentMethodType.link = _('Link')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PaymentMethodType.oxxo","title":"<code>djstripe.enums.PaymentMethodType.oxxo = _('OXXO')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PaymentMethodType.p24","title":"<code>djstripe.enums.PaymentMethodType.p24 = _('Przelewy24')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PaymentMethodType.paynow","title":"<code>djstripe.enums.PaymentMethodType.paynow = _('PayNow')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PaymentMethodType.paypal","title":"<code>djstripe.enums.PaymentMethodType.paypal = _('PayPal')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PaymentMethodType.pix","title":"<code>djstripe.enums.PaymentMethodType.pix = _('Pix')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PaymentMethodType.promptpay","title":"<code>djstripe.enums.PaymentMethodType.promptpay = _('PromptPay')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PaymentMethodType.sepa_debit","title":"<code>djstripe.enums.PaymentMethodType.sepa_debit = _('SEPA Direct Debit')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PaymentMethodType.sofort","title":"<code>djstripe.enums.PaymentMethodType.sofort = _('SOFORT')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PaymentMethodType.us_bank_account","title":"<code>djstripe.enums.PaymentMethodType.us_bank_account = _('ACH Direct Debit')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PaymentMethodType.wechat_pay","title":"<code>djstripe.enums.PaymentMethodType.wechat_pay = _('Wechat Pay')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PaymentMethodType.zip","title":"<code>djstripe.enums.PaymentMethodType.zip = _('Zip')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PayoutFailureCode","title":"<code>djstripe.enums.PayoutFailureCode</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Payout failure error codes.</p> <p>https://stripe.com/docs/api#payout_failures</p> Source code in <code>djstripe/enums.py</code> <pre><code>class PayoutFailureCode(Enum):\n    \"\"\"\n    Payout failure error codes.\n\n    https://stripe.com/docs/api#payout_failures\n    \"\"\"\n\n    account_closed = _(\"Bank account has been closed.\")\n    account_frozen = _(\"Bank account has been frozen.\")\n    bank_account_restricted = _(\"Bank account has restrictions on payouts allowed.\")\n    bank_ownership_changed = _(\"Destination bank account has changed ownership.\")\n    could_not_process = _(\"Bank could not process payout.\")\n    debit_not_authorized = _(\"Debit transactions not approved on the bank account.\")\n    declined = _(\n        \"The bank has declined this transfer. Please contact the bank before retrying.\"\n    )\n    insufficient_funds = _(\"Stripe account has insufficient funds.\")\n    invalid_account_number = _(\"Invalid account number\")\n    incorrect_account_holder_name = _(\n        \"Your bank notified us that the bank account holder name on file is incorrect.\"\n    )\n    incorrect_account_holder_address = _(\n        \"Your bank notified us that the bank account holder address on file is\"\n        \" incorrect.\"\n    )\n    incorrect_account_holder_tax_id = _(\n        \"Your bank notified us that the bank account holder tax ID on file is\"\n        \" incorrect.\"\n    )\n    invalid_currency = _(\"Bank account does not support currency.\")\n    no_account = _(\"Bank account could not be located.\")\n    unsupported_card = _(\"Card no longer supported.\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.PayoutFailureCode-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.PayoutFailureCode.account_closed","title":"<code>djstripe.enums.PayoutFailureCode.account_closed = _('Bank account has been closed.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PayoutFailureCode.account_frozen","title":"<code>djstripe.enums.PayoutFailureCode.account_frozen = _('Bank account has been frozen.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PayoutFailureCode.bank_account_restricted","title":"<code>djstripe.enums.PayoutFailureCode.bank_account_restricted = _('Bank account has restrictions on payouts allowed.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PayoutFailureCode.bank_ownership_changed","title":"<code>djstripe.enums.PayoutFailureCode.bank_ownership_changed = _('Destination bank account has changed ownership.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PayoutFailureCode.could_not_process","title":"<code>djstripe.enums.PayoutFailureCode.could_not_process = _('Bank could not process payout.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PayoutFailureCode.debit_not_authorized","title":"<code>djstripe.enums.PayoutFailureCode.debit_not_authorized = _('Debit transactions not approved on the bank account.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PayoutFailureCode.declined","title":"<code>djstripe.enums.PayoutFailureCode.declined = _('The bank has declined this transfer. Please contact the bank before retrying.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PayoutFailureCode.incorrect_account_holder_address","title":"<code>djstripe.enums.PayoutFailureCode.incorrect_account_holder_address = _('Your bank notified us that the bank account holder address on file is incorrect.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PayoutFailureCode.incorrect_account_holder_name","title":"<code>djstripe.enums.PayoutFailureCode.incorrect_account_holder_name = _('Your bank notified us that the bank account holder name on file is incorrect.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PayoutFailureCode.incorrect_account_holder_tax_id","title":"<code>djstripe.enums.PayoutFailureCode.incorrect_account_holder_tax_id = _('Your bank notified us that the bank account holder tax ID on file is incorrect.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PayoutFailureCode.insufficient_funds","title":"<code>djstripe.enums.PayoutFailureCode.insufficient_funds = _('Stripe account has insufficient funds.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PayoutFailureCode.invalid_account_number","title":"<code>djstripe.enums.PayoutFailureCode.invalid_account_number = _('Invalid account number')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PayoutFailureCode.invalid_currency","title":"<code>djstripe.enums.PayoutFailureCode.invalid_currency = _('Bank account does not support currency.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PayoutFailureCode.no_account","title":"<code>djstripe.enums.PayoutFailureCode.no_account = _('Bank account could not be located.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PayoutFailureCode.unsupported_card","title":"<code>djstripe.enums.PayoutFailureCode.unsupported_card = _('Card no longer supported.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PayoutMethod","title":"<code>djstripe.enums.PayoutMethod</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class PayoutMethod(Enum):\n    standard = _(\"Standard\")\n    instant = _(\"Instant\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.PayoutMethod-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.PayoutMethod.instant","title":"<code>djstripe.enums.PayoutMethod.instant = _('Instant')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PayoutMethod.standard","title":"<code>djstripe.enums.PayoutMethod.standard = _('Standard')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PayoutSourceType","title":"<code>djstripe.enums.PayoutSourceType</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class PayoutSourceType(Enum):\n    bank_account = _(\"Bank account\")\n    fpx = _(\"Financial Process Exchange (FPX)\")\n    card = _(\"Card\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.PayoutSourceType-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.PayoutSourceType.bank_account","title":"<code>djstripe.enums.PayoutSourceType.bank_account = _('Bank account')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PayoutSourceType.card","title":"<code>djstripe.enums.PayoutSourceType.card = _('Card')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PayoutSourceType.fpx","title":"<code>djstripe.enums.PayoutSourceType.fpx = _('Financial Process Exchange (FPX)')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PayoutStatus","title":"<code>djstripe.enums.PayoutStatus</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class PayoutStatus(Enum):\n    paid = _(\"Paid\")\n    pending = _(\"Pending\")\n    in_transit = _(\"In transit\")\n    canceled = _(\"Canceled\")\n    failed = _(\"Failed\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.PayoutStatus-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.PayoutStatus.canceled","title":"<code>djstripe.enums.PayoutStatus.canceled = _('Canceled')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PayoutStatus.failed","title":"<code>djstripe.enums.PayoutStatus.failed = _('Failed')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PayoutStatus.in_transit","title":"<code>djstripe.enums.PayoutStatus.in_transit = _('In transit')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PayoutStatus.paid","title":"<code>djstripe.enums.PayoutStatus.paid = _('Paid')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PayoutStatus.pending","title":"<code>djstripe.enums.PayoutStatus.pending = _('Pending')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PayoutType","title":"<code>djstripe.enums.PayoutType</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class PayoutType(Enum):\n    bank_account = _(\"Bank account\")\n    card = _(\"Card\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.PayoutType-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.PayoutType.bank_account","title":"<code>djstripe.enums.PayoutType.bank_account = _('Bank account')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PayoutType.card","title":"<code>djstripe.enums.PayoutType.card = _('Card')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PlanAggregateUsage","title":"<code>djstripe.enums.PlanAggregateUsage</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class PlanAggregateUsage(Enum):\n    last_during_period = _(\"Last during period\")\n    last_ever = _(\"Last ever\")\n    max = _(\"Max\")\n    sum = _(\"Sum\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.PlanAggregateUsage-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.PlanAggregateUsage.last_during_period","title":"<code>djstripe.enums.PlanAggregateUsage.last_during_period = _('Last during period')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PlanAggregateUsage.last_ever","title":"<code>djstripe.enums.PlanAggregateUsage.last_ever = _('Last ever')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PlanAggregateUsage.max","title":"<code>djstripe.enums.PlanAggregateUsage.max = _('Max')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PlanAggregateUsage.sum","title":"<code>djstripe.enums.PlanAggregateUsage.sum = _('Sum')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PlanInterval","title":"<code>djstripe.enums.PlanInterval</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class PlanInterval(Enum):\n    day = _(\"Day\")\n    week = _(\"Week\")\n    month = _(\"Month\")\n    year = _(\"Year\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.PlanInterval-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.PlanInterval.day","title":"<code>djstripe.enums.PlanInterval.day = _('Day')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PlanInterval.month","title":"<code>djstripe.enums.PlanInterval.month = _('Month')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PlanInterval.week","title":"<code>djstripe.enums.PlanInterval.week = _('Week')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PlanInterval.year","title":"<code>djstripe.enums.PlanInterval.year = _('Year')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PriceTiersMode","title":"<code>djstripe.enums.PriceTiersMode</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class PriceTiersMode(Enum):\n    graduated = _(\"Graduated\")\n    volume = _(\"Volume-based\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.PriceTiersMode-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.PriceTiersMode.graduated","title":"<code>djstripe.enums.PriceTiersMode.graduated = _('Graduated')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PriceTiersMode.volume","title":"<code>djstripe.enums.PriceTiersMode.volume = _('Volume-based')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PriceType","title":"<code>djstripe.enums.PriceType</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class PriceType(Enum):\n    one_time = _(\"One-time\")\n    recurring = _(\"Recurring\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.PriceType-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.PriceType.one_time","title":"<code>djstripe.enums.PriceType.one_time = _('One-time')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PriceType.recurring","title":"<code>djstripe.enums.PriceType.recurring = _('Recurring')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PriceUsageType","title":"<code>djstripe.enums.PriceUsageType</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class PriceUsageType(Enum):\n    metered = _(\"Metered\")\n    licensed = _(\"Licensed\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.PriceUsageType-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.PriceUsageType.licensed","title":"<code>djstripe.enums.PriceUsageType.licensed = _('Licensed')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.PriceUsageType.metered","title":"<code>djstripe.enums.PriceUsageType.metered = _('Metered')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ProductType","title":"<code>djstripe.enums.ProductType</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class ProductType(Enum):\n    good = _(\"Good\")\n    service = _(\"Service\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.ProductType-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.ProductType.good","title":"<code>djstripe.enums.ProductType.good = _('Good')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ProductType.service","title":"<code>djstripe.enums.ProductType.service = _('Service')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.RefundFailureReason","title":"<code>djstripe.enums.RefundFailureReason</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class RefundFailureReason(Enum):\n    lost_or_stolen_card = _(\"Lost or stolen card\")\n    expired_or_canceled_card = _(\"Expired or canceled card\")\n    unknown = _(\"Unknown\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.RefundFailureReason-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.RefundFailureReason.expired_or_canceled_card","title":"<code>djstripe.enums.RefundFailureReason.expired_or_canceled_card = _('Expired or canceled card')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.RefundFailureReason.lost_or_stolen_card","title":"<code>djstripe.enums.RefundFailureReason.lost_or_stolen_card = _('Lost or stolen card')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.RefundFailureReason.unknown","title":"<code>djstripe.enums.RefundFailureReason.unknown = _('Unknown')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.RefundReason","title":"<code>djstripe.enums.RefundReason</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class RefundReason(Enum):\n    duplicate = _(\"Duplicate charge\")\n    fraudulent = _(\"Fraudulent\")\n    requested_by_customer = _(\"Requested by customer\")\n    expired_uncaptured_charge = _(\"Expired uncaptured charge\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.RefundReason-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.RefundReason.duplicate","title":"<code>djstripe.enums.RefundReason.duplicate = _('Duplicate charge')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.RefundReason.expired_uncaptured_charge","title":"<code>djstripe.enums.RefundReason.expired_uncaptured_charge = _('Expired uncaptured charge')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.RefundReason.fraudulent","title":"<code>djstripe.enums.RefundReason.fraudulent = _('Fraudulent')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.RefundReason.requested_by_customer","title":"<code>djstripe.enums.RefundReason.requested_by_customer = _('Requested by customer')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.RefundStatus","title":"<code>djstripe.enums.RefundStatus</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class RefundStatus(Enum):\n    pending = _(\"Pending\")\n    succeeded = _(\"Succeeded\")\n    failed = _(\"Failed\")\n    canceled = _(\"Canceled\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.RefundStatus-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.RefundStatus.canceled","title":"<code>djstripe.enums.RefundStatus.canceled = _('Canceled')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.RefundStatus.failed","title":"<code>djstripe.enums.RefundStatus.failed = _('Failed')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.RefundStatus.pending","title":"<code>djstripe.enums.RefundStatus.pending = _('Pending')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.RefundStatus.succeeded","title":"<code>djstripe.enums.RefundStatus.succeeded = _('Succeeded')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ScheduledQueryRunStatus","title":"<code>djstripe.enums.ScheduledQueryRunStatus</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class ScheduledQueryRunStatus(Enum):\n    canceled = _(\"Canceled\")\n    failed = _(\"Failed\")\n    timed_out = _(\"Timed out\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.ScheduledQueryRunStatus-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.ScheduledQueryRunStatus.canceled","title":"<code>djstripe.enums.ScheduledQueryRunStatus.canceled = _('Canceled')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ScheduledQueryRunStatus.failed","title":"<code>djstripe.enums.ScheduledQueryRunStatus.failed = _('Failed')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ScheduledQueryRunStatus.timed_out","title":"<code>djstripe.enums.ScheduledQueryRunStatus.timed_out = _('Timed out')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SessionMode","title":"<code>djstripe.enums.SessionMode</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class SessionMode(Enum):\n    payment = _(\"Payment\")\n    setup = _(\"Setup\")\n    subscription = _(\"Subscription\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.SessionMode-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.SessionMode.payment","title":"<code>djstripe.enums.SessionMode.payment = _('Payment')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SessionMode.setup","title":"<code>djstripe.enums.SessionMode.setup = _('Setup')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SessionMode.subscription","title":"<code>djstripe.enums.SessionMode.subscription = _('Subscription')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SessionStatus","title":"<code>djstripe.enums.SessionStatus</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class SessionStatus(Enum):\n    open = _(\"Open\")\n    complete = _(\"Complete\")\n    expired = _(\"Expired\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.SessionStatus-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.SessionStatus.complete","title":"<code>djstripe.enums.SessionStatus.complete = _('Complete')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SessionStatus.expired","title":"<code>djstripe.enums.SessionStatus.expired = _('Expired')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SessionStatus.open","title":"<code>djstripe.enums.SessionStatus.open = _('Open')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SetupIntentCancellationReason","title":"<code>djstripe.enums.SetupIntentCancellationReason</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class SetupIntentCancellationReason(Enum):\n    # see also PaymentIntentCancellationReason\n    abandoned = _(\"Abandoned\")\n    requested_by_customer = _(\"Requested by Customer\")\n    duplicate = _(\"Duplicate\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.SetupIntentCancellationReason-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.SetupIntentCancellationReason.abandoned","title":"<code>djstripe.enums.SetupIntentCancellationReason.abandoned = _('Abandoned')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SetupIntentCancellationReason.duplicate","title":"<code>djstripe.enums.SetupIntentCancellationReason.duplicate = _('Duplicate')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SetupIntentCancellationReason.requested_by_customer","title":"<code>djstripe.enums.SetupIntentCancellationReason.requested_by_customer = _('Requested by Customer')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SetupIntentStatus","title":"<code>djstripe.enums.SetupIntentStatus</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class SetupIntentStatus(Enum):\n    requires_payment_method = _(\n        \"Intent created and requires a Payment Method to be attached.\"\n    )\n    requires_confirmation = _(\"Intent is ready to be confirmed.\")\n    requires_action = _(\"Payment Method require additional action, such as 3D secure.\")\n    processing = _(\"Required actions have been handled.\")\n    canceled = _(\n        \"Cancellation invalidates the intent for future confirmation and \"\n        \"cannot be undone.\"\n    )\n    succeeded = _(\n        \"Setup was successful and the payment method is optimized for future payments.\"\n    )\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.SetupIntentStatus-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.SetupIntentStatus.canceled","title":"<code>djstripe.enums.SetupIntentStatus.canceled = _('Cancellation invalidates the intent for future confirmation and cannot be undone.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SetupIntentStatus.processing","title":"<code>djstripe.enums.SetupIntentStatus.processing = _('Required actions have been handled.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SetupIntentStatus.requires_action","title":"<code>djstripe.enums.SetupIntentStatus.requires_action = _('Payment Method require additional action, such as 3D secure.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SetupIntentStatus.requires_confirmation","title":"<code>djstripe.enums.SetupIntentStatus.requires_confirmation = _('Intent is ready to be confirmed.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SetupIntentStatus.requires_payment_method","title":"<code>djstripe.enums.SetupIntentStatus.requires_payment_method = _('Intent created and requires a Payment Method to be attached.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SetupIntentStatus.succeeded","title":"<code>djstripe.enums.SetupIntentStatus.succeeded = _('Setup was successful and the payment method is optimized for future payments.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ShippingRateTaxBehavior","title":"<code>djstripe.enums.ShippingRateTaxBehavior</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class ShippingRateTaxBehavior(Enum):\n    inclusive = _(\"Inclusive\")\n    exclusive = _(\"Exclusive\")\n    unspecified = _(\"Unspecified\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.ShippingRateTaxBehavior-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.ShippingRateTaxBehavior.exclusive","title":"<code>djstripe.enums.ShippingRateTaxBehavior.exclusive = _('Exclusive')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ShippingRateTaxBehavior.inclusive","title":"<code>djstripe.enums.ShippingRateTaxBehavior.inclusive = _('Inclusive')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ShippingRateTaxBehavior.unspecified","title":"<code>djstripe.enums.ShippingRateTaxBehavior.unspecified = _('Unspecified')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.ShippingRateType","title":"<code>djstripe.enums.ShippingRateType</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class ShippingRateType(Enum):\n    fixed_amount = _(\"Fixed Amount\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.ShippingRateType-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.ShippingRateType.fixed_amount","title":"<code>djstripe.enums.ShippingRateType.fixed_amount = _('Fixed Amount')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SourceCodeVerificationStatus","title":"<code>djstripe.enums.SourceCodeVerificationStatus</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class SourceCodeVerificationStatus(Enum):\n    pending = _(\"Pending\")\n    succeeded = _(\"Succeeded\")\n    failed = _(\"Failed\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.SourceCodeVerificationStatus-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.SourceCodeVerificationStatus.failed","title":"<code>djstripe.enums.SourceCodeVerificationStatus.failed = _('Failed')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SourceCodeVerificationStatus.pending","title":"<code>djstripe.enums.SourceCodeVerificationStatus.pending = _('Pending')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SourceCodeVerificationStatus.succeeded","title":"<code>djstripe.enums.SourceCodeVerificationStatus.succeeded = _('Succeeded')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SourceFlow","title":"<code>djstripe.enums.SourceFlow</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class SourceFlow(Enum):\n    redirect = _(\"Redirect\")\n    receiver = _(\"Receiver\")\n    code_verification = _(\"Code verification\")\n    none = _(\"None\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.SourceFlow-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.SourceFlow.code_verification","title":"<code>djstripe.enums.SourceFlow.code_verification = _('Code verification')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SourceFlow.none","title":"<code>djstripe.enums.SourceFlow.none = _('None')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SourceFlow.receiver","title":"<code>djstripe.enums.SourceFlow.receiver = _('Receiver')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SourceFlow.redirect","title":"<code>djstripe.enums.SourceFlow.redirect = _('Redirect')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SourceRedirectFailureReason","title":"<code>djstripe.enums.SourceRedirectFailureReason</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class SourceRedirectFailureReason(Enum):\n    user_abort = _(\"User-aborted\")\n    declined = _(\"Declined\")\n    processing_error = _(\"Processing error\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.SourceRedirectFailureReason-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.SourceRedirectFailureReason.declined","title":"<code>djstripe.enums.SourceRedirectFailureReason.declined = _('Declined')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SourceRedirectFailureReason.processing_error","title":"<code>djstripe.enums.SourceRedirectFailureReason.processing_error = _('Processing error')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SourceRedirectFailureReason.user_abort","title":"<code>djstripe.enums.SourceRedirectFailureReason.user_abort = _('User-aborted')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SourceRedirectStatus","title":"<code>djstripe.enums.SourceRedirectStatus</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class SourceRedirectStatus(Enum):\n    pending = _(\"Pending\")\n    succeeded = _(\"Succeeded\")\n    not_required = _(\"Not required\")\n    failed = _(\"Failed\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.SourceRedirectStatus-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.SourceRedirectStatus.failed","title":"<code>djstripe.enums.SourceRedirectStatus.failed = _('Failed')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SourceRedirectStatus.not_required","title":"<code>djstripe.enums.SourceRedirectStatus.not_required = _('Not required')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SourceRedirectStatus.pending","title":"<code>djstripe.enums.SourceRedirectStatus.pending = _('Pending')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SourceRedirectStatus.succeeded","title":"<code>djstripe.enums.SourceRedirectStatus.succeeded = _('Succeeded')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SourceStatus","title":"<code>djstripe.enums.SourceStatus</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class SourceStatus(Enum):\n    canceled = _(\"Canceled\")\n    chargeable = _(\"Chargeable\")\n    consumed = _(\"Consumed\")\n    failed = _(\"Failed\")\n    pending = _(\"Pending\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.SourceStatus-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.SourceStatus.canceled","title":"<code>djstripe.enums.SourceStatus.canceled = _('Canceled')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SourceStatus.chargeable","title":"<code>djstripe.enums.SourceStatus.chargeable = _('Chargeable')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SourceStatus.consumed","title":"<code>djstripe.enums.SourceStatus.consumed = _('Consumed')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SourceStatus.failed","title":"<code>djstripe.enums.SourceStatus.failed = _('Failed')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SourceStatus.pending","title":"<code>djstripe.enums.SourceStatus.pending = _('Pending')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SourceType","title":"<code>djstripe.enums.SourceType</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class SourceType(Enum):\n    ach_credit_transfer = _(\"ACH Credit Transfer\")\n    ach_debit = _(\"ACH Debit\")\n    acss_debit = _(\"ACSS Debit\")\n    alipay = _(\"Alipay\")\n    au_becs_debit = _(\"BECS Debit (AU)\")\n    bancontact = _(\"Bancontact\")\n    bitcoin = _(\"Bitcoin (Legacy)\")\n    card = _(\"Card\")\n    card_present = _(\"Card present\")\n    eps = _(\"EPS\")\n    giropay = _(\"Giropay\")\n    ideal = _(\"iDEAL\")\n    klarna = _(\"Klarna\")\n    multibanco = _(\"Multibanco\")\n    p24 = _(\"P24\")\n    paper_check = _(\"Paper check\")\n    sepa_credit_transfer = _(\"SEPA credit transfer\")\n    sepa_debit = _(\"SEPA Direct Debit\")\n    sofort = _(\"SOFORT\")\n    three_d_secure = _(\"3D Secure\")\n    wechat = _(\"WeChat\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.SourceType-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.SourceType.ach_credit_transfer","title":"<code>djstripe.enums.SourceType.ach_credit_transfer = _('ACH Credit Transfer')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SourceType.ach_debit","title":"<code>djstripe.enums.SourceType.ach_debit = _('ACH Debit')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SourceType.acss_debit","title":"<code>djstripe.enums.SourceType.acss_debit = _('ACSS Debit')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SourceType.alipay","title":"<code>djstripe.enums.SourceType.alipay = _('Alipay')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SourceType.au_becs_debit","title":"<code>djstripe.enums.SourceType.au_becs_debit = _('BECS Debit (AU)')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SourceType.bancontact","title":"<code>djstripe.enums.SourceType.bancontact = _('Bancontact')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SourceType.bitcoin","title":"<code>djstripe.enums.SourceType.bitcoin = _('Bitcoin (Legacy)')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SourceType.card","title":"<code>djstripe.enums.SourceType.card = _('Card')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SourceType.card_present","title":"<code>djstripe.enums.SourceType.card_present = _('Card present')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SourceType.eps","title":"<code>djstripe.enums.SourceType.eps = _('EPS')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SourceType.giropay","title":"<code>djstripe.enums.SourceType.giropay = _('Giropay')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SourceType.ideal","title":"<code>djstripe.enums.SourceType.ideal = _('iDEAL')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SourceType.klarna","title":"<code>djstripe.enums.SourceType.klarna = _('Klarna')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SourceType.multibanco","title":"<code>djstripe.enums.SourceType.multibanco = _('Multibanco')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SourceType.p24","title":"<code>djstripe.enums.SourceType.p24 = _('P24')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SourceType.paper_check","title":"<code>djstripe.enums.SourceType.paper_check = _('Paper check')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SourceType.sepa_credit_transfer","title":"<code>djstripe.enums.SourceType.sepa_credit_transfer = _('SEPA credit transfer')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SourceType.sepa_debit","title":"<code>djstripe.enums.SourceType.sepa_debit = _('SEPA Direct Debit')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SourceType.sofort","title":"<code>djstripe.enums.SourceType.sofort = _('SOFORT')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SourceType.three_d_secure","title":"<code>djstripe.enums.SourceType.three_d_secure = _('3D Secure')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SourceType.wechat","title":"<code>djstripe.enums.SourceType.wechat = _('WeChat')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SourceUsage","title":"<code>djstripe.enums.SourceUsage</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class SourceUsage(Enum):\n    reusable = _(\"Reusable\")\n    single_use = _(\"Single-use\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.SourceUsage-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.SourceUsage.reusable","title":"<code>djstripe.enums.SourceUsage.reusable = _('Reusable')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SourceUsage.single_use","title":"<code>djstripe.enums.SourceUsage.single_use = _('Single-use')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SubscriptionProrationBehavior","title":"<code>djstripe.enums.SubscriptionProrationBehavior</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class SubscriptionProrationBehavior(Enum):\n    create_prorations = _(\"Create prorations\")\n    always_invoice = _(\"Always invoice\")\n    none = _(\"None\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.SubscriptionProrationBehavior-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.SubscriptionProrationBehavior.always_invoice","title":"<code>djstripe.enums.SubscriptionProrationBehavior.always_invoice = _('Always invoice')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SubscriptionProrationBehavior.create_prorations","title":"<code>djstripe.enums.SubscriptionProrationBehavior.create_prorations = _('Create prorations')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SubscriptionProrationBehavior.none","title":"<code>djstripe.enums.SubscriptionProrationBehavior.none = _('None')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SubscriptionScheduleEndBehavior","title":"<code>djstripe.enums.SubscriptionScheduleEndBehavior</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class SubscriptionScheduleEndBehavior(Enum):\n    release = _(\"Release\")\n    cancel = _(\"Cancel\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.SubscriptionScheduleEndBehavior-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.SubscriptionScheduleEndBehavior.cancel","title":"<code>djstripe.enums.SubscriptionScheduleEndBehavior.cancel = _('Cancel')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SubscriptionScheduleEndBehavior.release","title":"<code>djstripe.enums.SubscriptionScheduleEndBehavior.release = _('Release')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SubscriptionScheduleStatus","title":"<code>djstripe.enums.SubscriptionScheduleStatus</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class SubscriptionScheduleStatus(Enum):\n    not_started = _(\"Not started\")\n    active = _(\"Active\")\n    completed = _(\"Completed\")\n    released = _(\"Released\")\n    canceled = _(\"Canceled\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.SubscriptionScheduleStatus-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.SubscriptionScheduleStatus.active","title":"<code>djstripe.enums.SubscriptionScheduleStatus.active = _('Active')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SubscriptionScheduleStatus.canceled","title":"<code>djstripe.enums.SubscriptionScheduleStatus.canceled = _('Canceled')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SubscriptionScheduleStatus.completed","title":"<code>djstripe.enums.SubscriptionScheduleStatus.completed = _('Completed')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SubscriptionScheduleStatus.not_started","title":"<code>djstripe.enums.SubscriptionScheduleStatus.not_started = _('Not started')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SubscriptionScheduleStatus.released","title":"<code>djstripe.enums.SubscriptionScheduleStatus.released = _('Released')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SubscriptionStatus","title":"<code>djstripe.enums.SubscriptionStatus</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class SubscriptionStatus(Enum):\n    incomplete = _(\"Incomplete\")\n    incomplete_expired = _(\"Incomplete Expired\")\n    trialing = _(\"Trialing\")\n    active = _(\"Active\")\n    past_due = _(\"Past due\")\n    canceled = _(\"Canceled\")\n    unpaid = _(\"Unpaid\")\n    paused = _(\"Paused\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.SubscriptionStatus-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.SubscriptionStatus.active","title":"<code>djstripe.enums.SubscriptionStatus.active = _('Active')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SubscriptionStatus.canceled","title":"<code>djstripe.enums.SubscriptionStatus.canceled = _('Canceled')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SubscriptionStatus.incomplete","title":"<code>djstripe.enums.SubscriptionStatus.incomplete = _('Incomplete')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SubscriptionStatus.incomplete_expired","title":"<code>djstripe.enums.SubscriptionStatus.incomplete_expired = _('Incomplete Expired')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SubscriptionStatus.past_due","title":"<code>djstripe.enums.SubscriptionStatus.past_due = _('Past due')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SubscriptionStatus.paused","title":"<code>djstripe.enums.SubscriptionStatus.paused = _('Paused')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SubscriptionStatus.trialing","title":"<code>djstripe.enums.SubscriptionStatus.trialing = _('Trialing')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.SubscriptionStatus.unpaid","title":"<code>djstripe.enums.SubscriptionStatus.unpaid = _('Unpaid')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.TaxIdType","title":"<code>djstripe.enums.TaxIdType</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class TaxIdType(Enum):\n    ae_trn = _(\"AE TRN\")\n    au_abn = _(\"AU ABN\")\n    br_cnp = _(\"BR CNP\")\n    br_cpf = _(\"BR CPF\")\n    ca_bn = _(\"CA BN\")\n    ca_qst = _(\"CA QST\")\n    ch_vat = _(\"CH VAT\")\n    cl_tin = _(\"CL TIN\")\n    es_cif = _(\"ES CIF\")\n    eu_vat = _(\"EU VAT\")\n    hk_br = _(\"HK BR\")\n    id_npw = _(\"ID NPW\")\n    in_gst = _(\"IN GST\")\n    jp_cn = _(\"JP CN\")\n    jp_rn = _(\"JP RN\")\n    kr_brn = _(\"KR BRN\")\n    li_uid = _(\"LI UID\")\n    mx_rfc = _(\"MX RFC\")\n    my_frp = _(\"MY FRP\")\n    my_itn = _(\"MY ITN\")\n    my_sst = _(\"MY SST\")\n    no_vat = _(\"NO VAT\")\n    nz_gst = _(\"NZ GST\")\n    ru_inn = _(\"RU INN\")\n    ru_kpp = _(\"RU KPP\")\n    sa_vat = _(\"SA VAT\")\n    sg_gst = _(\"SG GST\")\n    sg_uen = _(\"SG UEN\")\n    th_vat = _(\"TH VAT\")\n    tw_vat = _(\"TW VAT\")\n    us_ein = _(\"US EIN\")\n    za_vat = _(\"ZA VAT\")\n    unknown = _(\"Unknown\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.TaxIdType-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.TaxIdType.ae_trn","title":"<code>djstripe.enums.TaxIdType.ae_trn = _('AE TRN')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.TaxIdType.au_abn","title":"<code>djstripe.enums.TaxIdType.au_abn = _('AU ABN')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.TaxIdType.br_cnp","title":"<code>djstripe.enums.TaxIdType.br_cnp = _('BR CNP')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.TaxIdType.br_cpf","title":"<code>djstripe.enums.TaxIdType.br_cpf = _('BR CPF')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.TaxIdType.ca_bn","title":"<code>djstripe.enums.TaxIdType.ca_bn = _('CA BN')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.TaxIdType.ca_qst","title":"<code>djstripe.enums.TaxIdType.ca_qst = _('CA QST')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.TaxIdType.ch_vat","title":"<code>djstripe.enums.TaxIdType.ch_vat = _('CH VAT')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.TaxIdType.cl_tin","title":"<code>djstripe.enums.TaxIdType.cl_tin = _('CL TIN')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.TaxIdType.es_cif","title":"<code>djstripe.enums.TaxIdType.es_cif = _('ES CIF')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.TaxIdType.eu_vat","title":"<code>djstripe.enums.TaxIdType.eu_vat = _('EU VAT')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.TaxIdType.hk_br","title":"<code>djstripe.enums.TaxIdType.hk_br = _('HK BR')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.TaxIdType.id_npw","title":"<code>djstripe.enums.TaxIdType.id_npw = _('ID NPW')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.TaxIdType.in_gst","title":"<code>djstripe.enums.TaxIdType.in_gst = _('IN GST')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.TaxIdType.jp_cn","title":"<code>djstripe.enums.TaxIdType.jp_cn = _('JP CN')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.TaxIdType.jp_rn","title":"<code>djstripe.enums.TaxIdType.jp_rn = _('JP RN')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.TaxIdType.kr_brn","title":"<code>djstripe.enums.TaxIdType.kr_brn = _('KR BRN')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.TaxIdType.li_uid","title":"<code>djstripe.enums.TaxIdType.li_uid = _('LI UID')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.TaxIdType.mx_rfc","title":"<code>djstripe.enums.TaxIdType.mx_rfc = _('MX RFC')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.TaxIdType.my_frp","title":"<code>djstripe.enums.TaxIdType.my_frp = _('MY FRP')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.TaxIdType.my_itn","title":"<code>djstripe.enums.TaxIdType.my_itn = _('MY ITN')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.TaxIdType.my_sst","title":"<code>djstripe.enums.TaxIdType.my_sst = _('MY SST')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.TaxIdType.no_vat","title":"<code>djstripe.enums.TaxIdType.no_vat = _('NO VAT')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.TaxIdType.nz_gst","title":"<code>djstripe.enums.TaxIdType.nz_gst = _('NZ GST')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.TaxIdType.ru_inn","title":"<code>djstripe.enums.TaxIdType.ru_inn = _('RU INN')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.TaxIdType.ru_kpp","title":"<code>djstripe.enums.TaxIdType.ru_kpp = _('RU KPP')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.TaxIdType.sa_vat","title":"<code>djstripe.enums.TaxIdType.sa_vat = _('SA VAT')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.TaxIdType.sg_gst","title":"<code>djstripe.enums.TaxIdType.sg_gst = _('SG GST')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.TaxIdType.sg_uen","title":"<code>djstripe.enums.TaxIdType.sg_uen = _('SG UEN')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.TaxIdType.th_vat","title":"<code>djstripe.enums.TaxIdType.th_vat = _('TH VAT')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.TaxIdType.tw_vat","title":"<code>djstripe.enums.TaxIdType.tw_vat = _('TW VAT')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.TaxIdType.unknown","title":"<code>djstripe.enums.TaxIdType.unknown = _('Unknown')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.TaxIdType.us_ein","title":"<code>djstripe.enums.TaxIdType.us_ein = _('US EIN')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.TaxIdType.za_vat","title":"<code>djstripe.enums.TaxIdType.za_vat = _('ZA VAT')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.VerificationSessionStatus","title":"<code>djstripe.enums.VerificationSessionStatus</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class VerificationSessionStatus(Enum):\n    \"\"\"\n    https://stripe.com/docs/api/identity/verification_sessions/object#identity_verification_session_object-status\n    \"\"\"\n\n    requires_input = _(\"Requires input\")\n    processing = _(\"Processing\")\n    verified = _(\"Verified\")\n    canceled = _(\"Canceled\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.VerificationSessionStatus-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.VerificationSessionStatus.canceled","title":"<code>djstripe.enums.VerificationSessionStatus.canceled = _('Canceled')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.VerificationSessionStatus.processing","title":"<code>djstripe.enums.VerificationSessionStatus.processing = _('Processing')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.VerificationSessionStatus.requires_input","title":"<code>djstripe.enums.VerificationSessionStatus.requires_input = _('Requires input')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.VerificationSessionStatus.verified","title":"<code>djstripe.enums.VerificationSessionStatus.verified = _('Verified')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.VerificationType","title":"<code>djstripe.enums.VerificationType</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class VerificationType(Enum):\n    \"\"\"\n    https://stripe.com/docs/api/identity/verification_sessions/object#identity_verification_session_object-type\n    \"\"\"\n\n    document = _(\"Document\")\n    id_number = _(\"ID number\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.VerificationType-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.VerificationType.document","title":"<code>djstripe.enums.VerificationType.document = _('Document')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.VerificationType.id_number","title":"<code>djstripe.enums.VerificationType.id_number = _('ID number')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.WebhookEndpointStatus","title":"<code>djstripe.enums.WebhookEndpointStatus</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>djstripe/enums.py</code> <pre><code>class WebhookEndpointStatus(Enum):\n    enabled = _(\"enabled\")\n    disabled = _(\"disabled\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.WebhookEndpointStatus-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.WebhookEndpointStatus.disabled","title":"<code>djstripe.enums.WebhookEndpointStatus.disabled = _('disabled')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.WebhookEndpointStatus.enabled","title":"<code>djstripe.enums.WebhookEndpointStatus.enabled = _('enabled')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.WebhookEndpointValidation","title":"<code>djstripe.enums.WebhookEndpointValidation</code>","text":"<p>               Bases: <code>Enum</code></p> <p>An enum to specific the choices for WebhookEndpoint Validation.</p> Source code in <code>djstripe/enums.py</code> <pre><code>class WebhookEndpointValidation(Enum):\n    \"\"\"An enum to specific the choices for WebhookEndpoint Validation.\"\"\"\n\n    verify_signature = _(\"Verify Signature\")\n    retrieve_event = _(\"Retrieve Event\")\n    none = _(\"None (NOT RECOMMENDED)\")\n</code></pre>"},{"location":"reference/enums/#djstripe.enums.WebhookEndpointValidation-attributes","title":"Attributes","text":""},{"location":"reference/enums/#djstripe.enums.WebhookEndpointValidation.none","title":"<code>djstripe.enums.WebhookEndpointValidation.none = _('None (NOT RECOMMENDED)')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.WebhookEndpointValidation.retrieve_event","title":"<code>djstripe.enums.WebhookEndpointValidation.retrieve_event = _('Retrieve Event')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/enums/#djstripe.enums.WebhookEndpointValidation.verify_signature","title":"<code>djstripe.enums.WebhookEndpointValidation.verify_signature = _('Verify Signature')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/managers/","title":"Managers","text":"<p>dj-stripe model managers</p>"},{"location":"reference/managers/#djstripe.managers-classes","title":"Classes","text":""},{"location":"reference/managers/#djstripe.managers.ChargeManager","title":"<code>djstripe.managers.ChargeManager</code>","text":"<p>               Bases: <code>Manager</code></p> <p>Manager used by models.Charge.</p> Source code in <code>djstripe/managers.py</code> <pre><code>class ChargeManager(models.Manager):\n    \"\"\"Manager used by models.Charge.\"\"\"\n\n    def during(self, year, month):\n        \"\"\"Return Charges between a certain time range based on `created`.\"\"\"\n        return self.filter(created__year=year, created__month=month)\n\n    def paid_totals_for(self, year, month):\n        \"\"\"\n        Return paid Charges during a certain year, month with total amount,\n        fee and refunded annotated.\n        \"\"\"\n        return (\n            self.during(year, month)\n            .filter(paid=True)\n            .aggregate(\n                total_amount=models.Sum(\"amount\"),\n                total_refunded=models.Sum(\"amount_refunded\"),\n            )\n        )\n</code></pre>"},{"location":"reference/managers/#djstripe.managers.ChargeManager-functions","title":"Functions","text":""},{"location":"reference/managers/#djstripe.managers.ChargeManager.during","title":"<code>djstripe.managers.ChargeManager.during(year, month)</code>","text":"<p>Return Charges between a certain time range based on <code>created</code>.</p> Source code in <code>djstripe/managers.py</code> <pre><code>def during(self, year, month):\n    \"\"\"Return Charges between a certain time range based on `created`.\"\"\"\n    return self.filter(created__year=year, created__month=month)\n</code></pre>"},{"location":"reference/managers/#djstripe.managers.ChargeManager.paid_totals_for","title":"<code>djstripe.managers.ChargeManager.paid_totals_for(year, month)</code>","text":"<p>Return paid Charges during a certain year, month with total amount, fee and refunded annotated.</p> Source code in <code>djstripe/managers.py</code> <pre><code>def paid_totals_for(self, year, month):\n    \"\"\"\n    Return paid Charges during a certain year, month with total amount,\n    fee and refunded annotated.\n    \"\"\"\n    return (\n        self.during(year, month)\n        .filter(paid=True)\n        .aggregate(\n            total_amount=models.Sum(\"amount\"),\n            total_refunded=models.Sum(\"amount_refunded\"),\n        )\n    )\n</code></pre>"},{"location":"reference/managers/#djstripe.managers.StripeModelManager","title":"<code>djstripe.managers.StripeModelManager</code>","text":"<p>               Bases: <code>Manager</code></p> <p>Manager used in StripeModel.</p> Source code in <code>djstripe/managers.py</code> <pre><code>class StripeModelManager(models.Manager):\n    \"\"\"Manager used in StripeModel.\"\"\"\n\n    pass\n</code></pre>"},{"location":"reference/managers/#djstripe.managers.SubscriptionManager","title":"<code>djstripe.managers.SubscriptionManager</code>","text":"<p>               Bases: <code>Manager</code></p> <p>Manager used in models.Subscription.</p> Source code in <code>djstripe/managers.py</code> <pre><code>class SubscriptionManager(models.Manager):\n    \"\"\"Manager used in models.Subscription.\"\"\"\n\n    def started_during(self, year, month):\n        \"\"\"Return Subscriptions not in trial status between a certain time range.\"\"\"\n        return self.exclude(status=\"trialing\").filter(\n            start_date__year=year, start_date__month=month\n        )\n\n    def active(self):\n        \"\"\"Return active Subscriptions.\"\"\"\n        return self.filter(status=\"active\")\n\n    def canceled(self):\n        \"\"\"Return canceled Subscriptions.\"\"\"\n        return self.filter(status=\"canceled\")\n\n    def canceled_during(self, year, month):\n        \"\"\"Return Subscriptions canceled during a certain time range.\"\"\"\n        return self.canceled().filter(canceled_at__year=year, canceled_at__month=month)\n\n    def started_plan_summary_for(self, year, month):\n        \"\"\"Return started_during Subscriptions with plan counts annotated.\"\"\"\n        return (\n            self.started_during(year, month)\n            .values(\"plan\")\n            .order_by()\n            .annotate(count=models.Count(\"plan\"))\n        )\n\n    def active_plan_summary(self):\n        \"\"\"Return active Subscriptions with plan counts annotated.\"\"\"\n        return (\n            self.active().values(\"plan\").order_by().annotate(count=models.Count(\"plan\"))\n        )\n\n    def canceled_plan_summary_for(self, year, month):\n        \"\"\"\n        Return Subscriptions canceled within a time range with plan counts annotated.\n        \"\"\"\n        return (\n            self.canceled_during(year, month)\n            .values(\"plan\")\n            .order_by()\n            .annotate(count=models.Count(\"plan\"))\n        )\n\n    def churn(self):\n        \"\"\"Return number of canceled Subscriptions divided by active Subscriptions.\"\"\"\n        canceled = self.canceled().count()\n        active = self.active().count()\n        return decimal.Decimal(str(canceled)) / decimal.Decimal(str(active))\n</code></pre>"},{"location":"reference/managers/#djstripe.managers.SubscriptionManager-functions","title":"Functions","text":""},{"location":"reference/managers/#djstripe.managers.SubscriptionManager.active","title":"<code>djstripe.managers.SubscriptionManager.active()</code>","text":"<p>Return active Subscriptions.</p> Source code in <code>djstripe/managers.py</code> <pre><code>def active(self):\n    \"\"\"Return active Subscriptions.\"\"\"\n    return self.filter(status=\"active\")\n</code></pre>"},{"location":"reference/managers/#djstripe.managers.SubscriptionManager.active_plan_summary","title":"<code>djstripe.managers.SubscriptionManager.active_plan_summary()</code>","text":"<p>Return active Subscriptions with plan counts annotated.</p> Source code in <code>djstripe/managers.py</code> <pre><code>def active_plan_summary(self):\n    \"\"\"Return active Subscriptions with plan counts annotated.\"\"\"\n    return (\n        self.active().values(\"plan\").order_by().annotate(count=models.Count(\"plan\"))\n    )\n</code></pre>"},{"location":"reference/managers/#djstripe.managers.SubscriptionManager.canceled","title":"<code>djstripe.managers.SubscriptionManager.canceled()</code>","text":"<p>Return canceled Subscriptions.</p> Source code in <code>djstripe/managers.py</code> <pre><code>def canceled(self):\n    \"\"\"Return canceled Subscriptions.\"\"\"\n    return self.filter(status=\"canceled\")\n</code></pre>"},{"location":"reference/managers/#djstripe.managers.SubscriptionManager.canceled_during","title":"<code>djstripe.managers.SubscriptionManager.canceled_during(year, month)</code>","text":"<p>Return Subscriptions canceled during a certain time range.</p> Source code in <code>djstripe/managers.py</code> <pre><code>def canceled_during(self, year, month):\n    \"\"\"Return Subscriptions canceled during a certain time range.\"\"\"\n    return self.canceled().filter(canceled_at__year=year, canceled_at__month=month)\n</code></pre>"},{"location":"reference/managers/#djstripe.managers.SubscriptionManager.canceled_plan_summary_for","title":"<code>djstripe.managers.SubscriptionManager.canceled_plan_summary_for(year, month)</code>","text":"<p>Return Subscriptions canceled within a time range with plan counts annotated.</p> Source code in <code>djstripe/managers.py</code> <pre><code>def canceled_plan_summary_for(self, year, month):\n    \"\"\"\n    Return Subscriptions canceled within a time range with plan counts annotated.\n    \"\"\"\n    return (\n        self.canceled_during(year, month)\n        .values(\"plan\")\n        .order_by()\n        .annotate(count=models.Count(\"plan\"))\n    )\n</code></pre>"},{"location":"reference/managers/#djstripe.managers.SubscriptionManager.churn","title":"<code>djstripe.managers.SubscriptionManager.churn()</code>","text":"<p>Return number of canceled Subscriptions divided by active Subscriptions.</p> Source code in <code>djstripe/managers.py</code> <pre><code>def churn(self):\n    \"\"\"Return number of canceled Subscriptions divided by active Subscriptions.\"\"\"\n    canceled = self.canceled().count()\n    active = self.active().count()\n    return decimal.Decimal(str(canceled)) / decimal.Decimal(str(active))\n</code></pre>"},{"location":"reference/managers/#djstripe.managers.SubscriptionManager.started_during","title":"<code>djstripe.managers.SubscriptionManager.started_during(year, month)</code>","text":"<p>Return Subscriptions not in trial status between a certain time range.</p> Source code in <code>djstripe/managers.py</code> <pre><code>def started_during(self, year, month):\n    \"\"\"Return Subscriptions not in trial status between a certain time range.\"\"\"\n    return self.exclude(status=\"trialing\").filter(\n        start_date__year=year, start_date__month=month\n    )\n</code></pre>"},{"location":"reference/managers/#djstripe.managers.SubscriptionManager.started_plan_summary_for","title":"<code>djstripe.managers.SubscriptionManager.started_plan_summary_for(year, month)</code>","text":"<p>Return started_during Subscriptions with plan counts annotated.</p> Source code in <code>djstripe/managers.py</code> <pre><code>def started_plan_summary_for(self, year, month):\n    \"\"\"Return started_during Subscriptions with plan counts annotated.\"\"\"\n    return (\n        self.started_during(year, month)\n        .values(\"plan\")\n        .order_by()\n        .annotate(count=models.Count(\"plan\"))\n    )\n</code></pre>"},{"location":"reference/managers/#djstripe.managers.TransferManager","title":"<code>djstripe.managers.TransferManager</code>","text":"<p>               Bases: <code>Manager</code></p> <p>Manager used by models.Transfer.</p> Source code in <code>djstripe/managers.py</code> <pre><code>class TransferManager(models.Manager):\n    \"\"\"Manager used by models.Transfer.\"\"\"\n\n    def during(self, year, month):\n        \"\"\"Return Transfers between a certain time range.\"\"\"\n        return self.filter(created__year=year, created__month=month)\n\n    def paid_totals_for(self, year, month):\n        \"\"\"\n        Return paid Transfers during a certain year, month with total amounts annotated.\n        \"\"\"\n        return self.during(year, month).aggregate(total_amount=models.Sum(\"amount\"))\n</code></pre>"},{"location":"reference/managers/#djstripe.managers.TransferManager-functions","title":"Functions","text":""},{"location":"reference/managers/#djstripe.managers.TransferManager.during","title":"<code>djstripe.managers.TransferManager.during(year, month)</code>","text":"<p>Return Transfers between a certain time range.</p> Source code in <code>djstripe/managers.py</code> <pre><code>def during(self, year, month):\n    \"\"\"Return Transfers between a certain time range.\"\"\"\n    return self.filter(created__year=year, created__month=month)\n</code></pre>"},{"location":"reference/managers/#djstripe.managers.TransferManager.paid_totals_for","title":"<code>djstripe.managers.TransferManager.paid_totals_for(year, month)</code>","text":"<p>Return paid Transfers during a certain year, month with total amounts annotated.</p> Source code in <code>djstripe/managers.py</code> <pre><code>def paid_totals_for(self, year, month):\n    \"\"\"\n    Return paid Transfers during a certain year, month with total amounts annotated.\n    \"\"\"\n    return self.during(year, month).aggregate(total_amount=models.Sum(\"amount\"))\n</code></pre>"},{"location":"reference/models/","title":"Models","text":"<p>Models hold the bulk of the functionality included in the dj-stripe package. Each model is tied closely to its corresponding object in the stripe dashboard. Fields that are not implemented for each model have a short reason behind the decision in the docstring for each model.</p>"},{"location":"reference/models/#core-resources","title":"Core Resources","text":""},{"location":"reference/models/#djstripe.models.core-attributes","title":"Attributes","text":""},{"location":"reference/models/#djstripe.models.core.FileUpload","title":"<code>djstripe.models.core.FileUpload = File</code>  <code>module-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core-classes","title":"Classes","text":""},{"location":"reference/models/#djstripe.models.core.BalanceTransaction","title":"<code>djstripe.models.core.BalanceTransaction</code>","text":"<p>               Bases: <code>StripeModel</code></p> <p>A single transaction that updates the Stripe balance.</p> <p>Stripe documentation: https://stripe.com/docs/api?lang=python#balance_transaction_object</p> Source code in <code>djstripe/models/core.py</code> <pre><code>class BalanceTransaction(StripeModel):\n    \"\"\"\n    A single transaction that updates the Stripe balance.\n\n    Stripe documentation: https://stripe.com/docs/api?lang=python#balance_transaction_object\n    \"\"\"\n\n    stripe_class = stripe.BalanceTransaction\n\n    amount = StripeQuantumCurrencyAmountField(\n        help_text=\"Gross amount of the transaction, in cents.\"\n    )\n    available_on = StripeDateTimeField(\n        help_text=(\n            \"The date the transaction's net funds \"\n            \"will become available in the Stripe balance.\"\n        )\n    )\n    currency = StripeCurrencyCodeField()\n    exchange_rate = models.DecimalField(null=True, decimal_places=6, max_digits=8)\n    fee = StripeQuantumCurrencyAmountField(\n        help_text=\"Fee (in cents) paid for this transaction.\"\n    )\n    fee_details = JSONField()\n    net = StripeQuantumCurrencyAmountField(\n        help_text=\"Net amount of the transaction, in cents.\"\n    )\n    source = StripeIdField()\n    reporting_category = StripeEnumField(\n        enum=enums.BalanceTransactionReportingCategory,\n        help_text=(\n            \"More information: https://stripe.com/docs/reports/reporting-categories\"\n        ),\n    )\n    status = StripeEnumField(enum=enums.BalanceTransactionStatus)\n    type = StripeEnumField(enum=enums.BalanceTransactionType)\n\n    def __str__(self):\n        amount = get_friendly_currency_amount(self.amount / 100, self.currency)\n        status = enums.BalanceTransactionStatus.humanize(self.status)\n        return f\"{amount} ({status})\"\n\n    def get_source_class(self):\n        try:\n            return apps.get_model(\"djstripe\", self.type)\n        except LookupError:\n            raise\n\n    def get_source_instance(self):\n        return self.get_source_class().objects.get(id=self.source)\n\n    def get_stripe_dashboard_url(self):\n        return self.get_source_instance().get_stripe_dashboard_url()\n</code></pre>"},{"location":"reference/models/#djstripe.models.core.BalanceTransaction-attributes","title":"Attributes","text":""},{"location":"reference/models/#djstripe.models.core.BalanceTransaction.amount","title":"<code>djstripe.models.core.BalanceTransaction.amount = StripeQuantumCurrencyAmountField(help_text='Gross amount of the transaction, in cents.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.BalanceTransaction.available_on","title":"<code>djstripe.models.core.BalanceTransaction.available_on = StripeDateTimeField(help_text=\"The date the transaction's net funds will become available in the Stripe balance.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.BalanceTransaction.currency","title":"<code>djstripe.models.core.BalanceTransaction.currency = StripeCurrencyCodeField()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.BalanceTransaction.exchange_rate","title":"<code>djstripe.models.core.BalanceTransaction.exchange_rate = models.DecimalField(null=True, decimal_places=6, max_digits=8)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.BalanceTransaction.fee","title":"<code>djstripe.models.core.BalanceTransaction.fee = StripeQuantumCurrencyAmountField(help_text='Fee (in cents) paid for this transaction.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.BalanceTransaction.fee_details","title":"<code>djstripe.models.core.BalanceTransaction.fee_details = JSONField()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.BalanceTransaction.net","title":"<code>djstripe.models.core.BalanceTransaction.net = StripeQuantumCurrencyAmountField(help_text='Net amount of the transaction, in cents.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.BalanceTransaction.reporting_category","title":"<code>djstripe.models.core.BalanceTransaction.reporting_category = StripeEnumField(enum=enums.BalanceTransactionReportingCategory, help_text='More information: https://stripe.com/docs/reports/reporting-categories')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.BalanceTransaction.source","title":"<code>djstripe.models.core.BalanceTransaction.source = StripeIdField()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.BalanceTransaction.status","title":"<code>djstripe.models.core.BalanceTransaction.status = StripeEnumField(enum=enums.BalanceTransactionStatus)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.BalanceTransaction.stripe_class","title":"<code>djstripe.models.core.BalanceTransaction.stripe_class = stripe.BalanceTransaction</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.BalanceTransaction.type","title":"<code>djstripe.models.core.BalanceTransaction.type = StripeEnumField(enum=enums.BalanceTransactionType)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.BalanceTransaction-functions","title":"Functions","text":""},{"location":"reference/models/#djstripe.models.core.BalanceTransaction.__str__","title":"<code>djstripe.models.core.BalanceTransaction.__str__()</code>","text":"Source code in <code>djstripe/models/core.py</code> <pre><code>def __str__(self):\n    amount = get_friendly_currency_amount(self.amount / 100, self.currency)\n    status = enums.BalanceTransactionStatus.humanize(self.status)\n    return f\"{amount} ({status})\"\n</code></pre>"},{"location":"reference/models/#djstripe.models.core.BalanceTransaction.get_source_class","title":"<code>djstripe.models.core.BalanceTransaction.get_source_class()</code>","text":"Source code in <code>djstripe/models/core.py</code> <pre><code>def get_source_class(self):\n    try:\n        return apps.get_model(\"djstripe\", self.type)\n    except LookupError:\n        raise\n</code></pre>"},{"location":"reference/models/#djstripe.models.core.BalanceTransaction.get_source_instance","title":"<code>djstripe.models.core.BalanceTransaction.get_source_instance()</code>","text":"Source code in <code>djstripe/models/core.py</code> <pre><code>def get_source_instance(self):\n    return self.get_source_class().objects.get(id=self.source)\n</code></pre>"},{"location":"reference/models/#djstripe.models.core.BalanceTransaction.get_stripe_dashboard_url","title":"<code>djstripe.models.core.BalanceTransaction.get_stripe_dashboard_url()</code>","text":"Source code in <code>djstripe/models/core.py</code> <pre><code>def get_stripe_dashboard_url(self):\n    return self.get_source_instance().get_stripe_dashboard_url()\n</code></pre>"},{"location":"reference/models/#djstripe.models.core.Charge","title":"<code>djstripe.models.core.Charge</code>","text":"<p>               Bases: <code>StripeModel</code></p> <p>To charge a credit or a debit card, you create a charge object. You can retrieve and refund individual charges as well as list all charges. Charges are identified by a unique random ID.</p> <p>Stripe documentation: https://stripe.com/docs/api?lang=python#charges</p> Source code in <code>djstripe/models/core.py</code> <pre><code>class Charge(StripeModel):\n    \"\"\"\n    To charge a credit or a debit card, you create a charge object. You can\n    retrieve and refund individual charges as well as list all charges. Charges\n    are identified by a unique random ID.\n\n    Stripe documentation: https://stripe.com/docs/api?lang=python#charges\n    \"\"\"\n\n    stripe_class = stripe.Charge\n    expand_fields = [\"balance_transaction\"]\n    stripe_dashboard_item_name = \"payments\"\n\n    amount = StripeDecimalCurrencyAmountField(help_text=\"Amount charged (as decimal).\")\n    amount_captured = StripeDecimalCurrencyAmountField(\n        null=True,\n        help_text=(\n            \"Amount (as decimal) captured (can be less than the amount attribute \"\n            \"on the charge if a partial capture was issued).\"\n        ),\n    )\n    amount_refunded = StripeDecimalCurrencyAmountField(\n        help_text=(\n            \"Amount (as decimal) refunded (can be less than the amount attribute on \"\n            \"the charge if a partial refund was issued).\"\n        )\n    )\n    application = models.CharField(\n        max_length=255,\n        blank=True,\n        help_text=\"ID of the Connect application that created the charge.\",\n    )\n    application_fee = StripeForeignKey(\n        \"ApplicationFee\",\n        on_delete=models.SET_NULL,\n        null=True,\n        blank=True,\n        related_name=\"fee_for_charge\",\n        help_text=\"The application fee (if any) for the charge.\",\n    )\n    application_fee_amount = StripeDecimalCurrencyAmountField(\n        null=True,\n        blank=True,\n        help_text=(\n            \"The amount (as decimal) of the application fee (if any) \"\n            \"requested for the charge.\"\n        ),\n    )\n    balance_transaction = StripeForeignKey(\n        \"BalanceTransaction\",\n        on_delete=models.SET_NULL,\n        null=True,\n        help_text=(\n            \"The balance transaction that describes the impact of this charge \"\n            \"on your account balance (not including refunds or disputes).\"\n        ),\n    )\n    billing_details = JSONField(\n        null=True,\n        help_text=(\n            \"Billing information associated with the PaymentMethod at the \"\n            \"time of the transaction.\"\n        ),\n    )\n    calculated_statement_descriptor = models.CharField(\n        max_length=22,\n        default=\"\",\n        help_text=(\n            \"The full statement descriptor that is passed to card networks, \"\n            \"and that is displayed on your customers' credit card and bank statements. \"\n            \"Allows you to see what the statement descriptor looks like after the \"\n            \"static and dynamic portions are combined.\"\n        ),\n    )\n    captured = models.BooleanField(\n        default=False,\n        help_text=(\n            \"If the charge was created without capturing, this boolean represents\"\n            \" whether or not it is still uncaptured or has since been captured.\"\n        ),\n    )\n    currency = StripeCurrencyCodeField(\n        help_text=\"The currency in which the charge was made.\"\n    )\n    customer = StripeForeignKey(\n        \"Customer\",\n        on_delete=models.SET_NULL,\n        null=True,\n        blank=True,\n        related_name=\"charges\",\n        help_text=\"The customer associated with this charge.\",\n    )\n\n    dispute = StripeForeignKey(\n        \"Dispute\",\n        on_delete=models.SET_NULL,\n        null=True,\n        blank=True,\n        related_name=\"charges\",\n        help_text=\"Details about the dispute if the charge has been disputed.\",\n    )\n    disputed = models.BooleanField(\n        default=False,\n        help_text=\"Whether the charge has been disputed.\",\n    )\n    failure_code = StripeEnumField(\n        enum=enums.ApiErrorCode,\n        default=\"\",\n        blank=True,\n        help_text=\"Error code explaining reason for charge failure if available.\",\n    )\n    failure_message = models.TextField(\n        max_length=5000,\n        default=\"\",\n        blank=True,\n        help_text=(\n            \"Message to user further explaining reason for charge failure if available.\"\n        ),\n    )\n    fraud_details = JSONField(\n        help_text=\"Hash with information on fraud assessments for the charge.\",\n        null=True,\n        blank=True,\n    )\n    invoice = StripeForeignKey(\n        \"Invoice\",\n        on_delete=models.CASCADE,\n        null=True,\n        related_name=\"charges\",\n        help_text=\"The invoice this charge is for if one exists.\",\n    )\n    # TODO: order (requires Order model)\n    on_behalf_of = StripeForeignKey(\n        \"Account\",\n        on_delete=models.CASCADE,\n        null=True,\n        blank=True,\n        related_name=\"charges\",\n        help_text=(\n            \"The account (if any) the charge was made on behalf of \"\n            \"without triggering an automatic transfer.\"\n        ),\n    )\n    outcome = JSONField(\n        help_text=\"Details about whether or not the payment was accepted, and why.\",\n        null=True,\n        blank=True,\n    )\n    paid = models.BooleanField(\n        default=False,\n        help_text=(\n            \"True if the charge succeeded, \"\n            \"or was successfully authorized for later capture, False otherwise.\"\n        ),\n    )\n    payment_intent = StripeForeignKey(\n        \"PaymentIntent\",\n        null=True,\n        on_delete=models.SET_NULL,\n        related_name=\"charges\",\n        help_text=\"PaymentIntent associated with this charge, if one exists.\",\n    )\n    payment_method = StripeForeignKey(\n        \"PaymentMethod\",\n        null=True,\n        on_delete=models.SET_NULL,\n        related_name=\"charges\",\n        help_text=\"PaymentMethod used in this charge.\",\n    )\n    payment_method_details = JSONField(\n        help_text=\"Details about the payment method at the time of the transaction.\",\n        null=True,\n        blank=True,\n    )\n    receipt_email = models.TextField(\n        max_length=800,  # yup, 800.\n        default=\"\",\n        blank=True,\n        help_text=\"The email address that the receipt for this charge was sent to.\",\n    )\n    receipt_number = models.CharField(\n        max_length=14,\n        default=\"\",\n        blank=True,\n        help_text=(\n            \"The transaction number that appears \"\n            \"on email receipts sent for this charge.\"\n        ),\n    )\n    receipt_url = models.TextField(\n        max_length=5000,\n        default=\"\",\n        blank=True,\n        help_text=(\n            \"This is the URL to view the receipt for this charge. \"\n            \"The receipt is kept up-to-date to the latest state of the charge, \"\n            \"including any refunds. If the charge is for an Invoice, \"\n            \"the receipt will be stylized as an Invoice receipt.\"\n        ),\n    )\n    refunded = models.BooleanField(\n        default=False,\n        help_text=(\n            \"Whether or not the charge has been fully refunded. \"\n            \"If the charge is only partially refunded, \"\n            \"this attribute will still be false.\"\n        ),\n    )\n    # TODO: review (requires Review model)\n    shipping = JSONField(\n        null=True, blank=True, help_text=\"Shipping information for the charge\"\n    )\n    source = PaymentMethodForeignKey(\n        on_delete=models.SET_NULL,\n        null=True,\n        blank=True,\n        related_name=\"charges\",\n        help_text=\"The source used for this charge.\",\n    )\n    source_transfer = StripeForeignKey(\n        \"Transfer\",\n        null=True,\n        blank=True,\n        on_delete=models.CASCADE,\n        help_text=(\n            \"The transfer which created this charge. Only present if the \"\n            \"charge came from another Stripe account.\"\n        ),\n        related_name=\"+\",\n    )\n    statement_descriptor = models.CharField(\n        max_length=22,\n        null=True,\n        blank=True,\n        help_text=(\n            \"For card charges, use statement_descriptor_suffix instead. \"\n            \"Otherwise, you can use this value as the complete description of a \"\n            \"charge on your customers' statements. Must contain at least one letter, \"\n            \"maximum 22 characters.\"\n        ),\n    )\n    statement_descriptor_suffix = models.CharField(\n        max_length=22,\n        null=True,\n        blank=True,\n        help_text=(\n            \"Provides information about the charge that customers see on \"\n            \"their statements. Concatenated with the prefix (shortened descriptor) \"\n            \"or statement descriptor that's set on the account to form the \"\n            \"complete statement descriptor. \"\n            \"Maximum 22 characters for the concatenated descriptor.\"\n        ),\n    )\n    status = StripeEnumField(\n        enum=enums.ChargeStatus, help_text=\"The status of the payment.\"\n    )\n    transfer = StripeForeignKey(\n        \"Transfer\",\n        on_delete=models.CASCADE,\n        null=True,\n        blank=True,\n        help_text=(\n            \"The transfer to the `destination` account (only applicable if \"\n            \"the charge was created using the `destination` parameter).\"\n        ),\n    )\n    transfer_data = JSONField(\n        null=True,\n        blank=True,\n        help_text=(\n            \"An optional dictionary including the account to automatically \"\n            \"transfer to as part of a destination charge.\"\n        ),\n    )\n    transfer_group = models.CharField(\n        max_length=255,\n        null=True,\n        blank=True,\n        help_text=\"A string that identifies this transaction as part of a group.\",\n    )\n\n    objects = ChargeManager()\n\n    def __str__(self):\n        amount = get_friendly_currency_amount(self.amount, self.currency)\n        return f\"{amount} ({self.human_readable_status})\"\n\n    @property\n    def fee(self):\n        if self.balance_transaction:\n            return self.balance_transaction.fee\n\n    @property\n    def human_readable_status(self) -&gt; str:\n        if not self.captured:\n            return \"Uncaptured\"\n        elif self.disputed:\n            return \"Disputed\"\n        elif self.refunded:\n            return \"Refunded\"\n        return enums.ChargeStatus.humanize(self.status)\n\n    @property\n    def fraudulent(self) -&gt; bool:\n        return (\n            self.fraud_details and list(self.fraud_details.values())[0] == \"fraudulent\"\n        )\n\n    def _calculate_refund_amount(self, amount: Optional[Decimal]) -&gt; int:\n        \"\"\"\n        Returns the amount that can be refunded (in cents)\n        \"\"\"\n        eligible_to_refund = self.amount - (self.amount_refunded or 0)\n        amount_to_refund = (\n            min(eligible_to_refund, amount) if amount else eligible_to_refund\n        )\n\n        return int(amount_to_refund * 100)\n\n    def refund(\n        self,\n        amount: Decimal = None,\n        reason: str = None,\n        api_key: str = None,\n        stripe_account: str = None,\n    ) -&gt; \"Refund\":\n        \"\"\"\n        Initiate a refund. Returns the refund object.\n\n        :param amount: A positive decimal amount representing how much of this charge\n            to refund. If amount is not provided, then this will be a full refund.\n            Can only refund up to the unrefunded amount remaining of the charge.\n        :param reason: String indicating the reason for the refund.\n            If set, possible values are ``duplicate``, ``fraudulent``,\n            and ``requested_by_customer``. Specifying ``fraudulent`` as the reason\n            when you believe the charge to be fraudulent will\n            help Stripe improve their fraud detection algorithms.\n        \"\"\"\n        api_key = api_key or self.default_api_key\n\n        # Prefer passed in stripe_account if set.\n        if not stripe_account:\n            stripe_account = self._get_stripe_account_id(api_key)\n\n        refund_obj = Refund._api_create(\n            charge=self.id,\n            amount=self._calculate_refund_amount(amount=amount),\n            reason=reason,\n            api_key=api_key,\n            stripe_account=stripe_account,\n        )\n\n        return Refund.sync_from_stripe_data(\n            refund_obj,\n            api_key=api_key,\n            stripe_version=djstripe_settings.STRIPE_API_VERSION,\n        )\n\n    def capture(self, **kwargs) -&gt; \"Charge\":\n        \"\"\"\n        Capture the payment of an existing, uncaptured, charge.\n        This is the second half of the two-step payment flow, where first you\n        created a charge with the capture option set to False.\n\n        See https://stripe.com/docs/api#capture_charge\n        \"\"\"\n\n        captured_charge = self.api_retrieve().capture(**kwargs)\n        return self.__class__.sync_from_stripe_data(\n            captured_charge, api_key=self.default_api_key\n        )\n\n    def _attach_objects_post_save_hook(\n        self,\n        cls,\n        data,\n        pending_relations=None,\n        api_key=djstripe_settings.STRIPE_SECRET_KEY,\n    ):\n        super()._attach_objects_post_save_hook(\n            cls, data, pending_relations=pending_relations, api_key=api_key\n        )\n\n        cls._stripe_object_to_refunds(\n            target_cls=Refund, data=data, charge=self, api_key=api_key\n        )\n</code></pre>"},{"location":"reference/models/#djstripe.models.core.Charge-attributes","title":"Attributes","text":""},{"location":"reference/models/#djstripe.models.core.Charge.amount","title":"<code>djstripe.models.core.Charge.amount = StripeDecimalCurrencyAmountField(help_text='Amount charged (as decimal).')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Charge.amount_captured","title":"<code>djstripe.models.core.Charge.amount_captured = StripeDecimalCurrencyAmountField(null=True, help_text='Amount (as decimal) captured (can be less than the amount attribute on the charge if a partial capture was issued).')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Charge.amount_refunded","title":"<code>djstripe.models.core.Charge.amount_refunded = StripeDecimalCurrencyAmountField(help_text='Amount (as decimal) refunded (can be less than the amount attribute on the charge if a partial refund was issued).')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Charge.application","title":"<code>djstripe.models.core.Charge.application = models.CharField(max_length=255, blank=True, help_text='ID of the Connect application that created the charge.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Charge.application_fee","title":"<code>djstripe.models.core.Charge.application_fee = StripeForeignKey('ApplicationFee', on_delete=models.SET_NULL, null=True, blank=True, related_name='fee_for_charge', help_text='The application fee (if any) for the charge.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Charge.application_fee_amount","title":"<code>djstripe.models.core.Charge.application_fee_amount = StripeDecimalCurrencyAmountField(null=True, blank=True, help_text='The amount (as decimal) of the application fee (if any) requested for the charge.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Charge.balance_transaction","title":"<code>djstripe.models.core.Charge.balance_transaction = StripeForeignKey('BalanceTransaction', on_delete=models.SET_NULL, null=True, help_text='The balance transaction that describes the impact of this charge on your account balance (not including refunds or disputes).')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Charge.billing_details","title":"<code>djstripe.models.core.Charge.billing_details = JSONField(null=True, help_text='Billing information associated with the PaymentMethod at the time of the transaction.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Charge.calculated_statement_descriptor","title":"<code>djstripe.models.core.Charge.calculated_statement_descriptor = models.CharField(max_length=22, default='', help_text=\"The full statement descriptor that is passed to card networks, and that is displayed on your customers' credit card and bank statements. Allows you to see what the statement descriptor looks like after the static and dynamic portions are combined.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Charge.captured","title":"<code>djstripe.models.core.Charge.captured = models.BooleanField(default=False, help_text='If the charge was created without capturing, this boolean represents whether or not it is still uncaptured or has since been captured.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Charge.currency","title":"<code>djstripe.models.core.Charge.currency = StripeCurrencyCodeField(help_text='The currency in which the charge was made.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Charge.customer","title":"<code>djstripe.models.core.Charge.customer = StripeForeignKey('Customer', on_delete=models.SET_NULL, null=True, blank=True, related_name='charges', help_text='The customer associated with this charge.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Charge.dispute","title":"<code>djstripe.models.core.Charge.dispute = StripeForeignKey('Dispute', on_delete=models.SET_NULL, null=True, blank=True, related_name='charges', help_text='Details about the dispute if the charge has been disputed.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Charge.disputed","title":"<code>djstripe.models.core.Charge.disputed = models.BooleanField(default=False, help_text='Whether the charge has been disputed.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Charge.expand_fields","title":"<code>djstripe.models.core.Charge.expand_fields = ['balance_transaction']</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Charge.failure_code","title":"<code>djstripe.models.core.Charge.failure_code = StripeEnumField(enum=enums.ApiErrorCode, default='', blank=True, help_text='Error code explaining reason for charge failure if available.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Charge.failure_message","title":"<code>djstripe.models.core.Charge.failure_message = models.TextField(max_length=5000, default='', blank=True, help_text='Message to user further explaining reason for charge failure if available.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Charge.fee","title":"<code>djstripe.models.core.Charge.fee</code>  <code>property</code>","text":""},{"location":"reference/models/#djstripe.models.core.Charge.fraud_details","title":"<code>djstripe.models.core.Charge.fraud_details = JSONField(help_text='Hash with information on fraud assessments for the charge.', null=True, blank=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Charge.fraudulent","title":"<code>djstripe.models.core.Charge.fraudulent: bool</code>  <code>property</code>","text":""},{"location":"reference/models/#djstripe.models.core.Charge.human_readable_status","title":"<code>djstripe.models.core.Charge.human_readable_status: str</code>  <code>property</code>","text":""},{"location":"reference/models/#djstripe.models.core.Charge.invoice","title":"<code>djstripe.models.core.Charge.invoice = StripeForeignKey('Invoice', on_delete=models.CASCADE, null=True, related_name='charges', help_text='The invoice this charge is for if one exists.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Charge.objects","title":"<code>djstripe.models.core.Charge.objects = ChargeManager()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Charge.on_behalf_of","title":"<code>djstripe.models.core.Charge.on_behalf_of = StripeForeignKey('Account', on_delete=models.CASCADE, null=True, blank=True, related_name='charges', help_text='The account (if any) the charge was made on behalf of without triggering an automatic transfer.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Charge.outcome","title":"<code>djstripe.models.core.Charge.outcome = JSONField(help_text='Details about whether or not the payment was accepted, and why.', null=True, blank=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Charge.paid","title":"<code>djstripe.models.core.Charge.paid = models.BooleanField(default=False, help_text='True if the charge succeeded, or was successfully authorized for later capture, False otherwise.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Charge.payment_intent","title":"<code>djstripe.models.core.Charge.payment_intent = StripeForeignKey('PaymentIntent', null=True, on_delete=models.SET_NULL, related_name='charges', help_text='PaymentIntent associated with this charge, if one exists.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Charge.payment_method","title":"<code>djstripe.models.core.Charge.payment_method = StripeForeignKey('PaymentMethod', null=True, on_delete=models.SET_NULL, related_name='charges', help_text='PaymentMethod used in this charge.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Charge.payment_method_details","title":"<code>djstripe.models.core.Charge.payment_method_details = JSONField(help_text='Details about the payment method at the time of the transaction.', null=True, blank=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Charge.receipt_email","title":"<code>djstripe.models.core.Charge.receipt_email = models.TextField(max_length=800, default='', blank=True, help_text='The email address that the receipt for this charge was sent to.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Charge.receipt_number","title":"<code>djstripe.models.core.Charge.receipt_number = models.CharField(max_length=14, default='', blank=True, help_text='The transaction number that appears on email receipts sent for this charge.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Charge.receipt_url","title":"<code>djstripe.models.core.Charge.receipt_url = models.TextField(max_length=5000, default='', blank=True, help_text='This is the URL to view the receipt for this charge. The receipt is kept up-to-date to the latest state of the charge, including any refunds. If the charge is for an Invoice, the receipt will be stylized as an Invoice receipt.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Charge.refunded","title":"<code>djstripe.models.core.Charge.refunded = models.BooleanField(default=False, help_text='Whether or not the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Charge.shipping","title":"<code>djstripe.models.core.Charge.shipping = JSONField(null=True, blank=True, help_text='Shipping information for the charge')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Charge.source","title":"<code>djstripe.models.core.Charge.source = PaymentMethodForeignKey(on_delete=models.SET_NULL, null=True, blank=True, related_name='charges', help_text='The source used for this charge.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Charge.source_transfer","title":"<code>djstripe.models.core.Charge.source_transfer = StripeForeignKey('Transfer', null=True, blank=True, on_delete=models.CASCADE, help_text='The transfer which created this charge. Only present if the charge came from another Stripe account.', related_name='+')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Charge.statement_descriptor","title":"<code>djstripe.models.core.Charge.statement_descriptor = models.CharField(max_length=22, null=True, blank=True, help_text=\"For card charges, use statement_descriptor_suffix instead. Otherwise, you can use this value as the complete description of a charge on your customers' statements. Must contain at least one letter, maximum 22 characters.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Charge.statement_descriptor_suffix","title":"<code>djstripe.models.core.Charge.statement_descriptor_suffix = models.CharField(max_length=22, null=True, blank=True, help_text=\"Provides information about the charge that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that's set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Charge.status","title":"<code>djstripe.models.core.Charge.status = StripeEnumField(enum=enums.ChargeStatus, help_text='The status of the payment.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Charge.stripe_class","title":"<code>djstripe.models.core.Charge.stripe_class = stripe.Charge</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Charge.stripe_dashboard_item_name","title":"<code>djstripe.models.core.Charge.stripe_dashboard_item_name = 'payments'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Charge.transfer","title":"<code>djstripe.models.core.Charge.transfer = StripeForeignKey('Transfer', on_delete=models.CASCADE, null=True, blank=True, help_text='The transfer to the `destination` account (only applicable if the charge was created using the `destination` parameter).')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Charge.transfer_data","title":"<code>djstripe.models.core.Charge.transfer_data = JSONField(null=True, blank=True, help_text='An optional dictionary including the account to automatically transfer to as part of a destination charge.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Charge.transfer_group","title":"<code>djstripe.models.core.Charge.transfer_group = models.CharField(max_length=255, null=True, blank=True, help_text='A string that identifies this transaction as part of a group.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Charge-functions","title":"Functions","text":""},{"location":"reference/models/#djstripe.models.core.Charge.__str__","title":"<code>djstripe.models.core.Charge.__str__()</code>","text":"Source code in <code>djstripe/models/core.py</code> <pre><code>def __str__(self):\n    amount = get_friendly_currency_amount(self.amount, self.currency)\n    return f\"{amount} ({self.human_readable_status})\"\n</code></pre>"},{"location":"reference/models/#djstripe.models.core.Charge.capture","title":"<code>djstripe.models.core.Charge.capture(**kwargs)</code>","text":"<p>Capture the payment of an existing, uncaptured, charge. This is the second half of the two-step payment flow, where first you created a charge with the capture option set to False.</p> <p>See https://stripe.com/docs/api#capture_charge</p> Source code in <code>djstripe/models/core.py</code> <pre><code>def capture(self, **kwargs) -&gt; \"Charge\":\n    \"\"\"\n    Capture the payment of an existing, uncaptured, charge.\n    This is the second half of the two-step payment flow, where first you\n    created a charge with the capture option set to False.\n\n    See https://stripe.com/docs/api#capture_charge\n    \"\"\"\n\n    captured_charge = self.api_retrieve().capture(**kwargs)\n    return self.__class__.sync_from_stripe_data(\n        captured_charge, api_key=self.default_api_key\n    )\n</code></pre>"},{"location":"reference/models/#djstripe.models.core.Charge.refund","title":"<code>djstripe.models.core.Charge.refund(amount=None, reason=None, api_key=None, stripe_account=None)</code>","text":"<p>Initiate a refund. Returns the refund object.</p> <p>:param amount: A positive decimal amount representing how much of this charge     to refund. If amount is not provided, then this will be a full refund.     Can only refund up to the unrefunded amount remaining of the charge. :param reason: String indicating the reason for the refund.     If set, possible values are <code>duplicate</code>, <code>fraudulent</code>,     and <code>requested_by_customer</code>. Specifying <code>fraudulent</code> as the reason     when you believe the charge to be fraudulent will     help Stripe improve their fraud detection algorithms.</p> Source code in <code>djstripe/models/core.py</code> <pre><code>def refund(\n    self,\n    amount: Decimal = None,\n    reason: str = None,\n    api_key: str = None,\n    stripe_account: str = None,\n) -&gt; \"Refund\":\n    \"\"\"\n    Initiate a refund. Returns the refund object.\n\n    :param amount: A positive decimal amount representing how much of this charge\n        to refund. If amount is not provided, then this will be a full refund.\n        Can only refund up to the unrefunded amount remaining of the charge.\n    :param reason: String indicating the reason for the refund.\n        If set, possible values are ``duplicate``, ``fraudulent``,\n        and ``requested_by_customer``. Specifying ``fraudulent`` as the reason\n        when you believe the charge to be fraudulent will\n        help Stripe improve their fraud detection algorithms.\n    \"\"\"\n    api_key = api_key or self.default_api_key\n\n    # Prefer passed in stripe_account if set.\n    if not stripe_account:\n        stripe_account = self._get_stripe_account_id(api_key)\n\n    refund_obj = Refund._api_create(\n        charge=self.id,\n        amount=self._calculate_refund_amount(amount=amount),\n        reason=reason,\n        api_key=api_key,\n        stripe_account=stripe_account,\n    )\n\n    return Refund.sync_from_stripe_data(\n        refund_obj,\n        api_key=api_key,\n        stripe_version=djstripe_settings.STRIPE_API_VERSION,\n    )\n</code></pre>"},{"location":"reference/models/#djstripe.models.core.Customer","title":"<code>djstripe.models.core.Customer</code>","text":"<p>               Bases: <code>StripeModel</code></p> <p>Customer objects allow you to perform recurring charges and track multiple charges that are associated with the same customer.</p> <p>Stripe documentation: https://stripe.com/docs/api?lang=python#customers</p> Source code in <code>djstripe/models/core.py</code> <pre><code>class Customer(StripeModel):\n    \"\"\"\n    Customer objects allow you to perform recurring charges and track multiple\n    charges that are associated with the same customer.\n\n    Stripe documentation: https://stripe.com/docs/api?lang=python#customers\n    \"\"\"\n\n    stripe_class = stripe.Customer\n    expand_fields = [\"default_source\", \"sources\"]\n    stripe_dashboard_item_name = \"customers\"\n\n    address = JSONField(null=True, blank=True, help_text=\"The customer's address.\")\n    balance = StripeQuantumCurrencyAmountField(\n        null=True,\n        blank=True,\n        default=0,\n        help_text=(\n            \"Current balance (in cents), if any, being stored on the customer's \"\n            \"account. \"\n            \"If negative, the customer has credit to apply to the next invoice. \"\n            \"If positive, the customer has an amount owed that will be added to the \"\n            \"next invoice. The balance does not refer to any unpaid invoices; it \"\n            \"solely takes into account amounts that have yet to be successfully \"\n            \"applied to any invoice. This balance is only taken into account for \"\n            \"recurring billing purposes (i.e., subscriptions, invoices, invoice items).\"\n        ),\n    )\n    currency = StripeCurrencyCodeField(\n        blank=True,\n        default=\"\",\n        help_text=(\n            \"The currency the customer can be charged in for recurring billing purposes\"\n        ),\n    )\n    default_source = PaymentMethodForeignKey(\n        on_delete=models.SET_NULL, null=True, blank=True, related_name=\"customers\"\n    )\n    delinquent = models.BooleanField(\n        null=True,\n        blank=True,\n        default=False,\n        help_text=(\n            \"Whether or not the latest charge for the customer's \"\n            \"latest invoice has failed.\"\n        ),\n    )\n    # Stripe API returns deleted customers like so:\n    # {\n    #   \"id\": \"cus_KX439W5dKrpi22\",\n    #   \"object\": \"customer\",\n    #   \"deleted\": true,\n    # }\n    deleted = models.BooleanField(\n        default=False,\n        null=True,\n        blank=True,\n        help_text=(\n            \"Whether the Customer instance has been deleted upstream in Stripe or not.\"\n        ),\n    )\n    # &lt;discount&gt;\n    coupon = models.ForeignKey(\n        \"Coupon\", null=True, blank=True, on_delete=models.SET_NULL\n    )\n    coupon_start = StripeDateTimeField(\n        null=True,\n        blank=True,\n        editable=False,\n        help_text=\"If a coupon is present, the date at which it was applied.\",\n    )\n    coupon_end = StripeDateTimeField(\n        null=True,\n        blank=True,\n        editable=False,\n        help_text=(\n            \"If a coupon is present and has a limited duration, \"\n            \"the date that the discount will end.\"\n        ),\n    )\n    # &lt;/discount&gt;\n    discount = JSONField(\n        null=True,\n        blank=True,\n        help_text=(\n            \"Describes the current discount active on the customer, if there is one.\"\n        ),\n    )\n\n    email = models.TextField(max_length=5000, default=\"\", blank=True)\n    invoice_prefix = models.CharField(\n        default=\"\",\n        blank=True,\n        max_length=255,\n        help_text=(\n            \"The prefix for the customer used to generate unique invoice numbers.\"\n        ),\n    )\n    invoice_settings = JSONField(\n        null=True, blank=True, help_text=\"The customer's default invoice settings.\"\n    )\n    # default_payment_method is actually nested inside invoice_settings\n    # this field is a convenience to provide the foreign key\n    default_payment_method = StripeForeignKey(\n        \"PaymentMethod\",\n        null=True,\n        blank=True,\n        on_delete=models.SET_NULL,\n        related_name=\"+\",\n        help_text=(\n            \"default payment method used for subscriptions and invoices \"\n            \"for the customer.\"\n        ),\n    )\n    name = models.TextField(\n        max_length=5000,\n        default=\"\",\n        blank=True,\n        help_text=\"The customer's full name or business name.\",\n    )\n    phone = models.TextField(\n        max_length=5000,\n        default=\"\",\n        blank=True,\n        help_text=\"The customer's phone number.\",\n    )\n    preferred_locales = JSONField(\n        null=True,\n        blank=True,\n        help_text=(\n            \"The customer's preferred locales (languages), ordered by preference.\"\n        ),\n    )\n    shipping = JSONField(\n        null=True,\n        blank=True,\n        help_text=\"Shipping information associated with the customer.\",\n    )\n    tax_exempt = StripeEnumField(\n        enum=enums.CustomerTaxExempt,\n        default=\"\",\n        help_text=(\n            \"Describes the customer's tax exemption status. When set to reverse, \"\n            'invoice and receipt PDFs include the text \"Reverse charge\".'\n        ),\n    )\n\n    # dj-stripe fields\n    subscriber = models.ForeignKey(\n        djstripe_settings.get_subscriber_model_string(),\n        blank=True,\n        null=True,\n        on_delete=models.SET_NULL,\n        related_name=\"djstripe_customers\",\n    )\n    date_purged = models.DateTimeField(null=True, editable=False)\n\n    def __str__(self):\n        if self.subscriber:\n            return str(self.subscriber)\n\n        return self.name or self.description or self.id\n\n    @classmethod\n    def _manipulate_stripe_object_hook(cls, data):\n        # stripe adds a deleted attribute if the Customer has been deleted upstream\n        if data.get(\"deleted\"):\n            logger.warning(\n                f\"This customer ({data.get('id')}) has been deleted upstream, in Stripe\"\n            )\n\n        else:\n            # set \"deleted\" key to False (default)\n            data[\"deleted\"] = False\n\n        discount = data.get(\"discount\")\n        if discount:\n            data[\"coupon_start\"] = discount[\"start\"]\n            data[\"coupon_end\"] = discount[\"end\"]\n\n        # Populate the object id for our default_payment_method field (or set it None)\n        data[\"default_payment_method\"] = data.get(\"invoice_settings\", {}).get(\n            \"default_payment_method\"\n        )\n\n        return data\n\n    @classmethod\n    def get_or_create(\n        cls,\n        subscriber,\n        livemode=djstripe_settings.STRIPE_LIVE_MODE,\n        stripe_account=None,\n    ):\n        \"\"\"\n        Get or create a dj-stripe customer.\n\n        :param subscriber: The subscriber model instance for which to get or\n            create a customer.\n        :type subscriber: User\n\n        :param livemode: Whether to get the subscriber in live or test mode.\n        :type livemode: bool\n        \"\"\"\n\n        try:\n            return cls.objects.get(subscriber=subscriber, livemode=livemode), False\n        except cls.DoesNotExist:\n            action = f\"create:{subscriber.pk}\"\n            idempotency_key = djstripe_settings.get_idempotency_key(\n                \"customer\", action, livemode\n            )\n            return (\n                cls.create(\n                    subscriber,\n                    idempotency_key=idempotency_key,\n                    stripe_account=stripe_account,\n                ),\n                True,\n            )\n\n    @classmethod\n    def create(cls, subscriber, idempotency_key=None, stripe_account=None):\n        metadata = {}\n        subscriber_key = djstripe_settings.SUBSCRIBER_CUSTOMER_KEY\n        if subscriber_key not in (\"\", None):\n            metadata[subscriber_key] = subscriber.pk\n\n        try:\n            # if subscriber table has a get_full_name() method, use it as name\n            # ref django.contrib.auth.models.User.get_full_name\n            name = subscriber.get_full_name()\n        except AttributeError:\n            name = None\n\n        stripe_customer = cls._api_create(\n            email=subscriber.email,\n            name=name,\n            idempotency_key=idempotency_key,\n            metadata=metadata,\n            stripe_account=stripe_account,\n        )\n        customer, created = cls.objects.get_or_create(\n            id=stripe_customer[\"id\"],\n            defaults={\n                \"subscriber\": subscriber,\n                \"livemode\": stripe_customer[\"livemode\"],\n                \"balance\": stripe_customer.get(\"balance\", 0),\n                \"delinquent\": stripe_customer.get(\"delinquent\", False),\n            },\n        )\n\n        return customer\n\n    @property\n    def credits(self):\n        \"\"\"\n        The customer is considered to have credits if their balance is below 0.\n        \"\"\"\n        return abs(min(self.balance, 0))\n\n    @property\n    def customer_payment_methods(self):\n        \"\"\"\n        An iterable of all of the customer's payment methods\n        (sources, then legacy cards)\n        \"\"\"\n        for source in self.sources.iterator():\n            yield source\n\n        for card in self.legacy_cards.iterator():\n            yield card\n\n    @property\n    def pending_charges(self):\n        \"\"\"\n        The customer is considered to have pending charges if their balance is above 0.\n        \"\"\"\n        return max(self.balance, 0)\n\n    def subscribe(self, *, items=None, price=None, plan=None, **kwargs):\n        \"\"\"\n        Subscribes this customer to all the prices or plans in the items dict (Recommended).\n\n        :param items: A list of up to 20 subscription items, each with an attached price\n        :type list:\n            :param items: A dictionary of Plan (or Plan ID) or Price (or Price ID)\n            :type dict:  The price or plan to which to subscribe the customer.\n\n        :param price: The price to which to subscribe the customer.\n        :type price: Price or string (price ID)\n\n        :param plan: The plan to which to subscribe the customer.\n        :type plan: Plan or string (plan ID)\n        \"\"\"\n        from .billing import Subscription\n\n        if (items and price) or (items and plan) or (price and plan):\n            raise TypeError(\"Please define only one of items, price or plan arguments.\")\n\n        if items is None:\n            _items = [{\"price\": price}]\n        else:\n            _items = []\n            for item in items:\n                price = item.get(\"price\", \"\")\n                plan = item.get(\"plan\", \"\")\n                price, kwargs = _sanitise_price(price, plan, **kwargs)\n                if \"price\" in item:\n                    _items.append({\"price\": price})\n                if \"plan\" in item:\n                    _items.append({\"plan\": price})\n\n        stripe_subscription = Subscription._api_create(\n            items=_items, customer=self.id, **kwargs\n        )\n\n        api_key = kwargs.get(\"api_key\") or self.default_api_key\n        return Subscription.sync_from_stripe_data(stripe_subscription, api_key=api_key)\n\n    def charge(\n        self,\n        amount: Decimal,\n        *,\n        application_fee: Decimal = None,\n        source: Union[str, StripeModel] = None,\n        **kwargs,\n    ) -&gt; Charge:\n        \"\"\"\n        Creates a charge for this customer.\n\n        :param amount: The amount to charge.\n        :type amount: Decimal. Precision is 2; anything more will be ignored.\n        :param source: The source to use for this charge.\n            Must be a source attributed to this customer. If None, the customer's\n            default source is used. Can be either the id of the source or\n            the source object itself.\n        :type source: string, Source\n        \"\"\"\n\n        if not isinstance(amount, Decimal):\n            raise ValueError(\"You must supply a decimal value representing dollars.\")\n\n        # Convert Source to id\n        if source and isinstance(source, StripeModel):\n            source = source.id\n\n        stripe_charge = Charge._api_create(\n            customer=self.id,\n            amount=int(amount * 100),  # Convert dollars into cents\n            application_fee=(\n                int(application_fee * 100) if application_fee else None\n            ),  # Convert dollars into cents\n            source=source,\n            **kwargs,\n        )\n\n        api_key = kwargs.get(\"api_key\") or self.default_api_key\n        return Charge.sync_from_stripe_data(stripe_charge, api_key=api_key)\n\n    def add_invoice_item(\n        self,\n        amount,\n        currency,\n        description=None,\n        discountable=None,\n        invoice=None,\n        metadata=None,\n        subscription=None,\n    ):\n        \"\"\"\n        Adds an arbitrary charge or credit to the customer's upcoming invoice.\n        Different than creating a charge. Charges are separate bills that get\n        processed immediately. Invoice items are appended to the customer's next\n        invoice. This is extremely useful when adding surcharges to subscriptions.\n\n        :param amount: The amount to charge.\n        :type amount: Decimal. Precision is 2; anything more will be ignored.\n        :param currency: 3-letter ISO code for currency\n        :type currency: string\n        :param description: An arbitrary string.\n        :type description: string\n        :param discountable: Controls whether discounts apply to this invoice item.\n            Defaults to False for prorations or negative invoice items,\n            and True for all other invoice items.\n        :type discountable: boolean\n        :param invoice: An existing invoice to add this invoice item to.\n            When left blank, the invoice item will be added to the next upcoming \\\n             scheduled invoice. \\\n             Use this when adding invoice items in response to an \\\n             ``invoice.created`` webhook. You cannot add an invoice \\\n            item to an invoice that has already been paid, attempted or closed.\n        :type invoice: Invoice or string (invoice ID)\n        :param metadata: A set of key/value pairs useful for storing\n            additional information.\n        :type metadata: dict\n        :param subscription: A subscription to add this invoice item to.\n            When left blank, the invoice item will be be added to the next upcoming \\\n            scheduled invoice. When set, scheduled invoices for subscriptions other \\\n            than the specified subscription will ignore the invoice item. \\\n            Use this when you want to express that an invoice item has been accrued \\\n            within the context of a particular subscription.\n        :type subscription: Subscription or string (subscription ID)\n\n        .. Notes:\n        .. if you're using ``Customer.add_invoice_item()`` instead of\n        .. ``Customer.add_invoice_item()``, ``invoice`` and ``subscriptions``\n        .. can only be strings\n        \"\"\"\n        from .billing import InvoiceItem\n\n        if not isinstance(amount, Decimal):\n            raise ValueError(\"You must supply a decimal value representing dollars.\")\n\n        # Convert Invoice to id\n        if invoice is not None and isinstance(invoice, StripeModel):\n            invoice = invoice.id\n\n        # Convert Subscription to id\n        if subscription is not None and isinstance(subscription, StripeModel):\n            subscription = subscription.id\n\n        stripe_invoiceitem = InvoiceItem._api_create(\n            amount=int(amount * 100),  # Convert dollars into cents\n            currency=currency,\n            customer=self.id,\n            description=description,\n            discountable=discountable,\n            invoice=invoice,\n            metadata=metadata,\n            subscription=subscription,\n        )\n\n        return InvoiceItem.sync_from_stripe_data(\n            stripe_invoiceitem, api_key=self.default_api_key\n        )\n\n    def add_payment_method(self, payment_method, set_default=True):\n        \"\"\"\n        Adds an already existing payment method to this customer's account\n\n        :param payment_method: PaymentMethod to be attached to the customer\n        :type payment_method: str, PaymentMethod\n        :param set_default: If true, this will be set as the default_payment_method\n        :type set_default: bool\n        :rtype: PaymentMethod\n        \"\"\"\n        from .payment_methods import PaymentMethod\n\n        stripe_customer = self.api_retrieve()\n        payment_method = PaymentMethod.attach(payment_method, stripe_customer)\n\n        if set_default:\n            stripe_customer[\"invoice_settings\"][\n                \"default_payment_method\"\n            ] = payment_method.id\n            stripe_customer.save()\n\n            # Refresh self from the stripe customer, this should have two effects:\n            # 1) sets self.default_payment_method (we rely on logic in\n            # Customer._manipulate_stripe_object_hook to do this)\n            # 2) updates self.invoice_settings.default_payment_methods\n            self.sync_from_stripe_data(stripe_customer, api_key=self.default_api_key)\n            self.refresh_from_db()\n\n        return payment_method\n\n    def purge(self):\n        \"\"\"Customers are soft deleted as deleted customers are still accessible by the\n        Stripe API and sync for all RelatedModels would fail\"\"\"\n        try:\n            self._api_delete()\n        except InvalidRequestError as exc:\n            if \"No such customer:\" in str(exc):\n                # The exception was thrown because the stripe customer was already\n                # deleted on the stripe side, ignore the exception\n                pass\n            else:\n                # The exception was raised for another reason, re-raise it\n                raise\n\n        # toggle the deleted flag on Customer to indicate it has been\n        # deleted upstream in Stripe\n        self.deleted = True\n\n        if self.subscriber:\n            # Delete the idempotency key used by Customer.create()\n            # So re-creating a customer for this subscriber before the key expires\n            # doesn't return the older Customer data\n            idempotency_key_action = f\"customer:create:{self.subscriber.pk}\"\n            IdempotencyKey.objects.filter(action=idempotency_key_action).delete()\n\n        self.subscriber = None\n\n        # Remove sources\n        self.default_source = None\n        for source in self.legacy_cards.all():\n            source.remove()\n\n        for source in self.sources.all():\n            source.detach()\n\n        self.date_purged = timezone.now()\n        self.save()\n\n    def _get_valid_subscriptions(self):\n        \"\"\"Get a list of this customer's valid subscriptions.\"\"\"\n\n        return [\n            subscription\n            for subscription in self.subscriptions.all()\n            if subscription.is_valid()\n        ]\n\n    def is_subscribed_to(self, product: Union[Product, str]) -&gt; bool:\n        \"\"\"\n        Checks to see if this customer has an active subscription to the given product.\n\n        :param product: The product for which to check for an active subscription.\n        :type product: Product or string (product ID)\n\n        :returns: True if there exists an active subscription, False otherwise.\n        \"\"\"\n\n        if isinstance(product, StripeModel):\n            product = product.id\n\n        for subscription in self._get_valid_subscriptions():\n            for item in subscription.items.all():\n                if item.price and item.price.product.id == product:\n                    return True\n        return False\n\n    def has_any_active_subscription(self):\n        \"\"\"\n        Checks to see if this customer has an active subscription to any plan.\n\n        :returns: True if there exists an active subscription, False otherwise.\n        \"\"\"\n\n        return len(self._get_valid_subscriptions()) != 0\n\n    @property\n    def active_subscriptions(self):\n        \"\"\"\n        Returns active subscriptions\n        (subscriptions with an active status that end in the future).\n        \"\"\"\n        return self.subscriptions.filter(\n            status=enums.SubscriptionStatus.active,\n            current_period_end__gt=timezone.now(),\n        )\n\n    @property\n    def valid_subscriptions(self):\n        \"\"\"\n        Returns this customer's valid subscriptions\n        (subscriptions that aren't canceled or incomplete_expired).\n        \"\"\"\n        return self.subscriptions.exclude(\n            status__in=[\n                enums.SubscriptionStatus.canceled,\n                enums.SubscriptionStatus.incomplete_expired,\n            ]\n        )\n\n    @property\n    def subscription(self):\n        \"\"\"\n        Shortcut to get this customer's subscription.\n\n        :returns: None if the customer has no subscriptions, the subscription if\n            the customer has a subscription.\n        :raises MultipleSubscriptionException: Raised if the customer has multiple\n            subscriptions.\n            In this case, use ``Customer.subscriptions`` instead.\n        \"\"\"\n\n        subscriptions = self.valid_subscriptions\n\n        if subscriptions.count() &gt; 1:\n            raise MultipleSubscriptionException(\n                \"This customer has multiple subscriptions. Use Customer.subscriptions \"\n                \"to access them.\"\n            )\n        else:\n            return subscriptions.first()\n\n    def send_invoice(self, **kwargs):\n        \"\"\"\n        Pay and send the customer's latest invoice.\n\n        :returns: True if an invoice was able to be created and paid, False otherwise\n            (typically if there was nothing to invoice).\n        \"\"\"\n        from .billing import Invoice\n\n        try:\n            invoice = Invoice._api_create(customer=self.id)\n            invoice.pay(**kwargs)\n            return True\n        except InvalidRequestError:  # TODO: Check this for a more\n            #                           specific error message.\n            return False  # There was nothing to invoice\n\n    def retry_unpaid_invoices(self, **kwargs):\n        \"\"\"Attempt to retry collecting payment on the customer's unpaid invoices.\"\"\"\n\n        self._sync_invoices()\n        for invoice in self.invoices.filter(auto_advance=True).exclude(status=\"paid\"):\n            try:\n                invoice.retry(**kwargs)  # Always retry unpaid invoices\n            except InvalidRequestError as exc:\n                if str(exc) != \"Invoice is already paid\":\n                    raise\n\n    def add_coupon(self, coupon, idempotency_key=None):\n        \"\"\"\n        Add a coupon to a Customer.\n\n        The coupon can be a Coupon object, or a valid Stripe Coupon ID.\n        \"\"\"\n        if isinstance(coupon, StripeModel):\n            coupon = coupon.id\n\n        stripe_customer = self.api_retrieve()\n        stripe_customer[\"coupon\"] = coupon\n        stripe_customer.save(idempotency_key=idempotency_key)\n        return self.__class__.sync_from_stripe_data(\n            stripe_customer, api_key=self.default_api_key\n        )\n\n    def upcoming_invoice(self, **kwargs):\n        \"\"\"Gets the upcoming preview invoice (singular) for this customer.\n\n        See `Invoice.upcoming() &lt;#djstripe.Invoice.upcoming&gt;`__.\n\n        The ``customer`` argument to the ``upcoming()`` call is automatically set\n         by this method.\n        \"\"\"\n        from .billing import Invoice\n\n        kwargs[\"customer\"] = self\n        return Invoice.upcoming(**kwargs)\n\n    def _attach_objects_post_save_hook(\n        self,\n        cls,\n        data,\n        pending_relations=None,\n        api_key=djstripe_settings.STRIPE_SECRET_KEY,\n    ):\n        from .billing import Coupon\n        from .payment_methods import DjstripePaymentMethod\n\n        super()._attach_objects_post_save_hook(\n            cls, data, pending_relations=pending_relations, api_key=api_key\n        )\n\n        save = False\n\n        customer_sources = data.get(\"sources\")\n        sources = {}\n        if customer_sources:\n            # Have to create sources before we handle the default_source\n            # We save all of them in the `sources` dict, so that we can find them\n            # by id when we look at the default_source (we need the source type).\n            for source in customer_sources[\"data\"]:\n                obj, _ = DjstripePaymentMethod._get_or_create_source(\n                    source, source[\"object\"], api_key=api_key\n                )\n                sources[source[\"id\"]] = obj\n\n        discount = data.get(\"discount\")\n        if discount:\n            coupon, _created = Coupon._get_or_create_from_stripe_object(\n                discount, \"coupon\", api_key=api_key\n            )\n            if coupon and coupon != self.coupon:\n                self.coupon = coupon\n                save = True\n        elif self.coupon:\n            self.coupon = None\n            save = True\n\n        if save:\n            self.save()\n\n    def _attach_objects_hook(\n        self, cls, data, current_ids=None, api_key=djstripe_settings.STRIPE_SECRET_KEY\n    ):\n        # When we save a customer to Stripe, we add a reference to its Django PK\n        # in the `django_account` key. If we find that, we re-attach that PK.\n        subscriber_key = djstripe_settings.SUBSCRIBER_CUSTOMER_KEY\n        if subscriber_key in (\"\", None):\n            # Disabled. Nothing else to do.\n            return\n\n        subscriber_id = data.get(\"metadata\", {}).get(subscriber_key)\n        if subscriber_id:\n            cls = djstripe_settings.get_subscriber_model()\n            try:\n                # We have to perform a get(), instead of just attaching the PK\n                # blindly as the object may have been deleted or not exist.\n                # Attempting to save that would cause an IntegrityError.\n                self.subscriber = cls.objects.get(pk=subscriber_id)\n            except (cls.DoesNotExist, ValueError):\n                logger.warning(\n                    \"Could not find subscriber %r matching customer %r\",\n                    subscriber_id,\n                    self.id,\n                )\n                self.subscriber = None\n\n    # SYNC methods should be dropped in favor of the master sync infrastructure proposed\n    def _sync_invoices(self, **kwargs):\n        from .billing import Invoice\n\n        api_key = kwargs.get(\"api_key\") or self.default_api_key\n        for stripe_invoice in Invoice.api_list(customer=self.id, **kwargs):\n            Invoice.sync_from_stripe_data(stripe_invoice, api_key=api_key)\n\n    def _sync_charges(self, **kwargs):\n        api_key = kwargs.get(\"api_key\") or self.default_api_key\n        for stripe_charge in Charge.api_list(customer=self.id, **kwargs):\n            Charge.sync_from_stripe_data(stripe_charge, api_key=api_key)\n\n    def _sync_cards(self, **kwargs):\n        from .payment_methods import Card\n\n        api_key = kwargs.get(\"api_key\") or self.default_api_key\n        for stripe_card in Card.api_list(customer=self, **kwargs):\n            Card.sync_from_stripe_data(stripe_card, api_key=api_key)\n\n    def _sync_subscriptions(self, **kwargs):\n        from .billing import Subscription\n\n        api_key = kwargs.get(\"api_key\") or self.default_api_key\n        for stripe_subscription in Subscription.api_list(\n            customer=self.id, status=\"all\", **kwargs\n        ):\n            Subscription.sync_from_stripe_data(stripe_subscription, api_key=api_key)\n</code></pre>"},{"location":"reference/models/#djstripe.models.core.Customer-attributes","title":"Attributes","text":""},{"location":"reference/models/#djstripe.models.core.Customer.active_subscriptions","title":"<code>djstripe.models.core.Customer.active_subscriptions</code>  <code>property</code>","text":"<p>Returns active subscriptions (subscriptions with an active status that end in the future).</p>"},{"location":"reference/models/#djstripe.models.core.Customer.address","title":"<code>djstripe.models.core.Customer.address = JSONField(null=True, blank=True, help_text=\"The customer's address.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Customer.balance","title":"<code>djstripe.models.core.Customer.balance = StripeQuantumCurrencyAmountField(null=True, blank=True, default=0, help_text=\"Current balance (in cents), if any, being stored on the customer's account. If negative, the customer has credit to apply to the next invoice. If positive, the customer has an amount owed that will be added to the next invoice. The balance does not refer to any unpaid invoices; it solely takes into account amounts that have yet to be successfully applied to any invoice. This balance is only taken into account for recurring billing purposes (i.e., subscriptions, invoices, invoice items).\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Customer.coupon","title":"<code>djstripe.models.core.Customer.coupon = models.ForeignKey('Coupon', null=True, blank=True, on_delete=models.SET_NULL)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Customer.coupon_end","title":"<code>djstripe.models.core.Customer.coupon_end = StripeDateTimeField(null=True, blank=True, editable=False, help_text='If a coupon is present and has a limited duration, the date that the discount will end.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Customer.coupon_start","title":"<code>djstripe.models.core.Customer.coupon_start = StripeDateTimeField(null=True, blank=True, editable=False, help_text='If a coupon is present, the date at which it was applied.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Customer.credits","title":"<code>djstripe.models.core.Customer.credits</code>  <code>property</code>","text":"<p>The customer is considered to have credits if their balance is below 0.</p>"},{"location":"reference/models/#djstripe.models.core.Customer.currency","title":"<code>djstripe.models.core.Customer.currency = StripeCurrencyCodeField(blank=True, default='', help_text='The currency the customer can be charged in for recurring billing purposes')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Customer.customer_payment_methods","title":"<code>djstripe.models.core.Customer.customer_payment_methods</code>  <code>property</code>","text":"<p>An iterable of all of the customer's payment methods (sources, then legacy cards)</p>"},{"location":"reference/models/#djstripe.models.core.Customer.date_purged","title":"<code>djstripe.models.core.Customer.date_purged = models.DateTimeField(null=True, editable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Customer.default_payment_method","title":"<code>djstripe.models.core.Customer.default_payment_method = StripeForeignKey('PaymentMethod', null=True, blank=True, on_delete=models.SET_NULL, related_name='+', help_text='default payment method used for subscriptions and invoices for the customer.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Customer.default_source","title":"<code>djstripe.models.core.Customer.default_source = PaymentMethodForeignKey(on_delete=models.SET_NULL, null=True, blank=True, related_name='customers')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Customer.deleted","title":"<code>djstripe.models.core.Customer.deleted = models.BooleanField(default=False, null=True, blank=True, help_text='Whether the Customer instance has been deleted upstream in Stripe or not.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Customer.delinquent","title":"<code>djstripe.models.core.Customer.delinquent = models.BooleanField(null=True, blank=True, default=False, help_text=\"Whether or not the latest charge for the customer's latest invoice has failed.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Customer.discount","title":"<code>djstripe.models.core.Customer.discount = JSONField(null=True, blank=True, help_text='Describes the current discount active on the customer, if there is one.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Customer.email","title":"<code>djstripe.models.core.Customer.email = models.TextField(max_length=5000, default='', blank=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Customer.expand_fields","title":"<code>djstripe.models.core.Customer.expand_fields = ['default_source', 'sources']</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Customer.invoice_prefix","title":"<code>djstripe.models.core.Customer.invoice_prefix = models.CharField(default='', blank=True, max_length=255, help_text='The prefix for the customer used to generate unique invoice numbers.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Customer.invoice_settings","title":"<code>djstripe.models.core.Customer.invoice_settings = JSONField(null=True, blank=True, help_text=\"The customer's default invoice settings.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Customer.name","title":"<code>djstripe.models.core.Customer.name = models.TextField(max_length=5000, default='', blank=True, help_text=\"The customer's full name or business name.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Customer.pending_charges","title":"<code>djstripe.models.core.Customer.pending_charges</code>  <code>property</code>","text":"<p>The customer is considered to have pending charges if their balance is above 0.</p>"},{"location":"reference/models/#djstripe.models.core.Customer.phone","title":"<code>djstripe.models.core.Customer.phone = models.TextField(max_length=5000, default='', blank=True, help_text=\"The customer's phone number.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Customer.preferred_locales","title":"<code>djstripe.models.core.Customer.preferred_locales = JSONField(null=True, blank=True, help_text=\"The customer's preferred locales (languages), ordered by preference.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Customer.shipping","title":"<code>djstripe.models.core.Customer.shipping = JSONField(null=True, blank=True, help_text='Shipping information associated with the customer.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Customer.stripe_class","title":"<code>djstripe.models.core.Customer.stripe_class = stripe.Customer</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Customer.stripe_dashboard_item_name","title":"<code>djstripe.models.core.Customer.stripe_dashboard_item_name = 'customers'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Customer.subscriber","title":"<code>djstripe.models.core.Customer.subscriber = models.ForeignKey(djstripe_settings.get_subscriber_model_string(), blank=True, null=True, on_delete=models.SET_NULL, related_name='djstripe_customers')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Customer.subscription","title":"<code>djstripe.models.core.Customer.subscription</code>  <code>property</code>","text":"<p>Shortcut to get this customer's subscription.</p> <p>:returns: None if the customer has no subscriptions, the subscription if     the customer has a subscription. :raises MultipleSubscriptionException: Raised if the customer has multiple     subscriptions.     In this case, use <code>Customer.subscriptions</code> instead.</p>"},{"location":"reference/models/#djstripe.models.core.Customer.tax_exempt","title":"<code>djstripe.models.core.Customer.tax_exempt = StripeEnumField(enum=enums.CustomerTaxExempt, default='', help_text='Describes the customer\\'s tax exemption status. When set to reverse, invoice and receipt PDFs include the text \"Reverse charge\".')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Customer.valid_subscriptions","title":"<code>djstripe.models.core.Customer.valid_subscriptions</code>  <code>property</code>","text":"<p>Returns this customer's valid subscriptions (subscriptions that aren't canceled or incomplete_expired).</p>"},{"location":"reference/models/#djstripe.models.core.Customer-functions","title":"Functions","text":""},{"location":"reference/models/#djstripe.models.core.Customer.__str__","title":"<code>djstripe.models.core.Customer.__str__()</code>","text":"Source code in <code>djstripe/models/core.py</code> <pre><code>def __str__(self):\n    if self.subscriber:\n        return str(self.subscriber)\n\n    return self.name or self.description or self.id\n</code></pre>"},{"location":"reference/models/#djstripe.models.core.Customer.add_coupon","title":"<code>djstripe.models.core.Customer.add_coupon(coupon, idempotency_key=None)</code>","text":"<p>Add a coupon to a Customer.</p> <p>The coupon can be a Coupon object, or a valid Stripe Coupon ID.</p> Source code in <code>djstripe/models/core.py</code> <pre><code>def add_coupon(self, coupon, idempotency_key=None):\n    \"\"\"\n    Add a coupon to a Customer.\n\n    The coupon can be a Coupon object, or a valid Stripe Coupon ID.\n    \"\"\"\n    if isinstance(coupon, StripeModel):\n        coupon = coupon.id\n\n    stripe_customer = self.api_retrieve()\n    stripe_customer[\"coupon\"] = coupon\n    stripe_customer.save(idempotency_key=idempotency_key)\n    return self.__class__.sync_from_stripe_data(\n        stripe_customer, api_key=self.default_api_key\n    )\n</code></pre>"},{"location":"reference/models/#djstripe.models.core.Customer.add_invoice_item","title":"<code>djstripe.models.core.Customer.add_invoice_item(amount, currency, description=None, discountable=None, invoice=None, metadata=None, subscription=None)</code>","text":"<p>Adds an arbitrary charge or credit to the customer's upcoming invoice. Different than creating a charge. Charges are separate bills that get processed immediately. Invoice items are appended to the customer's next invoice. This is extremely useful when adding surcharges to subscriptions.</p> <p>:param amount: The amount to charge. :type amount: Decimal. Precision is 2; anything more will be ignored. :param currency: 3-letter ISO code for currency :type currency: string :param description: An arbitrary string. :type description: string :param discountable: Controls whether discounts apply to this invoice item.     Defaults to False for prorations or negative invoice items,     and True for all other invoice items. :type discountable: boolean :param invoice: An existing invoice to add this invoice item to.     When left blank, the invoice item will be added to the next upcoming              scheduled invoice.              Use this when adding invoice items in response to an              <code>invoice.created</code> webhook. You cannot add an invoice             item to an invoice that has already been paid, attempted or closed. :type invoice: Invoice or string (invoice ID) :param metadata: A set of key/value pairs useful for storing     additional information. :type metadata: dict :param subscription: A subscription to add this invoice item to.     When left blank, the invoice item will be be added to the next upcoming             scheduled invoice. When set, scheduled invoices for subscriptions other             than the specified subscription will ignore the invoice item.             Use this when you want to express that an invoice item has been accrued             within the context of a particular subscription. :type subscription: Subscription or string (subscription ID)</p> <p>.. Notes: .. if you're using <code>Customer.add_invoice_item()</code> instead of .. <code>Customer.add_invoice_item()</code>, <code>invoice</code> and <code>subscriptions</code> .. can only be strings</p> Source code in <code>djstripe/models/core.py</code> <pre><code>def add_invoice_item(\n    self,\n    amount,\n    currency,\n    description=None,\n    discountable=None,\n    invoice=None,\n    metadata=None,\n    subscription=None,\n):\n    \"\"\"\n    Adds an arbitrary charge or credit to the customer's upcoming invoice.\n    Different than creating a charge. Charges are separate bills that get\n    processed immediately. Invoice items are appended to the customer's next\n    invoice. This is extremely useful when adding surcharges to subscriptions.\n\n    :param amount: The amount to charge.\n    :type amount: Decimal. Precision is 2; anything more will be ignored.\n    :param currency: 3-letter ISO code for currency\n    :type currency: string\n    :param description: An arbitrary string.\n    :type description: string\n    :param discountable: Controls whether discounts apply to this invoice item.\n        Defaults to False for prorations or negative invoice items,\n        and True for all other invoice items.\n    :type discountable: boolean\n    :param invoice: An existing invoice to add this invoice item to.\n        When left blank, the invoice item will be added to the next upcoming \\\n         scheduled invoice. \\\n         Use this when adding invoice items in response to an \\\n         ``invoice.created`` webhook. You cannot add an invoice \\\n        item to an invoice that has already been paid, attempted or closed.\n    :type invoice: Invoice or string (invoice ID)\n    :param metadata: A set of key/value pairs useful for storing\n        additional information.\n    :type metadata: dict\n    :param subscription: A subscription to add this invoice item to.\n        When left blank, the invoice item will be be added to the next upcoming \\\n        scheduled invoice. When set, scheduled invoices for subscriptions other \\\n        than the specified subscription will ignore the invoice item. \\\n        Use this when you want to express that an invoice item has been accrued \\\n        within the context of a particular subscription.\n    :type subscription: Subscription or string (subscription ID)\n\n    .. Notes:\n    .. if you're using ``Customer.add_invoice_item()`` instead of\n    .. ``Customer.add_invoice_item()``, ``invoice`` and ``subscriptions``\n    .. can only be strings\n    \"\"\"\n    from .billing import InvoiceItem\n\n    if not isinstance(amount, Decimal):\n        raise ValueError(\"You must supply a decimal value representing dollars.\")\n\n    # Convert Invoice to id\n    if invoice is not None and isinstance(invoice, StripeModel):\n        invoice = invoice.id\n\n    # Convert Subscription to id\n    if subscription is not None and isinstance(subscription, StripeModel):\n        subscription = subscription.id\n\n    stripe_invoiceitem = InvoiceItem._api_create(\n        amount=int(amount * 100),  # Convert dollars into cents\n        currency=currency,\n        customer=self.id,\n        description=description,\n        discountable=discountable,\n        invoice=invoice,\n        metadata=metadata,\n        subscription=subscription,\n    )\n\n    return InvoiceItem.sync_from_stripe_data(\n        stripe_invoiceitem, api_key=self.default_api_key\n    )\n</code></pre>"},{"location":"reference/models/#djstripe.models.core.Customer.add_payment_method","title":"<code>djstripe.models.core.Customer.add_payment_method(payment_method, set_default=True)</code>","text":"<p>Adds an already existing payment method to this customer's account</p> <p>:param payment_method: PaymentMethod to be attached to the customer :type payment_method: str, PaymentMethod :param set_default: If true, this will be set as the default_payment_method :type set_default: bool :rtype: PaymentMethod</p> Source code in <code>djstripe/models/core.py</code> <pre><code>def add_payment_method(self, payment_method, set_default=True):\n    \"\"\"\n    Adds an already existing payment method to this customer's account\n\n    :param payment_method: PaymentMethod to be attached to the customer\n    :type payment_method: str, PaymentMethod\n    :param set_default: If true, this will be set as the default_payment_method\n    :type set_default: bool\n    :rtype: PaymentMethod\n    \"\"\"\n    from .payment_methods import PaymentMethod\n\n    stripe_customer = self.api_retrieve()\n    payment_method = PaymentMethod.attach(payment_method, stripe_customer)\n\n    if set_default:\n        stripe_customer[\"invoice_settings\"][\n            \"default_payment_method\"\n        ] = payment_method.id\n        stripe_customer.save()\n\n        # Refresh self from the stripe customer, this should have two effects:\n        # 1) sets self.default_payment_method (we rely on logic in\n        # Customer._manipulate_stripe_object_hook to do this)\n        # 2) updates self.invoice_settings.default_payment_methods\n        self.sync_from_stripe_data(stripe_customer, api_key=self.default_api_key)\n        self.refresh_from_db()\n\n    return payment_method\n</code></pre>"},{"location":"reference/models/#djstripe.models.core.Customer.charge","title":"<code>djstripe.models.core.Customer.charge(amount, *, application_fee=None, source=None, **kwargs)</code>","text":"<p>Creates a charge for this customer.</p> <p>:param amount: The amount to charge. :type amount: Decimal. Precision is 2; anything more will be ignored. :param source: The source to use for this charge.     Must be a source attributed to this customer. If None, the customer's     default source is used. Can be either the id of the source or     the source object itself. :type source: string, Source</p> Source code in <code>djstripe/models/core.py</code> <pre><code>def charge(\n    self,\n    amount: Decimal,\n    *,\n    application_fee: Decimal = None,\n    source: Union[str, StripeModel] = None,\n    **kwargs,\n) -&gt; Charge:\n    \"\"\"\n    Creates a charge for this customer.\n\n    :param amount: The amount to charge.\n    :type amount: Decimal. Precision is 2; anything more will be ignored.\n    :param source: The source to use for this charge.\n        Must be a source attributed to this customer. If None, the customer's\n        default source is used. Can be either the id of the source or\n        the source object itself.\n    :type source: string, Source\n    \"\"\"\n\n    if not isinstance(amount, Decimal):\n        raise ValueError(\"You must supply a decimal value representing dollars.\")\n\n    # Convert Source to id\n    if source and isinstance(source, StripeModel):\n        source = source.id\n\n    stripe_charge = Charge._api_create(\n        customer=self.id,\n        amount=int(amount * 100),  # Convert dollars into cents\n        application_fee=(\n            int(application_fee * 100) if application_fee else None\n        ),  # Convert dollars into cents\n        source=source,\n        **kwargs,\n    )\n\n    api_key = kwargs.get(\"api_key\") or self.default_api_key\n    return Charge.sync_from_stripe_data(stripe_charge, api_key=api_key)\n</code></pre>"},{"location":"reference/models/#djstripe.models.core.Customer.create","title":"<code>djstripe.models.core.Customer.create(subscriber, idempotency_key=None, stripe_account=None)</code>  <code>classmethod</code>","text":"Source code in <code>djstripe/models/core.py</code> <pre><code>@classmethod\ndef create(cls, subscriber, idempotency_key=None, stripe_account=None):\n    metadata = {}\n    subscriber_key = djstripe_settings.SUBSCRIBER_CUSTOMER_KEY\n    if subscriber_key not in (\"\", None):\n        metadata[subscriber_key] = subscriber.pk\n\n    try:\n        # if subscriber table has a get_full_name() method, use it as name\n        # ref django.contrib.auth.models.User.get_full_name\n        name = subscriber.get_full_name()\n    except AttributeError:\n        name = None\n\n    stripe_customer = cls._api_create(\n        email=subscriber.email,\n        name=name,\n        idempotency_key=idempotency_key,\n        metadata=metadata,\n        stripe_account=stripe_account,\n    )\n    customer, created = cls.objects.get_or_create(\n        id=stripe_customer[\"id\"],\n        defaults={\n            \"subscriber\": subscriber,\n            \"livemode\": stripe_customer[\"livemode\"],\n            \"balance\": stripe_customer.get(\"balance\", 0),\n            \"delinquent\": stripe_customer.get(\"delinquent\", False),\n        },\n    )\n\n    return customer\n</code></pre>"},{"location":"reference/models/#djstripe.models.core.Customer.get_or_create","title":"<code>djstripe.models.core.Customer.get_or_create(subscriber, livemode=djstripe_settings.STRIPE_LIVE_MODE, stripe_account=None)</code>  <code>classmethod</code>","text":"<p>Get or create a dj-stripe customer.</p> <p>:param subscriber: The subscriber model instance for which to get or     create a customer. :type subscriber: User</p> <p>:param livemode: Whether to get the subscriber in live or test mode. :type livemode: bool</p> Source code in <code>djstripe/models/core.py</code> <pre><code>@classmethod\ndef get_or_create(\n    cls,\n    subscriber,\n    livemode=djstripe_settings.STRIPE_LIVE_MODE,\n    stripe_account=None,\n):\n    \"\"\"\n    Get or create a dj-stripe customer.\n\n    :param subscriber: The subscriber model instance for which to get or\n        create a customer.\n    :type subscriber: User\n\n    :param livemode: Whether to get the subscriber in live or test mode.\n    :type livemode: bool\n    \"\"\"\n\n    try:\n        return cls.objects.get(subscriber=subscriber, livemode=livemode), False\n    except cls.DoesNotExist:\n        action = f\"create:{subscriber.pk}\"\n        idempotency_key = djstripe_settings.get_idempotency_key(\n            \"customer\", action, livemode\n        )\n        return (\n            cls.create(\n                subscriber,\n                idempotency_key=idempotency_key,\n                stripe_account=stripe_account,\n            ),\n            True,\n        )\n</code></pre>"},{"location":"reference/models/#djstripe.models.core.Customer.has_any_active_subscription","title":"<code>djstripe.models.core.Customer.has_any_active_subscription()</code>","text":"<p>Checks to see if this customer has an active subscription to any plan.</p> <p>:returns: True if there exists an active subscription, False otherwise.</p> Source code in <code>djstripe/models/core.py</code> <pre><code>def has_any_active_subscription(self):\n    \"\"\"\n    Checks to see if this customer has an active subscription to any plan.\n\n    :returns: True if there exists an active subscription, False otherwise.\n    \"\"\"\n\n    return len(self._get_valid_subscriptions()) != 0\n</code></pre>"},{"location":"reference/models/#djstripe.models.core.Customer.is_subscribed_to","title":"<code>djstripe.models.core.Customer.is_subscribed_to(product)</code>","text":"<p>Checks to see if this customer has an active subscription to the given product.</p> <p>:param product: The product for which to check for an active subscription. :type product: Product or string (product ID)</p> <p>:returns: True if there exists an active subscription, False otherwise.</p> Source code in <code>djstripe/models/core.py</code> <pre><code>def is_subscribed_to(self, product: Union[Product, str]) -&gt; bool:\n    \"\"\"\n    Checks to see if this customer has an active subscription to the given product.\n\n    :param product: The product for which to check for an active subscription.\n    :type product: Product or string (product ID)\n\n    :returns: True if there exists an active subscription, False otherwise.\n    \"\"\"\n\n    if isinstance(product, StripeModel):\n        product = product.id\n\n    for subscription in self._get_valid_subscriptions():\n        for item in subscription.items.all():\n            if item.price and item.price.product.id == product:\n                return True\n    return False\n</code></pre>"},{"location":"reference/models/#djstripe.models.core.Customer.purge","title":"<code>djstripe.models.core.Customer.purge()</code>","text":"<p>Customers are soft deleted as deleted customers are still accessible by the Stripe API and sync for all RelatedModels would fail</p> Source code in <code>djstripe/models/core.py</code> <pre><code>def purge(self):\n    \"\"\"Customers are soft deleted as deleted customers are still accessible by the\n    Stripe API and sync for all RelatedModels would fail\"\"\"\n    try:\n        self._api_delete()\n    except InvalidRequestError as exc:\n        if \"No such customer:\" in str(exc):\n            # The exception was thrown because the stripe customer was already\n            # deleted on the stripe side, ignore the exception\n            pass\n        else:\n            # The exception was raised for another reason, re-raise it\n            raise\n\n    # toggle the deleted flag on Customer to indicate it has been\n    # deleted upstream in Stripe\n    self.deleted = True\n\n    if self.subscriber:\n        # Delete the idempotency key used by Customer.create()\n        # So re-creating a customer for this subscriber before the key expires\n        # doesn't return the older Customer data\n        idempotency_key_action = f\"customer:create:{self.subscriber.pk}\"\n        IdempotencyKey.objects.filter(action=idempotency_key_action).delete()\n\n    self.subscriber = None\n\n    # Remove sources\n    self.default_source = None\n    for source in self.legacy_cards.all():\n        source.remove()\n\n    for source in self.sources.all():\n        source.detach()\n\n    self.date_purged = timezone.now()\n    self.save()\n</code></pre>"},{"location":"reference/models/#djstripe.models.core.Customer.retry_unpaid_invoices","title":"<code>djstripe.models.core.Customer.retry_unpaid_invoices(**kwargs)</code>","text":"<p>Attempt to retry collecting payment on the customer's unpaid invoices.</p> Source code in <code>djstripe/models/core.py</code> <pre><code>def retry_unpaid_invoices(self, **kwargs):\n    \"\"\"Attempt to retry collecting payment on the customer's unpaid invoices.\"\"\"\n\n    self._sync_invoices()\n    for invoice in self.invoices.filter(auto_advance=True).exclude(status=\"paid\"):\n        try:\n            invoice.retry(**kwargs)  # Always retry unpaid invoices\n        except InvalidRequestError as exc:\n            if str(exc) != \"Invoice is already paid\":\n                raise\n</code></pre>"},{"location":"reference/models/#djstripe.models.core.Customer.send_invoice","title":"<code>djstripe.models.core.Customer.send_invoice(**kwargs)</code>","text":"<p>Pay and send the customer's latest invoice.</p> <p>:returns: True if an invoice was able to be created and paid, False otherwise     (typically if there was nothing to invoice).</p> Source code in <code>djstripe/models/core.py</code> <pre><code>def send_invoice(self, **kwargs):\n    \"\"\"\n    Pay and send the customer's latest invoice.\n\n    :returns: True if an invoice was able to be created and paid, False otherwise\n        (typically if there was nothing to invoice).\n    \"\"\"\n    from .billing import Invoice\n\n    try:\n        invoice = Invoice._api_create(customer=self.id)\n        invoice.pay(**kwargs)\n        return True\n    except InvalidRequestError:  # TODO: Check this for a more\n        #                           specific error message.\n        return False  # There was nothing to invoice\n</code></pre>"},{"location":"reference/models/#djstripe.models.core.Customer.subscribe","title":"<code>djstripe.models.core.Customer.subscribe(*, items=None, price=None, plan=None, **kwargs)</code>","text":"<p>Subscribes this customer to all the prices or plans in the items dict (Recommended).</p> <p>:param items: A list of up to 20 subscription items, each with an attached price :type list:     :param items: A dictionary of Plan (or Plan ID) or Price (or Price ID)     :type dict:  The price or plan to which to subscribe the customer.</p> <p>:param price: The price to which to subscribe the customer. :type price: Price or string (price ID)</p> <p>:param plan: The plan to which to subscribe the customer. :type plan: Plan or string (plan ID)</p> Source code in <code>djstripe/models/core.py</code> <pre><code>def subscribe(self, *, items=None, price=None, plan=None, **kwargs):\n    \"\"\"\n    Subscribes this customer to all the prices or plans in the items dict (Recommended).\n\n    :param items: A list of up to 20 subscription items, each with an attached price\n    :type list:\n        :param items: A dictionary of Plan (or Plan ID) or Price (or Price ID)\n        :type dict:  The price or plan to which to subscribe the customer.\n\n    :param price: The price to which to subscribe the customer.\n    :type price: Price or string (price ID)\n\n    :param plan: The plan to which to subscribe the customer.\n    :type plan: Plan or string (plan ID)\n    \"\"\"\n    from .billing import Subscription\n\n    if (items and price) or (items and plan) or (price and plan):\n        raise TypeError(\"Please define only one of items, price or plan arguments.\")\n\n    if items is None:\n        _items = [{\"price\": price}]\n    else:\n        _items = []\n        for item in items:\n            price = item.get(\"price\", \"\")\n            plan = item.get(\"plan\", \"\")\n            price, kwargs = _sanitise_price(price, plan, **kwargs)\n            if \"price\" in item:\n                _items.append({\"price\": price})\n            if \"plan\" in item:\n                _items.append({\"plan\": price})\n\n    stripe_subscription = Subscription._api_create(\n        items=_items, customer=self.id, **kwargs\n    )\n\n    api_key = kwargs.get(\"api_key\") or self.default_api_key\n    return Subscription.sync_from_stripe_data(stripe_subscription, api_key=api_key)\n</code></pre>"},{"location":"reference/models/#djstripe.models.core.Customer.upcoming_invoice","title":"<code>djstripe.models.core.Customer.upcoming_invoice(**kwargs)</code>","text":"<p>Gets the upcoming preview invoice (singular) for this customer.</p> <p>See <code>Invoice.upcoming() &lt;#djstripe.Invoice.upcoming&gt;</code>__.</p> <p>The <code>customer</code> argument to the <code>upcoming()</code> call is automatically set  by this method.</p> Source code in <code>djstripe/models/core.py</code> <pre><code>def upcoming_invoice(self, **kwargs):\n    \"\"\"Gets the upcoming preview invoice (singular) for this customer.\n\n    See `Invoice.upcoming() &lt;#djstripe.Invoice.upcoming&gt;`__.\n\n    The ``customer`` argument to the ``upcoming()`` call is automatically set\n     by this method.\n    \"\"\"\n    from .billing import Invoice\n\n    kwargs[\"customer\"] = self\n    return Invoice.upcoming(**kwargs)\n</code></pre>"},{"location":"reference/models/#djstripe.models.core.Dispute","title":"<code>djstripe.models.core.Dispute</code>","text":"<p>               Bases: <code>StripeModel</code></p> <p>A dispute occurs when a customer questions your charge with their card issuer. When this happens, you're given the opportunity to respond to the dispute with evidence that shows that the charge is legitimate</p> <p>Stripe documentation: https://stripe.com/docs/api?lang=python#disputes</p> Source code in <code>djstripe/models/core.py</code> <pre><code>class Dispute(StripeModel):\n    \"\"\"\n    A dispute occurs when a customer questions your charge with their\n    card issuer. When this happens, you're given the opportunity to\n    respond to the dispute with evidence that shows that the charge is legitimate\n\n    Stripe documentation: https://stripe.com/docs/api?lang=python#disputes\n    \"\"\"\n\n    stripe_class = stripe.Dispute\n    stripe_dashboard_item_name = \"payments\"\n\n    amount = StripeQuantumCurrencyAmountField(\n        help_text=(\n            \"Disputed amount (in cents). Usually the amount of the charge, \"\n            \"but can differ \"\n            \"(usually because of currency fluctuation or because only part of \"\n            \"the order is disputed).\"\n        )\n    )\n    balance_transaction = StripeForeignKey(\n        \"BalanceTransaction\",\n        null=True,\n        on_delete=models.CASCADE,\n        related_name=\"disputes\",\n        help_text=(\n            \"Balance transaction that describes the impact on your account balance.\"\n        ),\n    )\n    balance_transactions = JSONField(\n        default=list,\n        help_text=(\n            \"List of 0, 1 or 2 Balance Transactions that show funds withdrawn and\"\n            \" reinstated to your Stripe account as a result of this dispute.\"\n        ),\n    )\n    # charge is nullable to avoid infinite sync as Charge model has a dispute field as well\n    charge = StripeForeignKey(\n        \"Charge\",\n        null=True,\n        on_delete=models.CASCADE,\n        related_name=\"disputes\",\n        help_text=\"The charge that was disputed\",\n    )\n    currency = StripeCurrencyCodeField()\n    evidence = JSONField(help_text=\"Evidence provided to respond to a dispute.\")\n    evidence_details = JSONField(help_text=\"Information about the evidence submission.\")\n    is_charge_refundable = models.BooleanField(\n        help_text=(\n            \"If true, it is still possible to refund the disputed payment. \"\n            \"Once the payment has been fully refunded, no further funds will \"\n            \"be withdrawn from your Stripe account as a result of this dispute.\"\n        )\n    )\n    payment_intent = StripeForeignKey(\n        \"PaymentIntent\",\n        null=True,\n        on_delete=models.CASCADE,\n        related_name=\"disputes\",\n        help_text=\"The PaymentIntent that was disputed\",\n    )\n    reason = StripeEnumField(enum=enums.DisputeReason)\n    status = StripeEnumField(enum=enums.DisputeStatus)\n\n    def __str__(self):\n        amount = get_friendly_currency_amount(self.amount / 100, self.currency)\n        status = enums.DisputeStatus.humanize(self.status)\n        return f\"{amount} ({status}) \"\n\n    def get_stripe_dashboard_url(self) -&gt; str:\n        \"\"\"Get the stripe dashboard url for this object.\"\"\"\n        return (\n            f\"{self._get_base_stripe_dashboard_url()}\"\n            f\"{self.stripe_dashboard_item_name}/{self.payment_intent.id}\"\n        )\n\n    def _attach_objects_post_save_hook(\n        self,\n        cls,\n        data,\n        pending_relations=None,\n        api_key=djstripe_settings.STRIPE_SECRET_KEY,\n    ):\n        super()._attach_objects_post_save_hook(\n            cls, data, pending_relations=pending_relations, api_key=api_key\n        )\n\n        # Retrieve and save files from the dispute.evidence object.\n        # todo find a better way of retrieving and syncing File Type fields from Dispute object\n        for field in (\n            \"cancellation_policy\",\n            \"customer_communication\",\n            \"customer_signature\",\n            \"duplicate_charge_documentation\",\n            \"receipt\",\n            \"refund_policy\",\n            \"service_documentation\",\n            \"shipping_documentation\",\n            \"uncategorized_file\",\n        ):\n            file_upload_id = self.evidence.get(field, None)\n            if file_upload_id:\n                try:\n                    File.sync_from_stripe_data(\n                        File(id=file_upload_id).api_retrieve(api_key=api_key),\n                        api_key=api_key,\n                    )\n                except stripe.error.PermissionError:\n                    # No permission to retrieve the data with the key\n                    # Log a warning message\n                    logger.warning(\n                        \"No permission to retrieve the File Evidence Object.\"\n                    )\n                except stripe.error.InvalidRequestError:\n                    raise\n\n        # iterate and sync every balance transaction\n        for stripe_balance_transaction in self.balance_transactions:\n            BalanceTransaction.sync_from_stripe_data(\n                stripe_balance_transaction, api_key=api_key\n            )\n</code></pre>"},{"location":"reference/models/#djstripe.models.core.Dispute-attributes","title":"Attributes","text":""},{"location":"reference/models/#djstripe.models.core.Dispute.amount","title":"<code>djstripe.models.core.Dispute.amount = StripeQuantumCurrencyAmountField(help_text='Disputed amount (in cents). Usually the amount of the charge, but can differ (usually because of currency fluctuation or because only part of the order is disputed).')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Dispute.balance_transaction","title":"<code>djstripe.models.core.Dispute.balance_transaction = StripeForeignKey('BalanceTransaction', null=True, on_delete=models.CASCADE, related_name='disputes', help_text='Balance transaction that describes the impact on your account balance.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Dispute.balance_transactions","title":"<code>djstripe.models.core.Dispute.balance_transactions = JSONField(default=list, help_text='List of 0, 1 or 2 Balance Transactions that show funds withdrawn and reinstated to your Stripe account as a result of this dispute.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Dispute.charge","title":"<code>djstripe.models.core.Dispute.charge = StripeForeignKey('Charge', null=True, on_delete=models.CASCADE, related_name='disputes', help_text='The charge that was disputed')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Dispute.currency","title":"<code>djstripe.models.core.Dispute.currency = StripeCurrencyCodeField()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Dispute.evidence","title":"<code>djstripe.models.core.Dispute.evidence = JSONField(help_text='Evidence provided to respond to a dispute.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Dispute.evidence_details","title":"<code>djstripe.models.core.Dispute.evidence_details = JSONField(help_text='Information about the evidence submission.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Dispute.is_charge_refundable","title":"<code>djstripe.models.core.Dispute.is_charge_refundable = models.BooleanField(help_text='If true, it is still possible to refund the disputed payment. Once the payment has been fully refunded, no further funds will be withdrawn from your Stripe account as a result of this dispute.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Dispute.payment_intent","title":"<code>djstripe.models.core.Dispute.payment_intent = StripeForeignKey('PaymentIntent', null=True, on_delete=models.CASCADE, related_name='disputes', help_text='The PaymentIntent that was disputed')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Dispute.reason","title":"<code>djstripe.models.core.Dispute.reason = StripeEnumField(enum=enums.DisputeReason)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Dispute.status","title":"<code>djstripe.models.core.Dispute.status = StripeEnumField(enum=enums.DisputeStatus)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Dispute.stripe_class","title":"<code>djstripe.models.core.Dispute.stripe_class = stripe.Dispute</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Dispute.stripe_dashboard_item_name","title":"<code>djstripe.models.core.Dispute.stripe_dashboard_item_name = 'payments'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Dispute-functions","title":"Functions","text":""},{"location":"reference/models/#djstripe.models.core.Dispute.__str__","title":"<code>djstripe.models.core.Dispute.__str__()</code>","text":"Source code in <code>djstripe/models/core.py</code> <pre><code>def __str__(self):\n    amount = get_friendly_currency_amount(self.amount / 100, self.currency)\n    status = enums.DisputeStatus.humanize(self.status)\n    return f\"{amount} ({status}) \"\n</code></pre>"},{"location":"reference/models/#djstripe.models.core.Dispute.get_stripe_dashboard_url","title":"<code>djstripe.models.core.Dispute.get_stripe_dashboard_url()</code>","text":"<p>Get the stripe dashboard url for this object.</p> Source code in <code>djstripe/models/core.py</code> <pre><code>def get_stripe_dashboard_url(self) -&gt; str:\n    \"\"\"Get the stripe dashboard url for this object.\"\"\"\n    return (\n        f\"{self._get_base_stripe_dashboard_url()}\"\n        f\"{self.stripe_dashboard_item_name}/{self.payment_intent.id}\"\n    )\n</code></pre>"},{"location":"reference/models/#djstripe.models.core.Event","title":"<code>djstripe.models.core.Event</code>","text":"<p>               Bases: <code>StripeModel</code></p> <p>Events are Stripe's way of letting you know when something interesting happens in your account. When an interesting event occurs, a new Event object is created and POSTed to the configured webhook URL if the Event type matches.</p> <p>Stripe documentation: https://stripe.com/docs/api/events?lang=python</p> Source code in <code>djstripe/models/core.py</code> <pre><code>class Event(StripeModel):\n    \"\"\"\n    Events are Stripe's way of letting you know when something interesting\n    happens in your account.\n    When an interesting event occurs, a new Event object is created and POSTed\n    to the configured webhook URL if the Event type matches.\n\n    Stripe documentation: https://stripe.com/docs/api/events?lang=python\n    \"\"\"\n\n    stripe_class = stripe.Event\n    stripe_dashboard_item_name = \"events\"\n\n    api_version = models.CharField(\n        max_length=64,\n        blank=True,\n        help_text=(\n            \"the API version at which the event data was \"\n            \"rendered. Blank for old entries only, all new entries will have this value\"\n        ),\n    )\n    data = JSONField(\n        help_text=(\n            \"data received at webhook. data should be considered to be garbage \"\n            \"until validity check is run and valid flag is set\"\n        )\n    )\n    request_id = models.CharField(\n        max_length=50,\n        help_text=(\n            \"Information about the request that triggered this event, \"\n            \"for traceability purposes. If empty string then this is an old entry \"\n            \"without that data. If Null then this is not an old entry, but a Stripe \"\n            \"'automated' event with no associated request.\"\n        ),\n        default=\"\",\n        blank=True,\n    )\n    idempotency_key = models.TextField(default=\"\", blank=True)\n    type = models.CharField(max_length=250, help_text=\"Stripe's event description code\")\n\n    def __str__(self):\n        return f\"type={self.type}, id={self.id}\"\n\n    def _attach_objects_hook(\n        self, cls, data, current_ids=None, api_key=djstripe_settings.STRIPE_SECRET_KEY\n    ):\n        if self.api_version is None:\n            # as of api version 2017-02-14, the account.application.deauthorized\n            # event sends None as api_version.\n            # If we receive that, store an empty string instead.\n            # Remove this hack if this gets fixed upstream.\n            self.api_version = \"\"\n\n        request_obj = data.get(\"request\", None)\n        if isinstance(request_obj, dict):\n            # Format as of 2017-05-25\n            self.request_id = request_obj.get(\"id\") or \"\"\n            self.idempotency_key = request_obj.get(\"idempotency_key\") or \"\"\n        else:\n            # Format before 2017-05-25\n            self.request_id = request_obj or \"\"\n\n    @classmethod\n    def process(cls, data, api_key=djstripe_settings.STRIPE_SECRET_KEY):\n        qs = cls.objects.filter(id=data[\"id\"])\n        if qs.exists():\n            return qs.first()\n\n        # Rollback any DB operations in the case of failure so\n        # we will retry creating and processing the event the\n        # next time the webhook fires.\n        with transaction.atomic():\n            # process the event and create an Event Object\n            ret = cls._create_from_stripe_object(data, api_key=api_key)\n            ret.invoke_webhook_handlers()\n            return ret\n\n    def invoke_webhook_handlers(self):\n        \"\"\"\n        Invokes any webhook handlers that have been registered for this event\n        based on event type or event sub-type.\n\n        See event handlers registered in the ``djstripe.event_handlers`` module\n        (or handlers registered in djstripe plugins or contrib packages).\n        \"\"\"\n        signal = WEBHOOK_SIGNALS.get(self.type)\n\n        if signal:\n            return signal.send(sender=Event, event=self)\n\n    @cached_property\n    def parts(self):\n        \"\"\"Gets the event category/verb as a list of parts.\"\"\"\n        return str(self.type).split(\".\")\n\n    @cached_property\n    def category(self):\n        \"\"\"Gets the event category string (e.g. 'customer').\"\"\"\n        return self.parts[0]\n\n    @cached_property\n    def verb(self):\n        \"\"\"Gets the event past-tense verb string (e.g. 'updated').\"\"\"\n        return \".\".join(self.parts[1:])\n\n    @property\n    def customer(self):\n        data = self.data[\"object\"]\n        if data[\"object\"] == \"customer\":\n            customer_id = get_id_from_stripe_data(data.get(\"id\"))\n        else:\n            customer_id = get_id_from_stripe_data(data.get(\"customer\"))\n\n        if customer_id:\n            return Customer._get_or_retrieve(\n                id=customer_id,\n                stripe_account=getattr(self.djstripe_owner_account, \"id\", None),\n                api_key=self.default_api_key,\n            )\n</code></pre>"},{"location":"reference/models/#djstripe.models.core.Event-attributes","title":"Attributes","text":""},{"location":"reference/models/#djstripe.models.core.Event.api_version","title":"<code>djstripe.models.core.Event.api_version = models.CharField(max_length=64, blank=True, help_text='the API version at which the event data was rendered. Blank for old entries only, all new entries will have this value')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Event.customer","title":"<code>djstripe.models.core.Event.customer</code>  <code>property</code>","text":""},{"location":"reference/models/#djstripe.models.core.Event.data","title":"<code>djstripe.models.core.Event.data = JSONField(help_text='data received at webhook. data should be considered to be garbage until validity check is run and valid flag is set')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Event.idempotency_key","title":"<code>djstripe.models.core.Event.idempotency_key = models.TextField(default='', blank=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Event.request_id","title":"<code>djstripe.models.core.Event.request_id = models.CharField(max_length=50, help_text=\"Information about the request that triggered this event, for traceability purposes. If empty string then this is an old entry without that data. If Null then this is not an old entry, but a Stripe 'automated' event with no associated request.\", default='', blank=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Event.stripe_class","title":"<code>djstripe.models.core.Event.stripe_class = stripe.Event</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Event.stripe_dashboard_item_name","title":"<code>djstripe.models.core.Event.stripe_dashboard_item_name = 'events'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Event.type","title":"<code>djstripe.models.core.Event.type = models.CharField(max_length=250, help_text=\"Stripe's event description code\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Event-functions","title":"Functions","text":""},{"location":"reference/models/#djstripe.models.core.Event.__str__","title":"<code>djstripe.models.core.Event.__str__()</code>","text":"Source code in <code>djstripe/models/core.py</code> <pre><code>def __str__(self):\n    return f\"type={self.type}, id={self.id}\"\n</code></pre>"},{"location":"reference/models/#djstripe.models.core.Event.category","title":"<code>djstripe.models.core.Event.category()</code>","text":"<p>Gets the event category string (e.g. 'customer').</p> Source code in <code>djstripe/models/core.py</code> <pre><code>@cached_property\ndef category(self):\n    \"\"\"Gets the event category string (e.g. 'customer').\"\"\"\n    return self.parts[0]\n</code></pre>"},{"location":"reference/models/#djstripe.models.core.Event.invoke_webhook_handlers","title":"<code>djstripe.models.core.Event.invoke_webhook_handlers()</code>","text":"<p>Invokes any webhook handlers that have been registered for this event based on event type or event sub-type.</p> <p>See event handlers registered in the <code>djstripe.event_handlers</code> module (or handlers registered in djstripe plugins or contrib packages).</p> Source code in <code>djstripe/models/core.py</code> <pre><code>def invoke_webhook_handlers(self):\n    \"\"\"\n    Invokes any webhook handlers that have been registered for this event\n    based on event type or event sub-type.\n\n    See event handlers registered in the ``djstripe.event_handlers`` module\n    (or handlers registered in djstripe plugins or contrib packages).\n    \"\"\"\n    signal = WEBHOOK_SIGNALS.get(self.type)\n\n    if signal:\n        return signal.send(sender=Event, event=self)\n</code></pre>"},{"location":"reference/models/#djstripe.models.core.Event.parts","title":"<code>djstripe.models.core.Event.parts()</code>","text":"<p>Gets the event category/verb as a list of parts.</p> Source code in <code>djstripe/models/core.py</code> <pre><code>@cached_property\ndef parts(self):\n    \"\"\"Gets the event category/verb as a list of parts.\"\"\"\n    return str(self.type).split(\".\")\n</code></pre>"},{"location":"reference/models/#djstripe.models.core.Event.process","title":"<code>djstripe.models.core.Event.process(data, api_key=djstripe_settings.STRIPE_SECRET_KEY)</code>  <code>classmethod</code>","text":"Source code in <code>djstripe/models/core.py</code> <pre><code>@classmethod\ndef process(cls, data, api_key=djstripe_settings.STRIPE_SECRET_KEY):\n    qs = cls.objects.filter(id=data[\"id\"])\n    if qs.exists():\n        return qs.first()\n\n    # Rollback any DB operations in the case of failure so\n    # we will retry creating and processing the event the\n    # next time the webhook fires.\n    with transaction.atomic():\n        # process the event and create an Event Object\n        ret = cls._create_from_stripe_object(data, api_key=api_key)\n        ret.invoke_webhook_handlers()\n        return ret\n</code></pre>"},{"location":"reference/models/#djstripe.models.core.Event.verb","title":"<code>djstripe.models.core.Event.verb()</code>","text":"<p>Gets the event past-tense verb string (e.g. 'updated').</p> Source code in <code>djstripe/models/core.py</code> <pre><code>@cached_property\ndef verb(self):\n    \"\"\"Gets the event past-tense verb string (e.g. 'updated').\"\"\"\n    return \".\".join(self.parts[1:])\n</code></pre>"},{"location":"reference/models/#djstripe.models.core.File","title":"<code>djstripe.models.core.File</code>","text":"<p>               Bases: <code>StripeModel</code></p> <p>This is an object representing a file hosted on Stripe's servers. The file may have been uploaded by yourself using the create file request (for example, when uploading dispute evidence) or it may have been created by Stripe (for example, the results of a Sigma scheduled query).</p> <p>Stripe documentation: https://stripe.com/docs/api/files?lang=python</p> Source code in <code>djstripe/models/core.py</code> <pre><code>class File(StripeModel):\n    \"\"\"\n    This is an object representing a file hosted on Stripe's servers.\n    The file may have been uploaded by yourself using the create file request\n    (for example, when uploading dispute evidence) or it may have been created by\n    Stripe (for example, the results of a Sigma scheduled query).\n\n    Stripe documentation: https://stripe.com/docs/api/files?lang=python\n    \"\"\"\n\n    stripe_class = stripe.File\n\n    filename = models.CharField(\n        max_length=255,\n        help_text=\"A filename for the file, suitable for saving to a filesystem.\",\n    )\n    purpose = StripeEnumField(\n        enum=enums.FilePurpose, help_text=\"The purpose of the uploaded file.\"\n    )\n    size = models.IntegerField(help_text=\"The size in bytes of the file upload object.\")\n    type = StripeEnumField(\n        enum=enums.FileType, help_text=\"The type of the file returned.\"\n    )\n    url = models.CharField(\n        max_length=200,\n        help_text=\"A read-only URL where the uploaded file can be accessed.\",\n    )\n\n    @classmethod\n    def is_valid_object(cls, data):\n        return data and data.get(\"object\") in (\"file\", \"file_upload\")\n\n    def __str__(self):\n        return f\"{self.filename}, {enums.FilePurpose.humanize(self.purpose)}\"\n</code></pre>"},{"location":"reference/models/#djstripe.models.core.File-attributes","title":"Attributes","text":""},{"location":"reference/models/#djstripe.models.core.File.filename","title":"<code>djstripe.models.core.File.filename = models.CharField(max_length=255, help_text='A filename for the file, suitable for saving to a filesystem.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.File.purpose","title":"<code>djstripe.models.core.File.purpose = StripeEnumField(enum=enums.FilePurpose, help_text='The purpose of the uploaded file.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.File.size","title":"<code>djstripe.models.core.File.size = models.IntegerField(help_text='The size in bytes of the file upload object.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.File.stripe_class","title":"<code>djstripe.models.core.File.stripe_class = stripe.File</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.File.type","title":"<code>djstripe.models.core.File.type = StripeEnumField(enum=enums.FileType, help_text='The type of the file returned.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.File.url","title":"<code>djstripe.models.core.File.url = models.CharField(max_length=200, help_text='A read-only URL where the uploaded file can be accessed.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.File-functions","title":"Functions","text":""},{"location":"reference/models/#djstripe.models.core.File.__str__","title":"<code>djstripe.models.core.File.__str__()</code>","text":"Source code in <code>djstripe/models/core.py</code> <pre><code>def __str__(self):\n    return f\"{self.filename}, {enums.FilePurpose.humanize(self.purpose)}\"\n</code></pre>"},{"location":"reference/models/#djstripe.models.core.File.is_valid_object","title":"<code>djstripe.models.core.File.is_valid_object(data)</code>  <code>classmethod</code>","text":"Source code in <code>djstripe/models/core.py</code> <pre><code>@classmethod\ndef is_valid_object(cls, data):\n    return data and data.get(\"object\") in (\"file\", \"file_upload\")\n</code></pre>"},{"location":"reference/models/#djstripe.models.core.FileLink","title":"<code>djstripe.models.core.FileLink</code>","text":"<p>               Bases: <code>StripeModel</code></p> <p>To share the contents of a File object with non-Stripe users, you can create a FileLink. FileLinks contain a URL that can be used to retrieve the contents of the file without authentication.</p> <p>Stripe documentation: https://stripe.com/docs/api/file_links?lang=python</p> Source code in <code>djstripe/models/core.py</code> <pre><code>class FileLink(StripeModel):\n    \"\"\"\n    To share the contents of a File object with non-Stripe users,\n    you can create a FileLink. FileLinks contain a URL that can be used\n    to retrieve the contents of the file without authentication.\n\n    Stripe documentation: https://stripe.com/docs/api/file_links?lang=python\n    \"\"\"\n\n    stripe_class = stripe.FileLink\n\n    expires_at = StripeDateTimeField(\n        null=True, blank=True, help_text=\"Time at which the link expires.\"\n    )\n    file = StripeForeignKey(\"File\", on_delete=models.CASCADE)\n    url = models.URLField(help_text=\"The publicly accessible URL to download the file.\")\n\n    def __str__(self):\n        return f\"{self.file.filename}, {self.url}\"\n</code></pre>"},{"location":"reference/models/#djstripe.models.core.FileLink-attributes","title":"Attributes","text":""},{"location":"reference/models/#djstripe.models.core.FileLink.expires_at","title":"<code>djstripe.models.core.FileLink.expires_at = StripeDateTimeField(null=True, blank=True, help_text='Time at which the link expires.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.FileLink.file","title":"<code>djstripe.models.core.FileLink.file = StripeForeignKey('File', on_delete=models.CASCADE)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.FileLink.stripe_class","title":"<code>djstripe.models.core.FileLink.stripe_class = stripe.FileLink</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.FileLink.url","title":"<code>djstripe.models.core.FileLink.url = models.URLField(help_text='The publicly accessible URL to download the file.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.FileLink-functions","title":"Functions","text":""},{"location":"reference/models/#djstripe.models.core.FileLink.__str__","title":"<code>djstripe.models.core.FileLink.__str__()</code>","text":"Source code in <code>djstripe/models/core.py</code> <pre><code>def __str__(self):\n    return f\"{self.file.filename}, {self.url}\"\n</code></pre>"},{"location":"reference/models/#djstripe.models.core.Mandate","title":"<code>djstripe.models.core.Mandate</code>","text":"<p>               Bases: <code>StripeModel</code></p> <p>A Mandate is a record of the permission a customer has given you to debit their payment method.</p> <p>https://stripe.com/docs/api/mandates</p> Source code in <code>djstripe/models/core.py</code> <pre><code>class Mandate(StripeModel):\n    \"\"\"\n    A Mandate is a record of the permission a customer has given you to debit their payment method.\n\n    https://stripe.com/docs/api/mandates\n    \"\"\"\n\n    stripe_class = stripe.Mandate\n\n    customer_acceptance = JSONField(\n        help_text=\"Details about the customer's acceptance of the mandate.\"\n    )\n    payment_method = StripeForeignKey(\"paymentmethod\", on_delete=models.CASCADE)\n    payment_method_details = JSONField(\n        help_text=\"Additional mandate information specific to the payment method type.\"\n    )\n    status = StripeEnumField(\n        enum=enums.MandateStatus,\n        help_text=(\n            \"The status of the mandate, which indicates whether it can be used to\"\n            \" initiate a payment.\"\n        ),\n    )\n    type = StripeEnumField(\n        enum=enums.MandateType,\n        help_text=(\n            \"The status of the mandate, which indicates whether it can be used to\"\n            \" initiate a payment.\"\n        ),\n    )\n    multi_use = JSONField(\n        null=True,\n        blank=True,\n        help_text=(\n            \"If this is a `multi_use` mandate, this hash contains details about the\"\n            \" mandate.\"\n        ),\n    )\n    single_use = JSONField(\n        null=True,\n        blank=True,\n        help_text=(\n            \"If this is a `single_use` mandate, this hash contains details about the\"\n            \" mandate.\"\n        ),\n    )\n</code></pre>"},{"location":"reference/models/#djstripe.models.core.Mandate-attributes","title":"Attributes","text":""},{"location":"reference/models/#djstripe.models.core.Mandate.customer_acceptance","title":"<code>djstripe.models.core.Mandate.customer_acceptance = JSONField(help_text=\"Details about the customer's acceptance of the mandate.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Mandate.multi_use","title":"<code>djstripe.models.core.Mandate.multi_use = JSONField(null=True, blank=True, help_text='If this is a `multi_use` mandate, this hash contains details about the mandate.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Mandate.payment_method","title":"<code>djstripe.models.core.Mandate.payment_method = StripeForeignKey('paymentmethod', on_delete=models.CASCADE)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Mandate.payment_method_details","title":"<code>djstripe.models.core.Mandate.payment_method_details = JSONField(help_text='Additional mandate information specific to the payment method type.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Mandate.single_use","title":"<code>djstripe.models.core.Mandate.single_use = JSONField(null=True, blank=True, help_text='If this is a `single_use` mandate, this hash contains details about the mandate.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Mandate.status","title":"<code>djstripe.models.core.Mandate.status = StripeEnumField(enum=enums.MandateStatus, help_text='The status of the mandate, which indicates whether it can be used to initiate a payment.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Mandate.stripe_class","title":"<code>djstripe.models.core.Mandate.stripe_class = stripe.Mandate</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Mandate.type","title":"<code>djstripe.models.core.Mandate.type = StripeEnumField(enum=enums.MandateType, help_text='The status of the mandate, which indicates whether it can be used to initiate a payment.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.PaymentIntent","title":"<code>djstripe.models.core.PaymentIntent</code>","text":"<p>               Bases: <code>StripeModel</code></p> <p>A PaymentIntent guides you through the process of collecting a payment from your customer. We recommend that you create exactly one PaymentIntent for each order or customer session in your system. You can reference the PaymentIntent later to see the history of payment attempts for a particular session.</p> <p>A PaymentIntent transitions through multiple statuses throughout its lifetime as it interfaces with Stripe.js to perform authentication flows and ultimately creates at most one successful charge.</p> <p>Stripe documentation: https://stripe.com/docs/api?lang=python#payment_intents</p> Source code in <code>djstripe/models/core.py</code> <pre><code>class PaymentIntent(StripeModel):\n    \"\"\"\n    A PaymentIntent guides you through the process of collecting a payment\n    from your customer. We recommend that you create exactly one PaymentIntent for each order\n    or customer session in your system. You can reference the PaymentIntent later to\n    see the history of payment attempts for a particular session.\n\n    A PaymentIntent transitions through multiple statuses throughout its lifetime as\n    it interfaces with Stripe.js to perform authentication flows and ultimately\n    creates at most one successful charge.\n\n    Stripe documentation: https://stripe.com/docs/api?lang=python#payment_intents\n    \"\"\"\n\n    stripe_class = stripe.PaymentIntent\n    stripe_dashboard_item_name = \"payments\"\n    expand_fields = [\"payment_method\"]\n\n    amount = StripeQuantumCurrencyAmountField(\n        help_text=\"Amount (in cents) intended to be collected by this PaymentIntent.\"\n    )\n    amount_capturable = StripeQuantumCurrencyAmountField(\n        help_text=\"Amount (in cents) that can be captured from this PaymentIntent.\"\n    )\n    amount_received = StripeQuantumCurrencyAmountField(\n        help_text=\"Amount (in cents) that was collected by this PaymentIntent.\"\n    )\n    # application\n    # application_fee_amount\n    canceled_at = StripeDateTimeField(\n        null=True,\n        blank=True,\n        default=None,\n        help_text=(\n            \"Populated when status is canceled, this is the time at which the \"\n            \"PaymentIntent was canceled. Measured in seconds since the Unix epoch.\"\n        ),\n    )\n\n    cancellation_reason = StripeEnumField(\n        enum=enums.PaymentIntentCancellationReason,\n        blank=True,\n        help_text=(\n            \"Reason for cancellation of this PaymentIntent, either user-provided \"\n            \"(duplicate, fraudulent, requested_by_customer, or abandoned) or \"\n            \"generated by Stripe internally (failed_invoice, void_invoice, \"\n            \"or automatic).\"\n        ),\n    )\n    capture_method = StripeEnumField(\n        enum=enums.CaptureMethod,\n        help_text=\"Capture method of this PaymentIntent, one of automatic or manual.\",\n    )\n    client_secret = models.TextField(\n        max_length=5000,\n        help_text=(\n            \"The client secret of this PaymentIntent. \"\n            \"Used for client-side retrieval using a publishable key.\"\n        ),\n    )\n    confirmation_method = StripeEnumField(\n        enum=enums.ConfirmationMethod,\n        help_text=(\n            \"Confirmation method of this PaymentIntent, one of manual or automatic.\"\n        ),\n    )\n    currency = StripeCurrencyCodeField()\n    customer = StripeForeignKey(\n        \"Customer\",\n        null=True,\n        on_delete=models.CASCADE,\n        help_text=\"Customer this PaymentIntent is for if one exists.\",\n    )\n    description = models.TextField(\n        max_length=1000,\n        default=\"\",\n        blank=True,\n        help_text=(\n            \"An arbitrary string attached to the object. \"\n            \"Often useful for displaying to users.\"\n        ),\n    )\n    last_payment_error = JSONField(\n        null=True,\n        blank=True,\n        help_text=(\n            \"The payment error encountered in the previous PaymentIntent confirmation.\"\n        ),\n    )\n    next_action = JSONField(\n        null=True,\n        blank=True,\n        help_text=(\n            \"If present, this property tells you what actions you need to take \"\n            \"in order for your customer to fulfill a payment using the provided source.\"\n        ),\n    )\n    on_behalf_of = StripeForeignKey(\n        \"Account\",\n        on_delete=models.CASCADE,\n        null=True,\n        blank=True,\n        help_text=(\n            \"The account (if any) for which the funds of the \"\n            \"PaymentIntent are intended.\"\n        ),\n        related_name=\"payment_intents\",\n    )\n    payment_method = StripeForeignKey(\n        \"PaymentMethod\",\n        on_delete=models.SET_NULL,\n        null=True,\n        blank=True,\n        help_text=\"Payment method used in this PaymentIntent.\",\n    )\n    payment_method_types = JSONField(\n        help_text=(\n            \"The list of payment method types (e.g. card) that this \"\n            \"PaymentIntent is allowed to use.\"\n        )\n    )\n    receipt_email = models.CharField(\n        blank=True,\n        max_length=255,\n        help_text=(\n            \"Email address that the receipt for the resulting payment will be sent to.\"\n        ),\n    )\n    # TODO: Add `review` field after we add Review model.\n    setup_future_usage = StripeEnumField(\n        enum=enums.IntentUsage,\n        null=True,\n        blank=True,\n        help_text=(\n            \"Indicates that you intend to make future payments with this \"\n            \"PaymentIntent's payment method. \"\n            \"If present, the payment method used with this PaymentIntent can \"\n            \"be attached to a Customer, even after the transaction completes. \"\n            \"Use `on_session` if you intend to only reuse the payment method \"\n            \"when your customer is present in your checkout flow. Use `off_session` \"\n            \"if your customer may or may not be in your checkout flow. \"\n            \"Stripe uses `setup_future_usage` to dynamically optimize \"\n            \"your payment flow and comply with regional legislation and network rules. \"\n            \"For example, if your customer is impacted by SCA, using `off_session` \"\n            \"will ensure that they are authenticated while processing this \"\n            \"PaymentIntent. You will then be able to make later off-session payments \"\n            \"for this customer.\"\n        ),\n    )\n    shipping = JSONField(\n        null=True, blank=True, help_text=\"Shipping information for this PaymentIntent.\"\n    )\n    statement_descriptor = models.CharField(\n        max_length=22,\n        blank=True,\n        help_text=(\n            \"For non-card charges, you can use this value as the complete description \"\n            \"that appears on your customers' statements. Must contain at least one \"\n            \"letter, maximum 22 characters.\"\n        ),\n    )\n    status = StripeEnumField(\n        enum=enums.PaymentIntentStatus,\n        help_text=(\n            \"Status of this PaymentIntent, one of requires_payment_method, \"\n            \"requires_confirmation, requires_action, processing, requires_capture, \"\n            \"canceled, or succeeded. \"\n            \"You can read more about PaymentIntent statuses here.\"\n        ),\n    )\n    transfer_data = JSONField(\n        null=True,\n        blank=True,\n        help_text=(\n            \"The data with which to automatically create a Transfer when the payment \"\n            \"is finalized. \"\n            \"See the PaymentIntents Connect usage guide for details.\"\n        ),\n    )\n    transfer_group = models.CharField(\n        blank=True,\n        max_length=255,\n        help_text=(\n            \"A string that identifies the resulting payment as part of a group. \"\n            \"See the PaymentIntents Connect usage guide for details.\"\n        ),\n    )\n\n    def __str__(self):\n        account = self.on_behalf_of\n        customer = self.customer\n        amount = get_friendly_currency_amount(self.amount / 100, self.currency)\n        status = enums.PaymentIntentStatus.humanize(self.status)\n\n        if account and customer:\n            return f\"{amount} ({status}) for {account} by {customer}\"\n        if account:\n            return f\"{amount} for {account}. {status}\"\n        if customer:\n            return f\"{amount} by {customer}. {status}\"\n\n        return f\"{amount} ({status})\"\n\n    def update(self, api_key=None, **kwargs):\n        \"\"\"\n        Call the stripe API's modify operation for this model\n\n        :param api_key: The api key to use for this request.\n            Defaults to djstripe_settings.STRIPE_SECRET_KEY.\n        :type api_key: string\n        \"\"\"\n        api_key = api_key or self.default_api_key\n        response = self.api_retrieve(api_key=api_key)\n        return response.modify(response.stripe_id, api_key=api_key, **kwargs)\n\n    def _api_cancel(self, api_key=None, **kwargs):\n        \"\"\"\n        Call the stripe API's cancel operation for this model\n\n        :param api_key: The api key to use for this request.\n            Defaults to djstripe_settings.STRIPE_SECRET_KEY.\n        :type api_key: string\n        \"\"\"\n        api_key = api_key or self.default_api_key\n        return self.api_retrieve(api_key=api_key).cancel(**kwargs)\n\n    def _api_confirm(self, api_key=None, **kwargs):\n        \"\"\"\n        Call the stripe API's confirm operation for this model.\n\n        Confirm that your customer intends to pay with current or\n        provided payment method. Upon confirmation, the PaymentIntent\n        will attempt to initiate a payment.\n\n        :param api_key: The api key to use for this request.\n            Defaults to djstripe_settings.STRIPE_SECRET_KEY.\n        :type api_key: string\n        \"\"\"\n        api_key = api_key or self.default_api_key\n        return self.api_retrieve(api_key=api_key).confirm(**kwargs)\n</code></pre>"},{"location":"reference/models/#djstripe.models.core.PaymentIntent-attributes","title":"Attributes","text":""},{"location":"reference/models/#djstripe.models.core.PaymentIntent.amount","title":"<code>djstripe.models.core.PaymentIntent.amount = StripeQuantumCurrencyAmountField(help_text='Amount (in cents) intended to be collected by this PaymentIntent.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.PaymentIntent.amount_capturable","title":"<code>djstripe.models.core.PaymentIntent.amount_capturable = StripeQuantumCurrencyAmountField(help_text='Amount (in cents) that can be captured from this PaymentIntent.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.PaymentIntent.amount_received","title":"<code>djstripe.models.core.PaymentIntent.amount_received = StripeQuantumCurrencyAmountField(help_text='Amount (in cents) that was collected by this PaymentIntent.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.PaymentIntent.canceled_at","title":"<code>djstripe.models.core.PaymentIntent.canceled_at = StripeDateTimeField(null=True, blank=True, default=None, help_text='Populated when status is canceled, this is the time at which the PaymentIntent was canceled. Measured in seconds since the Unix epoch.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.PaymentIntent.cancellation_reason","title":"<code>djstripe.models.core.PaymentIntent.cancellation_reason = StripeEnumField(enum=enums.PaymentIntentCancellationReason, blank=True, help_text='Reason for cancellation of this PaymentIntent, either user-provided (duplicate, fraudulent, requested_by_customer, or abandoned) or generated by Stripe internally (failed_invoice, void_invoice, or automatic).')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.PaymentIntent.capture_method","title":"<code>djstripe.models.core.PaymentIntent.capture_method = StripeEnumField(enum=enums.CaptureMethod, help_text='Capture method of this PaymentIntent, one of automatic or manual.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.PaymentIntent.client_secret","title":"<code>djstripe.models.core.PaymentIntent.client_secret = models.TextField(max_length=5000, help_text='The client secret of this PaymentIntent. Used for client-side retrieval using a publishable key.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.PaymentIntent.confirmation_method","title":"<code>djstripe.models.core.PaymentIntent.confirmation_method = StripeEnumField(enum=enums.ConfirmationMethod, help_text='Confirmation method of this PaymentIntent, one of manual or automatic.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.PaymentIntent.currency","title":"<code>djstripe.models.core.PaymentIntent.currency = StripeCurrencyCodeField()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.PaymentIntent.customer","title":"<code>djstripe.models.core.PaymentIntent.customer = StripeForeignKey('Customer', null=True, on_delete=models.CASCADE, help_text='Customer this PaymentIntent is for if one exists.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.PaymentIntent.description","title":"<code>djstripe.models.core.PaymentIntent.description = models.TextField(max_length=1000, default='', blank=True, help_text='An arbitrary string attached to the object. Often useful for displaying to users.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.PaymentIntent.expand_fields","title":"<code>djstripe.models.core.PaymentIntent.expand_fields = ['payment_method']</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.PaymentIntent.last_payment_error","title":"<code>djstripe.models.core.PaymentIntent.last_payment_error = JSONField(null=True, blank=True, help_text='The payment error encountered in the previous PaymentIntent confirmation.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.PaymentIntent.next_action","title":"<code>djstripe.models.core.PaymentIntent.next_action = JSONField(null=True, blank=True, help_text='If present, this property tells you what actions you need to take in order for your customer to fulfill a payment using the provided source.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.PaymentIntent.on_behalf_of","title":"<code>djstripe.models.core.PaymentIntent.on_behalf_of = StripeForeignKey('Account', on_delete=models.CASCADE, null=True, blank=True, help_text='The account (if any) for which the funds of the PaymentIntent are intended.', related_name='payment_intents')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.PaymentIntent.payment_method","title":"<code>djstripe.models.core.PaymentIntent.payment_method = StripeForeignKey('PaymentMethod', on_delete=models.SET_NULL, null=True, blank=True, help_text='Payment method used in this PaymentIntent.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.PaymentIntent.payment_method_types","title":"<code>djstripe.models.core.PaymentIntent.payment_method_types = JSONField(help_text='The list of payment method types (e.g. card) that this PaymentIntent is allowed to use.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.PaymentIntent.receipt_email","title":"<code>djstripe.models.core.PaymentIntent.receipt_email = models.CharField(blank=True, max_length=255, help_text='Email address that the receipt for the resulting payment will be sent to.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.PaymentIntent.setup_future_usage","title":"<code>djstripe.models.core.PaymentIntent.setup_future_usage = StripeEnumField(enum=enums.IntentUsage, null=True, blank=True, help_text=\"Indicates that you intend to make future payments with this PaymentIntent's payment method. If present, the payment method used with this PaymentIntent can be attached to a Customer, even after the transaction completes. Use `on_session` if you intend to only reuse the payment method when your customer is present in your checkout flow. Use `off_session` if your customer may or may not be in your checkout flow. Stripe uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules. For example, if your customer is impacted by SCA, using `off_session` will ensure that they are authenticated while processing this PaymentIntent. You will then be able to make later off-session payments for this customer.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.PaymentIntent.shipping","title":"<code>djstripe.models.core.PaymentIntent.shipping = JSONField(null=True, blank=True, help_text='Shipping information for this PaymentIntent.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.PaymentIntent.statement_descriptor","title":"<code>djstripe.models.core.PaymentIntent.statement_descriptor = models.CharField(max_length=22, blank=True, help_text=\"For non-card charges, you can use this value as the complete description that appears on your customers' statements. Must contain at least one letter, maximum 22 characters.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.PaymentIntent.status","title":"<code>djstripe.models.core.PaymentIntent.status = StripeEnumField(enum=enums.PaymentIntentStatus, help_text='Status of this PaymentIntent, one of requires_payment_method, requires_confirmation, requires_action, processing, requires_capture, canceled, or succeeded. You can read more about PaymentIntent statuses here.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.PaymentIntent.stripe_class","title":"<code>djstripe.models.core.PaymentIntent.stripe_class = stripe.PaymentIntent</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.PaymentIntent.stripe_dashboard_item_name","title":"<code>djstripe.models.core.PaymentIntent.stripe_dashboard_item_name = 'payments'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.PaymentIntent.transfer_data","title":"<code>djstripe.models.core.PaymentIntent.transfer_data = JSONField(null=True, blank=True, help_text='The data with which to automatically create a Transfer when the payment is finalized. See the PaymentIntents Connect usage guide for details.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.PaymentIntent.transfer_group","title":"<code>djstripe.models.core.PaymentIntent.transfer_group = models.CharField(blank=True, max_length=255, help_text='A string that identifies the resulting payment as part of a group. See the PaymentIntents Connect usage guide for details.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.PaymentIntent-functions","title":"Functions","text":""},{"location":"reference/models/#djstripe.models.core.PaymentIntent.__str__","title":"<code>djstripe.models.core.PaymentIntent.__str__()</code>","text":"Source code in <code>djstripe/models/core.py</code> <pre><code>def __str__(self):\n    account = self.on_behalf_of\n    customer = self.customer\n    amount = get_friendly_currency_amount(self.amount / 100, self.currency)\n    status = enums.PaymentIntentStatus.humanize(self.status)\n\n    if account and customer:\n        return f\"{amount} ({status}) for {account} by {customer}\"\n    if account:\n        return f\"{amount} for {account}. {status}\"\n    if customer:\n        return f\"{amount} by {customer}. {status}\"\n\n    return f\"{amount} ({status})\"\n</code></pre>"},{"location":"reference/models/#djstripe.models.core.PaymentIntent.update","title":"<code>djstripe.models.core.PaymentIntent.update(api_key=None, **kwargs)</code>","text":"<p>Call the stripe API's modify operation for this model</p> <p>:param api_key: The api key to use for this request.     Defaults to djstripe_settings.STRIPE_SECRET_KEY. :type api_key: string</p> Source code in <code>djstripe/models/core.py</code> <pre><code>def update(self, api_key=None, **kwargs):\n    \"\"\"\n    Call the stripe API's modify operation for this model\n\n    :param api_key: The api key to use for this request.\n        Defaults to djstripe_settings.STRIPE_SECRET_KEY.\n    :type api_key: string\n    \"\"\"\n    api_key = api_key or self.default_api_key\n    response = self.api_retrieve(api_key=api_key)\n    return response.modify(response.stripe_id, api_key=api_key, **kwargs)\n</code></pre>"},{"location":"reference/models/#djstripe.models.core.Payout","title":"<code>djstripe.models.core.Payout</code>","text":"<p>               Bases: <code>StripeModel</code></p> <p>A Payout object is created when you receive funds from Stripe, or when you initiate a payout to either a bank account or debit card of a connected Stripe account.</p> <p>Stripe documentation: https://stripe.com/docs/api?lang=python#payouts</p> Source code in <code>djstripe/models/core.py</code> <pre><code>class Payout(StripeModel):\n    \"\"\"\n    A Payout object is created when you receive funds from Stripe, or when you initiate\n    a payout to either a bank account or debit card of a connected Stripe account.\n\n    Stripe documentation: https://stripe.com/docs/api?lang=python#payouts\n    \"\"\"\n\n    expand_fields = [\"destination\"]\n    stripe_class = stripe.Payout\n    stripe_dashboard_item_name = \"payouts\"\n\n    amount = StripeDecimalCurrencyAmountField(\n        help_text=(\n            \"Amount (as decimal) to be transferred to your bank account or debit card.\"\n        )\n    )\n    arrival_date = StripeDateTimeField(\n        help_text=(\n            \"Date the payout is expected to arrive in the bank. \"\n            \"This factors in delays like weekends or bank holidays.\"\n        )\n    )\n    automatic = models.BooleanField(\n        help_text=(\n            \"`true` if the payout was created by an automated payout schedule, \"\n            \"and `false` if it was requested manually.\"\n        )\n    )\n    balance_transaction = StripeForeignKey(\n        \"BalanceTransaction\",\n        on_delete=models.SET_NULL,\n        null=True,\n        help_text=(\n            \"Balance transaction that describes the impact on your account balance.\"\n        ),\n    )\n    currency = StripeCurrencyCodeField()\n    destination = PaymentMethodForeignKey(\n        on_delete=models.PROTECT,\n        null=True,\n        help_text=\"Bank account or card the payout was sent to.\",\n    )\n    failure_balance_transaction = StripeForeignKey(\n        \"BalanceTransaction\",\n        on_delete=models.SET_NULL,\n        related_name=\"failure_payouts\",\n        null=True,\n        blank=True,\n        help_text=(\n            \"If the payout failed or was canceled, this will be the balance \"\n            \"transaction that reversed the initial balance transaction, and \"\n            \"puts the funds from the failed payout back in your balance.\"\n        ),\n    )\n    failure_code = StripeEnumField(\n        enum=enums.PayoutFailureCode,\n        default=\"\",\n        blank=True,\n        help_text=(\n            \"Error code explaining reason for transfer failure if available. \"\n            \"See https://stripe.com/docs/api?lang=python#transfer_failures.\"\n        ),\n    )\n    failure_message = models.TextField(\n        default=\"\",\n        blank=True,\n        help_text=(\n            \"Message to user further explaining reason for payout failure if available.\"\n        ),\n    )\n    method = StripeEnumField(\n        max_length=8,\n        enum=enums.PayoutMethod,\n        help_text=(\n            \"The method used to send this payout. \"\n            \"`instant` is only supported for payouts to debit cards.\"\n        ),\n    )\n    original_payout = models.OneToOneField(\n        \"Payout\",\n        on_delete=models.SET_NULL,\n        null=True,\n        blank=True,\n        help_text=(\n            \"If this payout reverses another, this is the ID of the original payout.\"\n        ),\n    )\n    reversed_by = models.OneToOneField(\n        \"Payout\",\n        on_delete=models.SET_NULL,\n        null=True,\n        blank=True,\n        help_text=(\n            \"If this payout was reversed, this is the ID of the payout that reverses\"\n            \" this payout.\"\n        ),\n        related_name=\"reversed_payout\",\n    )\n    source_type = StripeEnumField(\n        enum=enums.PayoutSourceType,\n        help_text=\"The source balance this payout came from.\",\n    )\n    statement_descriptor = models.CharField(\n        max_length=255,\n        default=\"\",\n        blank=True,\n        help_text=(\n            \"Extra information about a payout to be displayed \"\n            \"on the user's bank statement.\"\n        ),\n    )\n    status = StripeEnumField(\n        enum=enums.PayoutStatus,\n        help_text=(\n            \"Current status of the payout. \"\n            \"A payout will be `pending` until it is submitted to the bank, \"\n            \"at which point it becomes `in_transit`. \"\n            \"It will then change to paid if the transaction goes through. \"\n            \"If it does not go through successfully, \"\n            \"its status will change to `failed` or `canceled`.\"\n        ),\n    )\n    type = StripeEnumField(enum=enums.PayoutType)\n\n    def __str__(self):\n        return f\"{self.amount} ({enums.PayoutStatus.humanize(self.status)})\"\n</code></pre>"},{"location":"reference/models/#djstripe.models.core.Payout-attributes","title":"Attributes","text":""},{"location":"reference/models/#djstripe.models.core.Payout.amount","title":"<code>djstripe.models.core.Payout.amount = StripeDecimalCurrencyAmountField(help_text='Amount (as decimal) to be transferred to your bank account or debit card.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Payout.arrival_date","title":"<code>djstripe.models.core.Payout.arrival_date = StripeDateTimeField(help_text='Date the payout is expected to arrive in the bank. This factors in delays like weekends or bank holidays.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Payout.automatic","title":"<code>djstripe.models.core.Payout.automatic = models.BooleanField(help_text='`true` if the payout was created by an automated payout schedule, and `false` if it was requested manually.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Payout.balance_transaction","title":"<code>djstripe.models.core.Payout.balance_transaction = StripeForeignKey('BalanceTransaction', on_delete=models.SET_NULL, null=True, help_text='Balance transaction that describes the impact on your account balance.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Payout.currency","title":"<code>djstripe.models.core.Payout.currency = StripeCurrencyCodeField()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Payout.destination","title":"<code>djstripe.models.core.Payout.destination = PaymentMethodForeignKey(on_delete=models.PROTECT, null=True, help_text='Bank account or card the payout was sent to.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Payout.expand_fields","title":"<code>djstripe.models.core.Payout.expand_fields = ['destination']</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Payout.failure_balance_transaction","title":"<code>djstripe.models.core.Payout.failure_balance_transaction = StripeForeignKey('BalanceTransaction', on_delete=models.SET_NULL, related_name='failure_payouts', null=True, blank=True, help_text='If the payout failed or was canceled, this will be the balance transaction that reversed the initial balance transaction, and puts the funds from the failed payout back in your balance.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Payout.failure_code","title":"<code>djstripe.models.core.Payout.failure_code = StripeEnumField(enum=enums.PayoutFailureCode, default='', blank=True, help_text='Error code explaining reason for transfer failure if available. See https://stripe.com/docs/api?lang=python#transfer_failures.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Payout.failure_message","title":"<code>djstripe.models.core.Payout.failure_message = models.TextField(default='', blank=True, help_text='Message to user further explaining reason for payout failure if available.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Payout.method","title":"<code>djstripe.models.core.Payout.method = StripeEnumField(max_length=8, enum=enums.PayoutMethod, help_text='The method used to send this payout. `instant` is only supported for payouts to debit cards.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Payout.original_payout","title":"<code>djstripe.models.core.Payout.original_payout = models.OneToOneField('Payout', on_delete=models.SET_NULL, null=True, blank=True, help_text='If this payout reverses another, this is the ID of the original payout.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Payout.reversed_by","title":"<code>djstripe.models.core.Payout.reversed_by = models.OneToOneField('Payout', on_delete=models.SET_NULL, null=True, blank=True, help_text='If this payout was reversed, this is the ID of the payout that reverses this payout.', related_name='reversed_payout')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Payout.source_type","title":"<code>djstripe.models.core.Payout.source_type = StripeEnumField(enum=enums.PayoutSourceType, help_text='The source balance this payout came from.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Payout.statement_descriptor","title":"<code>djstripe.models.core.Payout.statement_descriptor = models.CharField(max_length=255, default='', blank=True, help_text=\"Extra information about a payout to be displayed on the user's bank statement.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Payout.status","title":"<code>djstripe.models.core.Payout.status = StripeEnumField(enum=enums.PayoutStatus, help_text='Current status of the payout. A payout will be `pending` until it is submitted to the bank, at which point it becomes `in_transit`. It will then change to paid if the transaction goes through. If it does not go through successfully, its status will change to `failed` or `canceled`.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Payout.stripe_class","title":"<code>djstripe.models.core.Payout.stripe_class = stripe.Payout</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Payout.stripe_dashboard_item_name","title":"<code>djstripe.models.core.Payout.stripe_dashboard_item_name = 'payouts'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Payout.type","title":"<code>djstripe.models.core.Payout.type = StripeEnumField(enum=enums.PayoutType)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Payout-functions","title":"Functions","text":""},{"location":"reference/models/#djstripe.models.core.Payout.__str__","title":"<code>djstripe.models.core.Payout.__str__()</code>","text":"Source code in <code>djstripe/models/core.py</code> <pre><code>def __str__(self):\n    return f\"{self.amount} ({enums.PayoutStatus.humanize(self.status)})\"\n</code></pre>"},{"location":"reference/models/#djstripe.models.core.Price","title":"<code>djstripe.models.core.Price</code>","text":"<p>               Bases: <code>StripeModel</code></p> <p>Prices define the unit cost, currency, and (optional) billing cycle for both recurring and one-time purchases of products.</p> <p>Price and Plan objects are the same, but use a different representation. Creating a recurring Price in Stripe also makes a Plan available, and vice versa. This is not the case for a Price with interval=one_time.</p> <p>Price objects are a more recent API representation, support more features and its usage is encouraged instead of Plan objects.</p> <p>Stripe documentation: - https://stripe.com/docs/api/prices - https://stripe.com/docs/billing/prices-guide</p> Source code in <code>djstripe/models/core.py</code> <pre><code>class Price(StripeModel):\n    \"\"\"\n    Prices define the unit cost, currency, and (optional) billing cycle for\n    both recurring and one-time purchases of products.\n\n    Price and Plan objects are the same, but use a different representation.\n    Creating a recurring Price in Stripe also makes a Plan available, and vice versa.\n    This is not the case for a Price with interval=one_time.\n\n    Price objects are a more recent API representation, support more features\n    and its usage is encouraged instead of Plan objects.\n\n    Stripe documentation:\n    - https://stripe.com/docs/api/prices\n    - https://stripe.com/docs/billing/prices-guide\n    \"\"\"\n\n    stripe_class = stripe.Price\n    expand_fields = [\"product\", \"tiers\"]\n    stripe_dashboard_item_name = \"prices\"\n\n    active = models.BooleanField(\n        help_text=\"Whether the price can be used for new purchases.\"\n    )\n    currency = StripeCurrencyCodeField()\n    nickname = models.CharField(\n        max_length=250,\n        blank=True,\n        help_text=\"A brief description of the plan, hidden from customers.\",\n    )\n    product = StripeForeignKey(\n        \"Product\",\n        on_delete=models.CASCADE,\n        related_name=\"prices\",\n        help_text=\"The product this price is associated with.\",\n    )\n    recurring = JSONField(\n        default=None,\n        blank=True,\n        null=True,\n        help_text=(\n            \"The recurring components of a price such as `interval` and `usage_type`.\"\n        ),\n    )\n    type = StripeEnumField(\n        enum=enums.PriceType,\n        help_text=(\n            \"Whether the price is for a one-time purchase or a recurring \"\n            \"(subscription) purchase.\"\n        ),\n    )\n    unit_amount = StripeQuantumCurrencyAmountField(\n        null=True,\n        blank=True,\n        help_text=(\n            \"The unit amount in cents to be charged, represented as a whole \"\n            \"integer if possible. Null if a sub-cent precision is required.\"\n        ),\n    )\n    unit_amount_decimal = StripeDecimalCurrencyAmountField(\n        null=True,\n        blank=True,\n        max_digits=djstripe_settings.decimal_max_digits,\n        decimal_places=djstripe_settings.decimal_places,\n        help_text=(\n            \"The unit amount in cents to be charged, represented as a decimal \"\n            \"string with at most 12 decimal places.\"\n        ),\n    )\n\n    # More attributes\u2026\n    billing_scheme = StripeEnumField(\n        enum=enums.BillingScheme,\n        blank=True,\n        help_text=(\n            \"Describes how to compute the price per period. \"\n            \"Either `per_unit` or `tiered`. \"\n            \"`per_unit` indicates that the fixed amount (specified in `unit_amount` \"\n            \"or `unit_amount_decimal`) will be charged per unit in `quantity` \"\n            \"(for prices with `usage_type=licensed`), or per unit of total \"\n            \"usage (for prices with `usage_type=metered`). \"\n            \"`tiered` indicates that the unit pricing will be computed using \"\n            \"a tiering strategy as defined using the `tiers` and `tiers_mode` \"\n            \"attributes.\"\n        ),\n    )\n    lookup_key = models.CharField(\n        max_length=250,\n        null=True,\n        blank=True,\n        help_text=(\n            \"A lookup key used to retrieve prices dynamically from a static string.\"\n        ),\n    )\n    tiers = JSONField(\n        null=True,\n        blank=True,\n        help_text=(\n            \"Each element represents a pricing tier. \"\n            \"This parameter requires `billing_scheme` to be set to `tiered`.\"\n        ),\n    )\n    tiers_mode = StripeEnumField(\n        enum=enums.PriceTiersMode,\n        null=True,\n        blank=True,\n        help_text=(\n            \"Defines if the tiering price should be `graduated` or `volume` based. \"\n            \"In `volume`-based tiering, the maximum quantity within a period \"\n            \"determines the per unit price, in `graduated` tiering pricing can \"\n            \"successively change as the quantity grows.\"\n        ),\n    )\n    transform_quantity = JSONField(\n        null=True,\n        blank=True,\n        help_text=(\n            \"Apply a transformation to the reported usage or set quantity \"\n            \"before computing the amount billed. Cannot be combined with `tiers`.\"\n        ),\n    )\n\n    class Meta(object):\n        ordering = [\"unit_amount\"]\n\n    @classmethod\n    def get_or_create(cls, **kwargs):\n        \"\"\"Get or create a Price.\"\"\"\n\n        try:\n            return cls.objects.get(id=kwargs[\"id\"]), False\n        except cls.DoesNotExist:\n            return cls.create(**kwargs), True\n\n    @classmethod\n    def create(cls, **kwargs):\n        # A few minor things are changed in the api-version of the create call\n        api_kwargs = dict(kwargs)\n        if api_kwargs[\"unit_amount\"]:\n            api_kwargs[\"unit_amount\"] = int(api_kwargs[\"unit_amount\"] * 100)\n\n        if isinstance(api_kwargs.get(\"product\"), StripeModel):\n            api_kwargs[\"product\"] = api_kwargs[\"product\"].id\n\n        stripe_price = cls._api_create(**api_kwargs)\n\n        api_key = api_kwargs.get(\"api_key\") or djstripe_settings.STRIPE_SECRET_KEY\n        price = cls.sync_from_stripe_data(stripe_price, api_key=api_key)\n\n        return price\n\n    def __str__(self):\n        return f\"{self.human_readable_price} for {self.product.name}\"\n\n    @property\n    def human_readable_price(self):\n        if self.billing_scheme == \"per_unit\":\n            unit_amount = (self.unit_amount or 0) / 100\n            amount = get_friendly_currency_amount(unit_amount, self.currency)\n        else:\n            # tiered billing scheme\n            tier_1 = self.tiers[0]\n            formatted_unit_amount_tier_1 = get_friendly_currency_amount(\n                (tier_1[\"unit_amount\"] or 0) / 100, self.currency\n            )\n            amount = f\"Starts at {formatted_unit_amount_tier_1} per unit\"\n\n            # stripe shows flat fee even if it is set to 0.00\n            flat_amount_tier_1 = tier_1[\"flat_amount\"]\n            if flat_amount_tier_1 is not None:\n                formatted_flat_amount_tier_1 = get_friendly_currency_amount(\n                    flat_amount_tier_1 / 100, self.currency\n                )\n                amount = f\"{amount} + {formatted_flat_amount_tier_1}\"\n\n        format_args = {\"amount\": amount}\n\n        if self.recurring:\n            interval_count = self.recurring[\"interval_count\"]\n            if interval_count == 1:\n                interval = {\n                    \"day\": _(\"day\"),\n                    \"week\": _(\"week\"),\n                    \"month\": _(\"month\"),\n                    \"year\": _(\"year\"),\n                }[self.recurring[\"interval\"]]\n                template = _(\"{amount}/{interval}\")\n                format_args[\"interval\"] = interval\n            else:\n                interval = {\n                    \"day\": _(\"days\"),\n                    \"week\": _(\"weeks\"),\n                    \"month\": _(\"months\"),\n                    \"year\": _(\"years\"),\n                }[self.recurring[\"interval\"]]\n                template = _(\"{amount} / every {interval_count} {interval}\")\n                format_args[\"interval\"] = interval\n                format_args[\"interval_count\"] = interval_count\n\n        else:\n            template = _(\"{amount} (one time)\")\n\n        return format_lazy(template, **format_args)\n</code></pre>"},{"location":"reference/models/#djstripe.models.core.Price-attributes","title":"Attributes","text":""},{"location":"reference/models/#djstripe.models.core.Price.active","title":"<code>djstripe.models.core.Price.active = models.BooleanField(help_text='Whether the price can be used for new purchases.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Price.billing_scheme","title":"<code>djstripe.models.core.Price.billing_scheme = StripeEnumField(enum=enums.BillingScheme, blank=True, help_text='Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `unit_amount` or `unit_amount_decimal`) will be charged per unit in `quantity` (for prices with `usage_type=licensed`), or per unit of total usage (for prices with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Price.currency","title":"<code>djstripe.models.core.Price.currency = StripeCurrencyCodeField()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Price.expand_fields","title":"<code>djstripe.models.core.Price.expand_fields = ['product', 'tiers']</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Price.human_readable_price","title":"<code>djstripe.models.core.Price.human_readable_price</code>  <code>property</code>","text":""},{"location":"reference/models/#djstripe.models.core.Price.lookup_key","title":"<code>djstripe.models.core.Price.lookup_key = models.CharField(max_length=250, null=True, blank=True, help_text='A lookup key used to retrieve prices dynamically from a static string.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Price.nickname","title":"<code>djstripe.models.core.Price.nickname = models.CharField(max_length=250, blank=True, help_text='A brief description of the plan, hidden from customers.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Price.product","title":"<code>djstripe.models.core.Price.product = StripeForeignKey('Product', on_delete=models.CASCADE, related_name='prices', help_text='The product this price is associated with.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Price.recurring","title":"<code>djstripe.models.core.Price.recurring = JSONField(default=None, blank=True, null=True, help_text='The recurring components of a price such as `interval` and `usage_type`.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Price.stripe_class","title":"<code>djstripe.models.core.Price.stripe_class = stripe.Price</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Price.stripe_dashboard_item_name","title":"<code>djstripe.models.core.Price.stripe_dashboard_item_name = 'prices'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Price.tiers","title":"<code>djstripe.models.core.Price.tiers = JSONField(null=True, blank=True, help_text='Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Price.tiers_mode","title":"<code>djstripe.models.core.Price.tiers_mode = StripeEnumField(enum=enums.PriceTiersMode, null=True, blank=True, help_text='Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price, in `graduated` tiering pricing can successively change as the quantity grows.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Price.transform_quantity","title":"<code>djstripe.models.core.Price.transform_quantity = JSONField(null=True, blank=True, help_text='Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with `tiers`.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Price.type","title":"<code>djstripe.models.core.Price.type = StripeEnumField(enum=enums.PriceType, help_text='Whether the price is for a one-time purchase or a recurring (subscription) purchase.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Price.unit_amount","title":"<code>djstripe.models.core.Price.unit_amount = StripeQuantumCurrencyAmountField(null=True, blank=True, help_text='The unit amount in cents to be charged, represented as a whole integer if possible. Null if a sub-cent precision is required.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Price.unit_amount_decimal","title":"<code>djstripe.models.core.Price.unit_amount_decimal = StripeDecimalCurrencyAmountField(null=True, blank=True, max_digits=djstripe_settings.decimal_max_digits, decimal_places=djstripe_settings.decimal_places, help_text='The unit amount in cents to be charged, represented as a decimal string with at most 12 decimal places.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Price-classes","title":"Classes","text":""},{"location":"reference/models/#djstripe.models.core.Price.Meta","title":"<code>djstripe.models.core.Price.Meta</code>","text":"<p>               Bases: <code>object</code></p> Source code in <code>djstripe/models/core.py</code> <pre><code>class Meta(object):\n    ordering = [\"unit_amount\"]\n</code></pre>"},{"location":"reference/models/#djstripe.models.core.Price.Meta-attributes","title":"Attributes","text":"<code>djstripe.models.core.Price.Meta.ordering = ['unit_amount']</code> <code>class-attribute</code> <code>instance-attribute</code>"},{"location":"reference/models/#djstripe.models.core.Price-functions","title":"Functions","text":""},{"location":"reference/models/#djstripe.models.core.Price.__str__","title":"<code>djstripe.models.core.Price.__str__()</code>","text":"Source code in <code>djstripe/models/core.py</code> <pre><code>def __str__(self):\n    return f\"{self.human_readable_price} for {self.product.name}\"\n</code></pre>"},{"location":"reference/models/#djstripe.models.core.Price.create","title":"<code>djstripe.models.core.Price.create(**kwargs)</code>  <code>classmethod</code>","text":"Source code in <code>djstripe/models/core.py</code> <pre><code>@classmethod\ndef create(cls, **kwargs):\n    # A few minor things are changed in the api-version of the create call\n    api_kwargs = dict(kwargs)\n    if api_kwargs[\"unit_amount\"]:\n        api_kwargs[\"unit_amount\"] = int(api_kwargs[\"unit_amount\"] * 100)\n\n    if isinstance(api_kwargs.get(\"product\"), StripeModel):\n        api_kwargs[\"product\"] = api_kwargs[\"product\"].id\n\n    stripe_price = cls._api_create(**api_kwargs)\n\n    api_key = api_kwargs.get(\"api_key\") or djstripe_settings.STRIPE_SECRET_KEY\n    price = cls.sync_from_stripe_data(stripe_price, api_key=api_key)\n\n    return price\n</code></pre>"},{"location":"reference/models/#djstripe.models.core.Price.get_or_create","title":"<code>djstripe.models.core.Price.get_or_create(**kwargs)</code>  <code>classmethod</code>","text":"<p>Get or create a Price.</p> Source code in <code>djstripe/models/core.py</code> <pre><code>@classmethod\ndef get_or_create(cls, **kwargs):\n    \"\"\"Get or create a Price.\"\"\"\n\n    try:\n        return cls.objects.get(id=kwargs[\"id\"]), False\n    except cls.DoesNotExist:\n        return cls.create(**kwargs), True\n</code></pre>"},{"location":"reference/models/#djstripe.models.core.Product","title":"<code>djstripe.models.core.Product</code>","text":"<p>               Bases: <code>StripeModel</code></p> <p>Products describe the specific goods or services you offer to your customers. For example, you might offer a Standard and Premium version of your goods or service; each version would be a separate Product. They can be used in conjunction with Prices to configure pricing in Payment Links, Checkout, and Subscriptions.</p> <p>Stripe documentation: https://stripe.com/docs/api?lang=python#products</p> Source code in <code>djstripe/models/core.py</code> <pre><code>class Product(StripeModel):\n    \"\"\"\n    Products describe the specific goods or services you offer to your customers.\n    For example, you might offer a Standard and Premium version of your goods or service;\n    each version would be a separate Product. They can be used in conjunction with\n    Prices to configure pricing in Payment Links, Checkout, and Subscriptions.\n\n    Stripe documentation: https://stripe.com/docs/api?lang=python#products\n    \"\"\"\n\n    stripe_class = stripe.Product\n    stripe_dashboard_item_name = \"products\"\n\n    # Fields applicable to both `good` and `service`\n    name = models.TextField(\n        max_length=5000,\n        help_text=(\n            \"The product's name, meant to be displayable to the customer. \"\n            \"Applicable to both `service` and `good` types.\"\n        ),\n    )\n    default_price = StripeForeignKey(\n        \"Price\",\n        on_delete=models.SET_NULL,\n        null=True,\n        blank=True,\n        related_name=\"products\",\n        help_text=\"The default price this product is associated with.\",\n    )\n    type = StripeEnumField(\n        enum=enums.ProductType,\n        help_text=(\n            \"The type of the product. The product is either of type `good`, which is \"\n            \"eligible for use with Orders and SKUs, or `service`, which is eligible \"\n            \"for use with Subscriptions and Plans.\"\n        ),\n    )\n\n    # Fields applicable to `good` only\n    active = models.BooleanField(\n        null=True,\n        help_text=(\n            \"Whether the product is currently available for purchase. \"\n            \"Only applicable to products of `type=good`.\"\n        ),\n    )\n    attributes = JSONField(\n        null=True,\n        blank=True,\n        help_text=(\n            \"A list of up to 5 attributes that each SKU can provide values for \"\n            '(e.g., `[\"color\", \"size\"]`). Only applicable to products of `type=good`.'\n        ),\n    )\n    caption = models.TextField(\n        default=\"\",\n        blank=True,\n        max_length=5000,\n        help_text=(\n            \"A short one-line description of the product, meant to be displayable\"\n            \"to the customer. Only applicable to products of `type=good`.\"\n        ),\n    )\n    deactivate_on = JSONField(\n        null=True,\n        blank=True,\n        help_text=(\n            \"An array of connect application identifiers that cannot purchase \"\n            \"this product. Only applicable to products of `type=good`.\"\n        ),\n    )\n    images = JSONField(\n        null=True,\n        blank=True,\n        help_text=(\n            \"A list of up to 8 URLs of images for this product, meant to be \"\n            \"displayable to the customer. Only applicable to products of `type=good`.\"\n        ),\n    )\n    package_dimensions = JSONField(\n        null=True,\n        blank=True,\n        help_text=(\n            \"The dimensions of this product for shipping purposes. \"\n            \"A SKU associated with this product can override this value by having its \"\n            \"own `package_dimensions`. Only applicable to products of `type=good`.\"\n        ),\n    )\n    shippable = models.BooleanField(\n        null=True,\n        blank=True,\n        help_text=(\n            \"Whether this product is a shipped good. \"\n            \"Only applicable to products of `type=good`.\"\n        ),\n    )\n    url = models.CharField(\n        max_length=799,\n        null=True,\n        blank=True,\n        help_text=(\n            \"A URL of a publicly-accessible webpage for this product. \"\n            \"Only applicable to products of `type=good`.\"\n        ),\n    )\n\n    # Fields available to `service` only\n    statement_descriptor = models.CharField(\n        max_length=22,\n        default=\"\",\n        blank=True,\n        help_text=(\n            \"Extra information about a product which will appear on your customer's \"\n            \"credit card statement. In the case that multiple products are billed at \"\n            \"once, the first statement descriptor will be used. \"\n            \"Only available on products of type=`service`.\"\n        ),\n    )\n    unit_label = models.CharField(max_length=12, default=\"\", blank=True)\n\n    def __str__(self):\n        # 1 product can have 1 or more than 1 related price\n        price_qs = self.prices.all()\n        price_count = price_qs.count()\n\n        if price_count &gt; 1:\n            return f\"{self.name} ({price_count} prices)\"\n        elif price_count == 1:\n            return f\"{self.name} ({price_qs[0].human_readable_price})\"\n        else:\n            return self.name\n</code></pre>"},{"location":"reference/models/#djstripe.models.core.Product-attributes","title":"Attributes","text":""},{"location":"reference/models/#djstripe.models.core.Product.active","title":"<code>djstripe.models.core.Product.active = models.BooleanField(null=True, help_text='Whether the product is currently available for purchase. Only applicable to products of `type=good`.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Product.attributes","title":"<code>djstripe.models.core.Product.attributes = JSONField(null=True, blank=True, help_text='A list of up to 5 attributes that each SKU can provide values for (e.g., `[\"color\", \"size\"]`). Only applicable to products of `type=good`.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Product.caption","title":"<code>djstripe.models.core.Product.caption = models.TextField(default='', blank=True, max_length=5000, help_text='A short one-line description of the product, meant to be displayableto the customer. Only applicable to products of `type=good`.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Product.deactivate_on","title":"<code>djstripe.models.core.Product.deactivate_on = JSONField(null=True, blank=True, help_text='An array of connect application identifiers that cannot purchase this product. Only applicable to products of `type=good`.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Product.default_price","title":"<code>djstripe.models.core.Product.default_price = StripeForeignKey('Price', on_delete=models.SET_NULL, null=True, blank=True, related_name='products', help_text='The default price this product is associated with.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Product.images","title":"<code>djstripe.models.core.Product.images = JSONField(null=True, blank=True, help_text='A list of up to 8 URLs of images for this product, meant to be displayable to the customer. Only applicable to products of `type=good`.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Product.name","title":"<code>djstripe.models.core.Product.name = models.TextField(max_length=5000, help_text=\"The product's name, meant to be displayable to the customer. Applicable to both `service` and `good` types.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Product.package_dimensions","title":"<code>djstripe.models.core.Product.package_dimensions = JSONField(null=True, blank=True, help_text='The dimensions of this product for shipping purposes. A SKU associated with this product can override this value by having its own `package_dimensions`. Only applicable to products of `type=good`.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Product.shippable","title":"<code>djstripe.models.core.Product.shippable = models.BooleanField(null=True, blank=True, help_text='Whether this product is a shipped good. Only applicable to products of `type=good`.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Product.statement_descriptor","title":"<code>djstripe.models.core.Product.statement_descriptor = models.CharField(max_length=22, default='', blank=True, help_text=\"Extra information about a product which will appear on your customer's credit card statement. In the case that multiple products are billed at once, the first statement descriptor will be used. Only available on products of type=`service`.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Product.stripe_class","title":"<code>djstripe.models.core.Product.stripe_class = stripe.Product</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Product.stripe_dashboard_item_name","title":"<code>djstripe.models.core.Product.stripe_dashboard_item_name = 'products'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Product.type","title":"<code>djstripe.models.core.Product.type = StripeEnumField(enum=enums.ProductType, help_text='The type of the product. The product is either of type `good`, which is eligible for use with Orders and SKUs, or `service`, which is eligible for use with Subscriptions and Plans.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Product.unit_label","title":"<code>djstripe.models.core.Product.unit_label = models.CharField(max_length=12, default='', blank=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Product.url","title":"<code>djstripe.models.core.Product.url = models.CharField(max_length=799, null=True, blank=True, help_text='A URL of a publicly-accessible webpage for this product. Only applicable to products of `type=good`.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Product-functions","title":"Functions","text":""},{"location":"reference/models/#djstripe.models.core.Product.__str__","title":"<code>djstripe.models.core.Product.__str__()</code>","text":"Source code in <code>djstripe/models/core.py</code> <pre><code>def __str__(self):\n    # 1 product can have 1 or more than 1 related price\n    price_qs = self.prices.all()\n    price_count = price_qs.count()\n\n    if price_count &gt; 1:\n        return f\"{self.name} ({price_count} prices)\"\n    elif price_count == 1:\n        return f\"{self.name} ({price_qs[0].human_readable_price})\"\n    else:\n        return self.name\n</code></pre>"},{"location":"reference/models/#djstripe.models.core.Refund","title":"<code>djstripe.models.core.Refund</code>","text":"<p>               Bases: <code>StripeModel</code></p> <p>Refund objects allow you to refund a charge that has previously been created but not yet refunded. Funds will be refunded to the credit or debit card that was originally charged.</p> <p>Stripe documentation: https://stripe.com/docs/api?lang=python#refund_object</p> Source code in <code>djstripe/models/core.py</code> <pre><code>class Refund(StripeModel):\n    \"\"\"\n    Refund objects allow you to refund a charge that has previously been created\n    but not yet refunded. Funds will be refunded to the credit or debit card\n    that was originally charged.\n\n    Stripe documentation: https://stripe.com/docs/api?lang=python#refund_object\n    \"\"\"\n\n    stripe_class = stripe.Refund\n\n    amount = StripeQuantumCurrencyAmountField(help_text=\"Amount, in cents.\")\n    balance_transaction = StripeForeignKey(\n        \"BalanceTransaction\",\n        on_delete=models.SET_NULL,\n        null=True,\n        help_text=(\n            \"Balance transaction that describes the impact on your account balance.\"\n        ),\n    )\n    charge = StripeForeignKey(\n        \"Charge\",\n        on_delete=models.CASCADE,\n        related_name=\"refunds\",\n        help_text=\"The charge that was refunded\",\n    )\n    currency = StripeCurrencyCodeField()\n    failure_balance_transaction = StripeForeignKey(\n        \"BalanceTransaction\",\n        on_delete=models.SET_NULL,\n        related_name=\"failure_refunds\",\n        null=True,\n        blank=True,\n        help_text=(\n            \"If the refund failed, this balance transaction describes the \"\n            \"adjustment made on your account balance that reverses the initial \"\n            \"balance transaction.\"\n        ),\n    )\n    failure_reason = StripeEnumField(\n        enum=enums.RefundFailureReason,\n        default=\"\",\n        blank=True,\n        help_text=\"If the refund failed, the reason for refund failure if known.\",\n    )\n    reason = StripeEnumField(\n        enum=enums.RefundReason,\n        blank=True,\n        default=\"\",\n        help_text=\"Reason for the refund.\",\n    )\n    receipt_number = models.CharField(\n        max_length=9,\n        default=\"\",\n        blank=True,\n        help_text=(\n            \"The transaction number that appears on email receipts sent \"\n            \"for this charge.\"\n        ),\n    )\n    status = StripeEnumField(\n        blank=True, enum=enums.RefundStatus, help_text=\"Status of the refund.\"\n    )\n    # todo implement source_transfer_reversal and transfer_reversal\n\n    def get_stripe_dashboard_url(self):\n        return self.charge.get_stripe_dashboard_url()\n\n    def __str__(self):\n        amount = get_friendly_currency_amount(self.amount / 100, self.currency)\n        status = enums.RefundStatus.humanize(self.status)\n        return f\"{amount} ({status})\"\n</code></pre>"},{"location":"reference/models/#djstripe.models.core.Refund-attributes","title":"Attributes","text":""},{"location":"reference/models/#djstripe.models.core.Refund.amount","title":"<code>djstripe.models.core.Refund.amount = StripeQuantumCurrencyAmountField(help_text='Amount, in cents.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Refund.balance_transaction","title":"<code>djstripe.models.core.Refund.balance_transaction = StripeForeignKey('BalanceTransaction', on_delete=models.SET_NULL, null=True, help_text='Balance transaction that describes the impact on your account balance.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Refund.charge","title":"<code>djstripe.models.core.Refund.charge = StripeForeignKey('Charge', on_delete=models.CASCADE, related_name='refunds', help_text='The charge that was refunded')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Refund.currency","title":"<code>djstripe.models.core.Refund.currency = StripeCurrencyCodeField()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Refund.failure_balance_transaction","title":"<code>djstripe.models.core.Refund.failure_balance_transaction = StripeForeignKey('BalanceTransaction', on_delete=models.SET_NULL, related_name='failure_refunds', null=True, blank=True, help_text='If the refund failed, this balance transaction describes the adjustment made on your account balance that reverses the initial balance transaction.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Refund.failure_reason","title":"<code>djstripe.models.core.Refund.failure_reason = StripeEnumField(enum=enums.RefundFailureReason, default='', blank=True, help_text='If the refund failed, the reason for refund failure if known.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Refund.reason","title":"<code>djstripe.models.core.Refund.reason = StripeEnumField(enum=enums.RefundReason, blank=True, default='', help_text='Reason for the refund.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Refund.receipt_number","title":"<code>djstripe.models.core.Refund.receipt_number = models.CharField(max_length=9, default='', blank=True, help_text='The transaction number that appears on email receipts sent for this charge.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Refund.status","title":"<code>djstripe.models.core.Refund.status = StripeEnumField(blank=True, enum=enums.RefundStatus, help_text='Status of the refund.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Refund.stripe_class","title":"<code>djstripe.models.core.Refund.stripe_class = stripe.Refund</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.Refund-functions","title":"Functions","text":""},{"location":"reference/models/#djstripe.models.core.Refund.__str__","title":"<code>djstripe.models.core.Refund.__str__()</code>","text":"Source code in <code>djstripe/models/core.py</code> <pre><code>def __str__(self):\n    amount = get_friendly_currency_amount(self.amount / 100, self.currency)\n    status = enums.RefundStatus.humanize(self.status)\n    return f\"{amount} ({status})\"\n</code></pre>"},{"location":"reference/models/#djstripe.models.core.Refund.get_stripe_dashboard_url","title":"<code>djstripe.models.core.Refund.get_stripe_dashboard_url()</code>","text":"Source code in <code>djstripe/models/core.py</code> <pre><code>def get_stripe_dashboard_url(self):\n    return self.charge.get_stripe_dashboard_url()\n</code></pre>"},{"location":"reference/models/#djstripe.models.core.SetupIntent","title":"<code>djstripe.models.core.SetupIntent</code>","text":"<p>               Bases: <code>StripeModel</code></p> <p>A SetupIntent guides you through the process of setting up a customer's payment credentials for future payments. For example, you could use a SetupIntent to set up your customer's card without immediately collecting a payment. Later, you can use PaymentIntents to drive the payment flow.</p> <p>NOTE: You should not maintain long-lived, unconfirmed SetupIntents. For security purposes, SetupIntents older than 24 hours may no longer be valid.</p> <p>Stripe documentation: https://stripe.com/docs/api?lang=python#setup_intents</p> Source code in <code>djstripe/models/core.py</code> <pre><code>class SetupIntent(StripeModel):\n    \"\"\"\n    A SetupIntent guides you through the process of setting up a customer's\n    payment credentials for future payments. For example, you could use a SetupIntent\n    to set up your customer's card without immediately collecting a payment.\n    Later, you can use PaymentIntents to drive the payment flow.\n\n    NOTE: You should not maintain long-lived, unconfirmed SetupIntents.\n    For security purposes, SetupIntents older than 24 hours may no longer be valid.\n\n    Stripe documentation: https://stripe.com/docs/api?lang=python#setup_intents\n    \"\"\"\n\n    stripe_class = stripe.SetupIntent\n\n    application = models.CharField(\n        max_length=255,\n        blank=True,\n        help_text=\"ID of the Connect application that created the SetupIntent.\",\n    )\n    cancellation_reason = StripeEnumField(\n        enum=enums.SetupIntentCancellationReason,\n        blank=True,\n        help_text=(\n            \"Reason for cancellation of this SetupIntent, one of abandoned, \"\n            \"requested_by_customer, or duplicate\"\n        ),\n    )\n    client_secret = models.TextField(\n        max_length=5000,\n        blank=True,\n        help_text=(\n            \"The client secret of this SetupIntent. \"\n            \"Used for client-side retrieval using a publishable key.\"\n        ),\n    )\n    customer = StripeForeignKey(\n        \"Customer\",\n        null=True,\n        blank=True,\n        on_delete=models.SET_NULL,\n        help_text=\"Customer this SetupIntent belongs to, if one exists.\",\n    )\n    last_setup_error = JSONField(\n        null=True,\n        blank=True,\n        help_text=\"The error encountered in the previous SetupIntent confirmation.\",\n    )\n    next_action = JSONField(\n        null=True,\n        blank=True,\n        help_text=(\n            \"If present, this property tells you what actions you need to take in\"\n            \"order for your customer to continue payment setup.\"\n        ),\n    )\n    on_behalf_of = StripeForeignKey(\n        \"Account\",\n        on_delete=models.SET_NULL,\n        null=True,\n        blank=True,\n        help_text=\"The account (if any) for which the setup is intended.\",\n        related_name=\"setup_intents\",\n    )\n    payment_method = StripeForeignKey(\n        \"PaymentMethod\",\n        on_delete=models.SET_NULL,\n        null=True,\n        blank=True,\n        help_text=\"Payment method used in this PaymentIntent.\",\n    )\n    payment_method_types = JSONField(\n        help_text=(\n            \"The list of payment method types (e.g. card) that this PaymentIntent is \"\n            \"allowed to use.\"\n        )\n    )\n    status = StripeEnumField(\n        enum=enums.SetupIntentStatus,\n        help_text=(\n            \"Status of this SetupIntent, one of requires_payment_method, \"\n            \"requires_confirmation, requires_action, processing, \"\n            \"canceled, or succeeded.\"\n        ),\n    )\n    usage = StripeEnumField(\n        enum=enums.IntentUsage,\n        default=enums.IntentUsage.off_session,\n        help_text=(\n            \"Indicates how the payment method is intended to be used in the future.\"\n        ),\n    )\n\n    def __str__(self):\n        account = self.on_behalf_of\n        customer = self.customer\n\n        if account and customer:\n            return (\n                f\"{self.payment_method} ({enums.SetupIntentStatus.humanize(self.status)})\"\n                f\" for {account} by {customer}\"\n            )\n\n        if account:\n            return (\n                f\"{self.payment_method} for {account}.\"\n                f\" {enums.SetupIntentStatus.humanize(self.status)}\"\n            )\n        if customer:\n            return (\n                f\"{self.payment_method} by {customer}.\"\n                f\" {enums.SetupIntentStatus.humanize(self.status)}\"\n            )\n        return (\n            f\"{self.payment_method} ({enums.SetupIntentStatus.humanize(self.status)})\"\n        )\n</code></pre>"},{"location":"reference/models/#djstripe.models.core.SetupIntent-attributes","title":"Attributes","text":""},{"location":"reference/models/#djstripe.models.core.SetupIntent.application","title":"<code>djstripe.models.core.SetupIntent.application = models.CharField(max_length=255, blank=True, help_text='ID of the Connect application that created the SetupIntent.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.SetupIntent.cancellation_reason","title":"<code>djstripe.models.core.SetupIntent.cancellation_reason = StripeEnumField(enum=enums.SetupIntentCancellationReason, blank=True, help_text='Reason for cancellation of this SetupIntent, one of abandoned, requested_by_customer, or duplicate')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.SetupIntent.client_secret","title":"<code>djstripe.models.core.SetupIntent.client_secret = models.TextField(max_length=5000, blank=True, help_text='The client secret of this SetupIntent. Used for client-side retrieval using a publishable key.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.SetupIntent.customer","title":"<code>djstripe.models.core.SetupIntent.customer = StripeForeignKey('Customer', null=True, blank=True, on_delete=models.SET_NULL, help_text='Customer this SetupIntent belongs to, if one exists.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.SetupIntent.last_setup_error","title":"<code>djstripe.models.core.SetupIntent.last_setup_error = JSONField(null=True, blank=True, help_text='The error encountered in the previous SetupIntent confirmation.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.SetupIntent.next_action","title":"<code>djstripe.models.core.SetupIntent.next_action = JSONField(null=True, blank=True, help_text='If present, this property tells you what actions you need to take inorder for your customer to continue payment setup.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.SetupIntent.on_behalf_of","title":"<code>djstripe.models.core.SetupIntent.on_behalf_of = StripeForeignKey('Account', on_delete=models.SET_NULL, null=True, blank=True, help_text='The account (if any) for which the setup is intended.', related_name='setup_intents')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.SetupIntent.payment_method","title":"<code>djstripe.models.core.SetupIntent.payment_method = StripeForeignKey('PaymentMethod', on_delete=models.SET_NULL, null=True, blank=True, help_text='Payment method used in this PaymentIntent.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.SetupIntent.payment_method_types","title":"<code>djstripe.models.core.SetupIntent.payment_method_types = JSONField(help_text='The list of payment method types (e.g. card) that this PaymentIntent is allowed to use.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.SetupIntent.status","title":"<code>djstripe.models.core.SetupIntent.status = StripeEnumField(enum=enums.SetupIntentStatus, help_text='Status of this SetupIntent, one of requires_payment_method, requires_confirmation, requires_action, processing, canceled, or succeeded.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.SetupIntent.stripe_class","title":"<code>djstripe.models.core.SetupIntent.stripe_class = stripe.SetupIntent</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.SetupIntent.usage","title":"<code>djstripe.models.core.SetupIntent.usage = StripeEnumField(enum=enums.IntentUsage, default=enums.IntentUsage.off_session, help_text='Indicates how the payment method is intended to be used in the future.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.core.SetupIntent-functions","title":"Functions","text":""},{"location":"reference/models/#djstripe.models.core.SetupIntent.__str__","title":"<code>djstripe.models.core.SetupIntent.__str__()</code>","text":"Source code in <code>djstripe/models/core.py</code> <pre><code>def __str__(self):\n    account = self.on_behalf_of\n    customer = self.customer\n\n    if account and customer:\n        return (\n            f\"{self.payment_method} ({enums.SetupIntentStatus.humanize(self.status)})\"\n            f\" for {account} by {customer}\"\n        )\n\n    if account:\n        return (\n            f\"{self.payment_method} for {account}.\"\n            f\" {enums.SetupIntentStatus.humanize(self.status)}\"\n        )\n    if customer:\n        return (\n            f\"{self.payment_method} by {customer}.\"\n            f\" {enums.SetupIntentStatus.humanize(self.status)}\"\n        )\n    return (\n        f\"{self.payment_method} ({enums.SetupIntentStatus.humanize(self.status)})\"\n    )\n</code></pre>"},{"location":"reference/models/#djstripe.models.core-functions","title":"Functions","text":""},{"location":"reference/models/#payment-methods","title":"Payment Methods","text":""},{"location":"reference/models/#djstripe.models.payment_methods-attributes","title":"Attributes","text":""},{"location":"reference/models/#djstripe.models.payment_methods-classes","title":"Classes","text":""},{"location":"reference/models/#djstripe.models.payment_methods.BankAccount","title":"<code>djstripe.models.payment_methods.BankAccount</code>","text":"<p>               Bases: <code>LegacySourceMixin</code>, <code>StripeModel</code></p> <p>These bank accounts are payment methods on Customer objects. On the other hand External Accounts are transfer destinations on Account objects for Custom accounts. They can be bank accounts or debit cards as well.</p> <p>Stripe documentation:https://stripe.com/docs/api/customer_bank_accounts</p> Source code in <code>djstripe/models/payment_methods.py</code> <pre><code>class BankAccount(LegacySourceMixin, StripeModel):\n    \"\"\"\n    These bank accounts are payment methods on Customer objects.\n    On the other hand External Accounts are transfer destinations on Account\n    objects for Custom accounts. They can be bank accounts or debit cards as well.\n\n    Stripe documentation:https://stripe.com/docs/api/customer_bank_accounts\n    \"\"\"\n\n    stripe_class = stripe.BankAccount\n\n    @property\n    def account(self) -&gt; Optional[\"Account\"]:\n        id = get_id_from_stripe_data(self.stripe_data.get(\"source\"))\n        return Account.objects.get(id=id)\n\n    @property\n    def account_holder_name(self) -&gt; str:\n        return self.stripe_data.get(\"account_holder_name\", \"\")\n\n    @property\n    def account_holder_type(self) -&gt; enums.BankAccountHolderType:\n        type = self.stripe_data.get(\"account_holder_type\", \"\")\n        return enums.BankAccountHolderType[type]\n\n    @property\n    def bank_name(self) -&gt; str:\n        return self.stripe_data.get(\"bank_name\", \"\")\n\n    @property\n    def country(self) -&gt; str:\n        return self.stripe_data.get(\"country\", \"\")\n\n    @property\n    def currency(self) -&gt; str:\n        return self.stripe_data.get(\"currency\", \"\")\n\n    @property\n    def customer(self) -&gt; Optional[\"Customer\"]:\n        customer_id = get_id_from_stripe_data(self.stripe_data.get(\"customer\"))\n        if customer_id:\n            return Customer.objects.get(id=customer_id)\n\n    @property\n    def fingerprint(self) -&gt; str:\n        return self.stripe_data.get(\"fingerprint\", \"\")\n\n    @property\n    def last4(self) -&gt; str:\n        return self.stripe_data.get(\"last4\", \"\")\n\n    @property\n    def routing_number(self) -&gt; str:\n        return self.stripe_data.get(\"routing_number\", \"\")\n\n    @property\n    def status(self) -&gt; enums.BankAccountStatus:\n        status = self.stripe_data.get(\"status\", \"\")\n        return enums.BankAccountStatus[status]\n\n    @property\n    def human_readable_status(self):\n        status = self.status\n        if status == enums.BankAccountStatus.new:\n            return \"Pending Verification\"\n        return enums.BankAccountStatus.humanize(self.status)\n\n    def api_retrieve(self, **kwargs):\n        if not self.customer and not self.account:\n            raise ImpossibleAPIRequest(\n                \"Can't retrieve a bank account without a customer or account object.\"\n                \" This may happen if not all accounts or customer objects are in the\"\n                ' db. Please run \"python manage.py djstripe_sync_models Account'\n                ' Customer\" as a potential fix.'\n            )\n\n        return super().api_retrieve(**kwargs)\n</code></pre>"},{"location":"reference/models/#djstripe.models.payment_methods.BankAccount-attributes","title":"Attributes","text":""},{"location":"reference/models/#djstripe.models.payment_methods.BankAccount.account","title":"<code>djstripe.models.payment_methods.BankAccount.account: Optional[Account]</code>  <code>property</code>","text":""},{"location":"reference/models/#djstripe.models.payment_methods.BankAccount.account_holder_name","title":"<code>djstripe.models.payment_methods.BankAccount.account_holder_name: str</code>  <code>property</code>","text":""},{"location":"reference/models/#djstripe.models.payment_methods.BankAccount.account_holder_type","title":"<code>djstripe.models.payment_methods.BankAccount.account_holder_type: enums.BankAccountHolderType</code>  <code>property</code>","text":""},{"location":"reference/models/#djstripe.models.payment_methods.BankAccount.bank_name","title":"<code>djstripe.models.payment_methods.BankAccount.bank_name: str</code>  <code>property</code>","text":""},{"location":"reference/models/#djstripe.models.payment_methods.BankAccount.country","title":"<code>djstripe.models.payment_methods.BankAccount.country: str</code>  <code>property</code>","text":""},{"location":"reference/models/#djstripe.models.payment_methods.BankAccount.currency","title":"<code>djstripe.models.payment_methods.BankAccount.currency: str</code>  <code>property</code>","text":""},{"location":"reference/models/#djstripe.models.payment_methods.BankAccount.customer","title":"<code>djstripe.models.payment_methods.BankAccount.customer: Optional[Customer]</code>  <code>property</code>","text":""},{"location":"reference/models/#djstripe.models.payment_methods.BankAccount.fingerprint","title":"<code>djstripe.models.payment_methods.BankAccount.fingerprint: str</code>  <code>property</code>","text":""},{"location":"reference/models/#djstripe.models.payment_methods.BankAccount.human_readable_status","title":"<code>djstripe.models.payment_methods.BankAccount.human_readable_status</code>  <code>property</code>","text":""},{"location":"reference/models/#djstripe.models.payment_methods.BankAccount.last4","title":"<code>djstripe.models.payment_methods.BankAccount.last4: str</code>  <code>property</code>","text":""},{"location":"reference/models/#djstripe.models.payment_methods.BankAccount.routing_number","title":"<code>djstripe.models.payment_methods.BankAccount.routing_number: str</code>  <code>property</code>","text":""},{"location":"reference/models/#djstripe.models.payment_methods.BankAccount.status","title":"<code>djstripe.models.payment_methods.BankAccount.status: enums.BankAccountStatus</code>  <code>property</code>","text":""},{"location":"reference/models/#djstripe.models.payment_methods.BankAccount.stripe_class","title":"<code>djstripe.models.payment_methods.BankAccount.stripe_class = stripe.BankAccount</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.payment_methods.BankAccount-functions","title":"Functions","text":""},{"location":"reference/models/#djstripe.models.payment_methods.BankAccount.api_retrieve","title":"<code>djstripe.models.payment_methods.BankAccount.api_retrieve(**kwargs)</code>","text":"Source code in <code>djstripe/models/payment_methods.py</code> <pre><code>def api_retrieve(self, **kwargs):\n    if not self.customer and not self.account:\n        raise ImpossibleAPIRequest(\n            \"Can't retrieve a bank account without a customer or account object.\"\n            \" This may happen if not all accounts or customer objects are in the\"\n            ' db. Please run \"python manage.py djstripe_sync_models Account'\n            ' Customer\" as a potential fix.'\n        )\n\n    return super().api_retrieve(**kwargs)\n</code></pre>"},{"location":"reference/models/#djstripe.models.payment_methods.Card","title":"<code>djstripe.models.payment_methods.Card</code>","text":"<p>               Bases: <code>LegacySourceMixin</code>, <code>StripeModel</code></p> <p>You can store multiple cards on a customer in order to charge the customer later.</p> <p>This is a legacy model which only applies to the \"v2\" Stripe API (eg. Checkout.js). You should strive to use the Stripe \"v3\" API (eg. Stripe Elements). Also see: https://stripe.com/docs/stripe-js/elements/migrating When using Elements, you will not be using Card objects. Instead, you will use Source objects. A Source object of type \"card\" is equivalent to a Card object. However, Card objects cannot be converted into Source objects by Stripe at this time.</p> <p>Stripe documentation: https://stripe.com/docs/api?lang=python#cards</p> Source code in <code>djstripe/models/payment_methods.py</code> <pre><code>class Card(LegacySourceMixin, StripeModel):\n    \"\"\"\n    You can store multiple cards on a customer in order to charge the customer later.\n\n    This is a legacy model which only applies to the \"v2\" Stripe API (eg. Checkout.js).\n    You should strive to use the Stripe \"v3\" API (eg. Stripe Elements).\n    Also see: https://stripe.com/docs/stripe-js/elements/migrating\n    When using Elements, you will not be using Card objects. Instead, you will use\n    Source objects.\n    A Source object of type \"card\" is equivalent to a Card object. However, Card\n    objects cannot be converted into Source objects by Stripe at this time.\n\n    Stripe documentation: https://stripe.com/docs/api?lang=python#cards\n    \"\"\"\n\n    stripe_class = stripe.Card\n\n    @property\n    def account(self) -&gt; Optional[\"Account\"]:\n        id = get_id_from_stripe_data(self.stripe_data.get(\"source\"))\n        return Account.objects.get(id=id)\n\n    @property\n    def brand(self) -&gt; enums.CardBrand:\n        type = self.stripe_data[\"brand\"]\n        return enums.CardBrand(type)\n\n    @property\n    def country(self) -&gt; str:\n        return self.stripe_data.get(\"country\", \"\")\n\n    @property\n    def customer(self) -&gt; Optional[\"Customer\"]:\n        customer_id = get_id_from_stripe_data(self.stripe_data.get(\"customer\"))\n        if customer_id:\n            return Customer.objects.get(id=customer_id)\n\n    @property\n    def exp_month(self) -&gt; int:\n        return self.stripe_data[\"exp_month\"]\n\n    @property\n    def exp_year(self) -&gt; int:\n        return self.stripe_data[\"exp_year\"]\n\n    @property\n    def fingerprint(self) -&gt; str:\n        return self.stripe_data.get(\"fingerprint\", \"\")\n\n    @property\n    def funding(self) -&gt; enums.CardFundingType:\n        type = self.stripe_data[\"funding\"]\n        return enums.CardFundingType(type)\n\n    @property\n    def last4(self) -&gt; str:\n        return self.stripe_data.get(\"last4\", \"\")\n\n    @property\n    def name(self) -&gt; str:\n        return self.stripe_data.get(\"name\", \"\")\n\n    def __str__(self):\n        default = False\n        # prefer to show it by customer format if present\n        customer = self.customer\n        if customer:\n            default_source = customer.default_source\n            default_payment_method = customer.default_payment_method\n\n            if (default_payment_method and self.id == default_payment_method.id) or (\n                default_source and self.id == default_source.id\n            ):\n                # current card is the default payment method or source\n                default = True\n\n            customer_template = (\n                f\"{enums.CardBrand.humanize(self.brand)} {self.last4} {'Default' if default else ''} Expires\"\n                f\" {self.exp_month} {self.exp_year}\"\n            )\n            return customer_template\n\n        elif self.account:\n            default = getattr(self, \"default_for_currency\", False)\n            account_template = f\"{enums.CardBrand.humanize(self.brand)} {self.account.default_currency} {'Default' if default else ''} {self.last4}\"\n            return account_template\n\n        return self.id or \"\"\n\n    @classmethod\n    def create_token(\n        cls,\n        number: str,\n        exp_month: int,\n        exp_year: int,\n        cvc: str,\n        api_key: str = djstripe_settings.STRIPE_SECRET_KEY,\n        **kwargs,\n    ) -&gt; stripe.Token:\n        \"\"\"\n        Creates a single use token that wraps the details of a credit card.\n        This token can be used in place of a credit card dictionary with any API method.\n        These tokens can only be used once: by creating a new charge object,\n        or attaching them to a customer.\n        (Source: https://stripe.com/docs/api?lang=python#create_card_token)\n\n        :param number: The card number without any separators (no spaces)\n        :param exp_month: The card's expiration month. (two digits)\n        :param exp_year: The card's expiration year. (four digits)\n        :param cvc: Card security code.\n        :param api_key: The API key to use\n        \"\"\"\n\n        card = {\n            \"number\": number,\n            \"exp_month\": exp_month,\n            \"exp_year\": exp_year,\n            \"cvc\": cvc,\n        }\n        card.update(kwargs)\n\n        return stripe.Token.create(api_key=api_key, card=card)\n</code></pre>"},{"location":"reference/models/#djstripe.models.payment_methods.Card-attributes","title":"Attributes","text":""},{"location":"reference/models/#djstripe.models.payment_methods.Card.account","title":"<code>djstripe.models.payment_methods.Card.account: Optional[Account]</code>  <code>property</code>","text":""},{"location":"reference/models/#djstripe.models.payment_methods.Card.brand","title":"<code>djstripe.models.payment_methods.Card.brand: enums.CardBrand</code>  <code>property</code>","text":""},{"location":"reference/models/#djstripe.models.payment_methods.Card.country","title":"<code>djstripe.models.payment_methods.Card.country: str</code>  <code>property</code>","text":""},{"location":"reference/models/#djstripe.models.payment_methods.Card.customer","title":"<code>djstripe.models.payment_methods.Card.customer: Optional[Customer]</code>  <code>property</code>","text":""},{"location":"reference/models/#djstripe.models.payment_methods.Card.exp_month","title":"<code>djstripe.models.payment_methods.Card.exp_month: int</code>  <code>property</code>","text":""},{"location":"reference/models/#djstripe.models.payment_methods.Card.exp_year","title":"<code>djstripe.models.payment_methods.Card.exp_year: int</code>  <code>property</code>","text":""},{"location":"reference/models/#djstripe.models.payment_methods.Card.fingerprint","title":"<code>djstripe.models.payment_methods.Card.fingerprint: str</code>  <code>property</code>","text":""},{"location":"reference/models/#djstripe.models.payment_methods.Card.funding","title":"<code>djstripe.models.payment_methods.Card.funding: enums.CardFundingType</code>  <code>property</code>","text":""},{"location":"reference/models/#djstripe.models.payment_methods.Card.last4","title":"<code>djstripe.models.payment_methods.Card.last4: str</code>  <code>property</code>","text":""},{"location":"reference/models/#djstripe.models.payment_methods.Card.name","title":"<code>djstripe.models.payment_methods.Card.name: str</code>  <code>property</code>","text":""},{"location":"reference/models/#djstripe.models.payment_methods.Card.stripe_class","title":"<code>djstripe.models.payment_methods.Card.stripe_class = stripe.Card</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.payment_methods.Card-functions","title":"Functions","text":""},{"location":"reference/models/#djstripe.models.payment_methods.Card.__str__","title":"<code>djstripe.models.payment_methods.Card.__str__()</code>","text":"Source code in <code>djstripe/models/payment_methods.py</code> <pre><code>def __str__(self):\n    default = False\n    # prefer to show it by customer format if present\n    customer = self.customer\n    if customer:\n        default_source = customer.default_source\n        default_payment_method = customer.default_payment_method\n\n        if (default_payment_method and self.id == default_payment_method.id) or (\n            default_source and self.id == default_source.id\n        ):\n            # current card is the default payment method or source\n            default = True\n\n        customer_template = (\n            f\"{enums.CardBrand.humanize(self.brand)} {self.last4} {'Default' if default else ''} Expires\"\n            f\" {self.exp_month} {self.exp_year}\"\n        )\n        return customer_template\n\n    elif self.account:\n        default = getattr(self, \"default_for_currency\", False)\n        account_template = f\"{enums.CardBrand.humanize(self.brand)} {self.account.default_currency} {'Default' if default else ''} {self.last4}\"\n        return account_template\n\n    return self.id or \"\"\n</code></pre>"},{"location":"reference/models/#djstripe.models.payment_methods.Card.create_token","title":"<code>djstripe.models.payment_methods.Card.create_token(number, exp_month, exp_year, cvc, api_key=djstripe_settings.STRIPE_SECRET_KEY, **kwargs)</code>  <code>classmethod</code>","text":"<p>Creates a single use token that wraps the details of a credit card. This token can be used in place of a credit card dictionary with any API method. These tokens can only be used once: by creating a new charge object, or attaching them to a customer. (Source: https://stripe.com/docs/api?lang=python#create_card_token)</p> <p>:param number: The card number without any separators (no spaces) :param exp_month: The card's expiration month. (two digits) :param exp_year: The card's expiration year. (four digits) :param cvc: Card security code. :param api_key: The API key to use</p> Source code in <code>djstripe/models/payment_methods.py</code> <pre><code>@classmethod\ndef create_token(\n    cls,\n    number: str,\n    exp_month: int,\n    exp_year: int,\n    cvc: str,\n    api_key: str = djstripe_settings.STRIPE_SECRET_KEY,\n    **kwargs,\n) -&gt; stripe.Token:\n    \"\"\"\n    Creates a single use token that wraps the details of a credit card.\n    This token can be used in place of a credit card dictionary with any API method.\n    These tokens can only be used once: by creating a new charge object,\n    or attaching them to a customer.\n    (Source: https://stripe.com/docs/api?lang=python#create_card_token)\n\n    :param number: The card number without any separators (no spaces)\n    :param exp_month: The card's expiration month. (two digits)\n    :param exp_year: The card's expiration year. (four digits)\n    :param cvc: Card security code.\n    :param api_key: The API key to use\n    \"\"\"\n\n    card = {\n        \"number\": number,\n        \"exp_month\": exp_month,\n        \"exp_year\": exp_year,\n        \"cvc\": cvc,\n    }\n    card.update(kwargs)\n\n    return stripe.Token.create(api_key=api_key, card=card)\n</code></pre>"},{"location":"reference/models/#djstripe.models.payment_methods.DjstripePaymentMethod","title":"<code>djstripe.models.payment_methods.DjstripePaymentMethod</code>","text":"<p>               Bases: <code>Model</code></p> <p>An internal model that abstracts the legacy Card and BankAccount objects with Source objects.</p> <p>Contains two fields: <code>id</code> and <code>type</code>: - <code>id</code> is the id of the Stripe object. - <code>type</code> can be <code>card</code>, <code>bank_account</code> <code>account</code> or <code>source</code>.</p> Source code in <code>djstripe/models/payment_methods.py</code> <pre><code>class DjstripePaymentMethod(models.Model):\n    \"\"\"\n    An internal model that abstracts the legacy Card and BankAccount\n    objects with Source objects.\n\n    Contains two fields: `id` and `type`:\n    - `id` is the id of the Stripe object.\n    - `type` can be `card`, `bank_account` `account` or `source`.\n    \"\"\"\n\n    id = models.CharField(max_length=255, primary_key=True)\n    type = models.CharField(max_length=50, db_index=True)\n\n    @classmethod\n    def from_stripe_object(cls, data):\n        source_type = data[\"object\"]\n        model = cls._model_for_type(source_type)\n\n        with transaction.atomic():\n            model.sync_from_stripe_data(data)\n            instance, _ = cls.objects.get_or_create(\n                id=data[\"id\"], defaults={\"type\": source_type}\n            )\n\n        return instance\n\n    @classmethod\n    def _get_or_create_source(\n        cls, data, source_type=None, api_key=djstripe_settings.STRIPE_SECRET_KEY\n    ):\n        # prefer passed in source_type\n        if not source_type:\n            source_type = data[\"object\"]\n\n        try:\n            model = cls._model_for_type(source_type)\n            model._get_or_create_from_stripe_object(data, api_key=api_key)\n        except ValueError as e:\n            # This may happen if we have source types we don't know about.\n            # Let's not make dj-stripe entirely unusable if that happens.\n            logger.warning(\"Could not sync source of type %r: %s\", source_type, e)\n\n        return cls.objects.get_or_create(id=data[\"id\"], defaults={\"type\": source_type})\n\n    @classmethod\n    def _model_for_type(cls, type):\n        if type == \"card\":\n            return Card\n        elif type == \"source\":\n            return Source\n        elif type == \"bank_account\":\n            return BankAccount\n        elif type == \"account\":\n            return Account\n\n        raise ValueError(f\"Unknown source type: {type}\")\n\n    @property\n    def object_model(self):\n        return self._model_for_type(self.type)\n\n    def resolve(self):\n        return self.object_model.objects.get(id=self.id)\n\n    @classmethod\n    def _get_or_create_from_stripe_object(\n        cls,\n        data,\n        field_name=\"id\",\n        refetch=True,\n        current_ids=None,\n        pending_relations=None,\n        save=True,\n        stripe_account=None,\n        api_key=djstripe_settings.STRIPE_SECRET_KEY,\n    ):\n        raw_field_data = data.get(field_name)\n        id_ = get_id_from_stripe_data(raw_field_data)\n        if not id_:\n            raise ValueError(f\"ID not found in Stripe data: {raw_field_data!r}\")\n\n        if id_.startswith(\"card\"):\n            source_cls = Card\n            source_type = \"card\"\n        elif id_.startswith(\"src\"):\n            source_cls = Source\n            source_type = \"source\"\n        elif id_.startswith(\"ba\"):\n            source_cls = BankAccount\n            source_type = \"bank_account\"\n        elif id_.startswith(\"acct\"):\n            source_cls = Account\n            source_type = \"account\"\n        else:\n            # This may happen if we have source types we don't know about.\n            # Let's not make dj-stripe entirely unusable if that happens.\n            logger.warning(f\"Unknown Object. Could not sync source with id: {id_}\")\n            return cls.objects.get_or_create(\n                id=id_, defaults={\"type\": f\"UNSUPPORTED_{id_}\"}\n            )\n\n        # call model's _get_or_create_from_stripe_object to ensure\n        # that object exists before getting or creating its source object\n        source_cls._get_or_create_from_stripe_object(\n            data,\n            field_name,\n            refetch=refetch,\n            current_ids=current_ids,\n            pending_relations=pending_relations,\n            stripe_account=stripe_account,\n            api_key=api_key,\n        )\n\n        return cls.objects.get_or_create(id=id_, defaults={\"type\": source_type})\n</code></pre>"},{"location":"reference/models/#djstripe.models.payment_methods.DjstripePaymentMethod-attributes","title":"Attributes","text":""},{"location":"reference/models/#djstripe.models.payment_methods.DjstripePaymentMethod.id","title":"<code>djstripe.models.payment_methods.DjstripePaymentMethod.id = models.CharField(max_length=255, primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.payment_methods.DjstripePaymentMethod.object_model","title":"<code>djstripe.models.payment_methods.DjstripePaymentMethod.object_model</code>  <code>property</code>","text":""},{"location":"reference/models/#djstripe.models.payment_methods.DjstripePaymentMethod.type","title":"<code>djstripe.models.payment_methods.DjstripePaymentMethod.type = models.CharField(max_length=50, db_index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.payment_methods.DjstripePaymentMethod-functions","title":"Functions","text":""},{"location":"reference/models/#djstripe.models.payment_methods.DjstripePaymentMethod.from_stripe_object","title":"<code>djstripe.models.payment_methods.DjstripePaymentMethod.from_stripe_object(data)</code>  <code>classmethod</code>","text":"Source code in <code>djstripe/models/payment_methods.py</code> <pre><code>@classmethod\ndef from_stripe_object(cls, data):\n    source_type = data[\"object\"]\n    model = cls._model_for_type(source_type)\n\n    with transaction.atomic():\n        model.sync_from_stripe_data(data)\n        instance, _ = cls.objects.get_or_create(\n            id=data[\"id\"], defaults={\"type\": source_type}\n        )\n\n    return instance\n</code></pre>"},{"location":"reference/models/#djstripe.models.payment_methods.DjstripePaymentMethod.resolve","title":"<code>djstripe.models.payment_methods.DjstripePaymentMethod.resolve()</code>","text":"Source code in <code>djstripe/models/payment_methods.py</code> <pre><code>def resolve(self):\n    return self.object_model.objects.get(id=self.id)\n</code></pre>"},{"location":"reference/models/#djstripe.models.payment_methods.LegacySourceMixin","title":"<code>djstripe.models.payment_methods.LegacySourceMixin</code>","text":"<p>Mixin for functionality shared between the legacy Card &amp; BankAccount sources</p> Source code in <code>djstripe/models/payment_methods.py</code> <pre><code>class LegacySourceMixin:\n    \"\"\"\n    Mixin for functionality shared between the legacy Card &amp; BankAccount sources\n    \"\"\"\n\n    customer: Optional[StripeForeignKey]\n    account: Optional[StripeForeignKey]\n    id: str\n    default_api_key: str\n\n    @classmethod\n    def _get_customer_or_account_from_kwargs(cls, **kwargs):\n        account = kwargs.get(\"account\")\n        customer = kwargs.get(\"customer\")\n\n        if not account and not customer:\n            raise StripeObjectManipulationException(\n                f\"{cls.__name__} objects must be manipulated through either a \"\n                \"Stripe Connected Account or a customer. \"\n                \"Pass a Customer or an Account object into this call.\"\n            )\n\n        if account and not isinstance(account, Account):\n            raise StripeObjectManipulationException(\n                f\"{cls.__name__} objects must be manipulated through a Stripe Connected\"\n                \" Account. Pass an Account object into this call.\"\n            )\n\n        if customer and not isinstance(customer, Customer):\n            raise StripeObjectManipulationException(\n                f\"{cls.__name__} objects must be manipulated through a Customer. \"\n                \"Pass a Customer object into this call.\"\n            )\n\n        if account:\n            del kwargs[\"account\"]\n        if customer:\n            del kwargs[\"customer\"]\n\n        return account, customer, kwargs\n\n    @classmethod\n    def _api_create(cls, api_key=djstripe_settings.STRIPE_SECRET_KEY, **kwargs):\n        # OVERRIDING the parent version of this function\n        # Cards &amp; Bank Accounts must be manipulated through a customer or account.\n\n        account, customer, clean_kwargs = cls._get_customer_or_account_from_kwargs(\n            **kwargs\n        )\n\n        # First we try to retrieve by customer attribute,\n        # then by account attribute\n        if customer and account:\n            try:\n                # retrieve by customer\n                return customer.api_retrieve(api_key=api_key).sources.create(\n                    api_key=api_key, **clean_kwargs\n                )\n            except Exception as customer_exc:\n                try:\n                    # retrieve by account\n                    return account.api_retrieve(\n                        api_key=api_key\n                    ).external_accounts.create(api_key=api_key, **clean_kwargs)\n                except Exception:\n                    raise customer_exc\n\n        if customer:\n            return customer.api_retrieve(api_key=api_key).sources.create(\n                api_key=api_key, **clean_kwargs\n            )\n\n        if account:\n            return account.api_retrieve(api_key=api_key).external_accounts.create(\n                api_key=api_key, **clean_kwargs\n            )\n\n    @classmethod\n    def api_list(cls, api_key=djstripe_settings.STRIPE_SECRET_KEY, **kwargs):\n        # OVERRIDING the parent version of this function\n        # Cards &amp; Bank Accounts must be manipulated through a customer or account.\n\n        # Update kwargs with `expand` param\n        kwargs = cls.get_expand_params(api_key, **kwargs)\n\n        account, customer, clean_kwargs = cls._get_customer_or_account_from_kwargs(\n            **kwargs\n        )\n\n        object_name = cls.stripe_class.OBJECT_NAME\n\n        # First we try to retrieve by customer attribute,\n        # then by account attribute\n        if customer and account:\n            try:\n                # retrieve by customer\n                return (\n                    customer.api_retrieve(api_key=api_key)\n                    .sources.list(object=object_name, **clean_kwargs)\n                    .auto_paging_iter()\n                )\n            except Exception as customer_exc:\n                try:\n                    # retrieve by account\n                    return (\n                        account.api_retrieve(api_key=api_key)\n                        .external_accounts.list(object=object_name, **clean_kwargs)\n                        .auto_paging_iter()\n                    )\n                except Exception:\n                    raise customer_exc\n\n        if customer:\n            return (\n                customer.api_retrieve(api_key=api_key)\n                .sources.list(object=object_name, **clean_kwargs)\n                .auto_paging_iter()\n            )\n\n        if account:\n            return (\n                account.api_retrieve(api_key=api_key)\n                .external_accounts.list(object=object_name, **clean_kwargs)\n                .auto_paging_iter()\n            )\n\n        raise ImpossibleAPIRequest(\n            f\"Can't list {object_name} without a customer or account object. This may\"\n            \" happen if not all accounts or customer objects are in the db. Please run\"\n            ' \"python manage.py djstripe_sync_models Account Customer\" as a potential'\n            \" fix.\"\n        )\n\n    def get_stripe_dashboard_url(self) -&gt; str:\n        if self.customer:\n            return self.customer.get_stripe_dashboard_url()\n        elif self.account:\n            return f\"https://dashboard.stripe.com/{self.account.id}/settings/payouts\"\n        else:\n            return \"\"\n\n    def remove(self):\n        \"\"\"\n        Removes a legacy source from this customer's account.\n        \"\"\"\n\n        # First, wipe default source on all customers that use this card.\n        Customer.objects.filter(default_source=self.id).update(default_source=None)\n\n        try:\n            self._api_delete()\n        except InvalidRequestError as exc:\n            if \"No such source:\" in str(exc) or \"No such customer:\" in str(exc):\n                # The exception was thrown because the stripe customer or card\n                # was already deleted on the stripe side, ignore the exception\n                pass\n            else:\n                # The exception was raised for another reason, re-raise it\n                raise\n\n        self.delete()\n\n    def api_retrieve(self, api_key=None, stripe_account=None):\n        # OVERRIDING the parent version of this function\n        # Cards &amp; Banks Accounts must be manipulated through a customer or account.\n\n        api_key = api_key or self.default_api_key\n\n        if self.customer:\n            return stripe.Customer.retrieve_source(\n                self.customer.id,\n                self.id,\n                expand=self.expand_fields,\n                stripe_account=stripe_account,\n                api_key=api_key,\n                stripe_version=djstripe_settings.STRIPE_API_VERSION,\n            )\n\n        # try to retrieve by account attribute if retrieval by customer fails.\n        if self.account:\n            return stripe.Account.retrieve_external_account(\n                self.account.id,\n                self.id,\n                expand=self.expand_fields,\n                stripe_account=stripe_account,\n                api_key=api_key,\n                stripe_version=djstripe_settings.STRIPE_API_VERSION,\n            )\n\n        raise ImpossibleAPIRequest(\n            f\"Can't retrieve {self.__class__} without a customer or account object.\"\n            \" This may happen if not all accounts or customer objects are in the db.\"\n            ' Please run \"python manage.py djstripe_sync_models Account Customer\" as a'\n            \" potential fix.\"\n        )\n\n    def _api_delete(self, api_key=None, stripe_account=None, **kwargs):\n        # OVERRIDING the parent version of this function\n        # Cards &amp; Banks Accounts must be manipulated through a customer or account.\n\n        api_key = api_key or self.default_api_key\n        # Prefer passed in stripe_account if set.\n        if not stripe_account:\n            stripe_account = self._get_stripe_account_id(api_key)\n\n        if self.customer:\n            return stripe.Customer.delete_source(\n                self.customer.id,\n                self.id,\n                api_key=api_key,\n                stripe_account=stripe_account,\n                **kwargs,\n            )\n\n        if self.account:\n            return stripe.Account.delete_external_account(\n                self.account.id,\n                self.id,\n                api_key=api_key,\n                stripe_account=stripe_account,\n                **kwargs,\n            )\n\n        raise ImpossibleAPIRequest(\n            f\"Can't delete {self.__class__} without a customer or account object. This\"\n            \" may happen if not all accounts or customer objects are in the db. Please\"\n            ' run \"python manage.py djstripe_sync_models Account Customer\" as a'\n            \" potential fix.\"\n        )\n</code></pre>"},{"location":"reference/models/#djstripe.models.payment_methods.LegacySourceMixin-attributes","title":"Attributes","text":""},{"location":"reference/models/#djstripe.models.payment_methods.LegacySourceMixin.account","title":"<code>djstripe.models.payment_methods.LegacySourceMixin.account: Optional[StripeForeignKey]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.payment_methods.LegacySourceMixin.customer","title":"<code>djstripe.models.payment_methods.LegacySourceMixin.customer: Optional[StripeForeignKey]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.payment_methods.LegacySourceMixin.default_api_key","title":"<code>djstripe.models.payment_methods.LegacySourceMixin.default_api_key: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.payment_methods.LegacySourceMixin.id","title":"<code>djstripe.models.payment_methods.LegacySourceMixin.id: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.payment_methods.LegacySourceMixin-functions","title":"Functions","text":""},{"location":"reference/models/#djstripe.models.payment_methods.LegacySourceMixin.api_list","title":"<code>djstripe.models.payment_methods.LegacySourceMixin.api_list(api_key=djstripe_settings.STRIPE_SECRET_KEY, **kwargs)</code>  <code>classmethod</code>","text":"Source code in <code>djstripe/models/payment_methods.py</code> <pre><code>@classmethod\ndef api_list(cls, api_key=djstripe_settings.STRIPE_SECRET_KEY, **kwargs):\n    # OVERRIDING the parent version of this function\n    # Cards &amp; Bank Accounts must be manipulated through a customer or account.\n\n    # Update kwargs with `expand` param\n    kwargs = cls.get_expand_params(api_key, **kwargs)\n\n    account, customer, clean_kwargs = cls._get_customer_or_account_from_kwargs(\n        **kwargs\n    )\n\n    object_name = cls.stripe_class.OBJECT_NAME\n\n    # First we try to retrieve by customer attribute,\n    # then by account attribute\n    if customer and account:\n        try:\n            # retrieve by customer\n            return (\n                customer.api_retrieve(api_key=api_key)\n                .sources.list(object=object_name, **clean_kwargs)\n                .auto_paging_iter()\n            )\n        except Exception as customer_exc:\n            try:\n                # retrieve by account\n                return (\n                    account.api_retrieve(api_key=api_key)\n                    .external_accounts.list(object=object_name, **clean_kwargs)\n                    .auto_paging_iter()\n                )\n            except Exception:\n                raise customer_exc\n\n    if customer:\n        return (\n            customer.api_retrieve(api_key=api_key)\n            .sources.list(object=object_name, **clean_kwargs)\n            .auto_paging_iter()\n        )\n\n    if account:\n        return (\n            account.api_retrieve(api_key=api_key)\n            .external_accounts.list(object=object_name, **clean_kwargs)\n            .auto_paging_iter()\n        )\n\n    raise ImpossibleAPIRequest(\n        f\"Can't list {object_name} without a customer or account object. This may\"\n        \" happen if not all accounts or customer objects are in the db. Please run\"\n        ' \"python manage.py djstripe_sync_models Account Customer\" as a potential'\n        \" fix.\"\n    )\n</code></pre>"},{"location":"reference/models/#djstripe.models.payment_methods.LegacySourceMixin.api_retrieve","title":"<code>djstripe.models.payment_methods.LegacySourceMixin.api_retrieve(api_key=None, stripe_account=None)</code>","text":"Source code in <code>djstripe/models/payment_methods.py</code> <pre><code>def api_retrieve(self, api_key=None, stripe_account=None):\n    # OVERRIDING the parent version of this function\n    # Cards &amp; Banks Accounts must be manipulated through a customer or account.\n\n    api_key = api_key or self.default_api_key\n\n    if self.customer:\n        return stripe.Customer.retrieve_source(\n            self.customer.id,\n            self.id,\n            expand=self.expand_fields,\n            stripe_account=stripe_account,\n            api_key=api_key,\n            stripe_version=djstripe_settings.STRIPE_API_VERSION,\n        )\n\n    # try to retrieve by account attribute if retrieval by customer fails.\n    if self.account:\n        return stripe.Account.retrieve_external_account(\n            self.account.id,\n            self.id,\n            expand=self.expand_fields,\n            stripe_account=stripe_account,\n            api_key=api_key,\n            stripe_version=djstripe_settings.STRIPE_API_VERSION,\n        )\n\n    raise ImpossibleAPIRequest(\n        f\"Can't retrieve {self.__class__} without a customer or account object.\"\n        \" This may happen if not all accounts or customer objects are in the db.\"\n        ' Please run \"python manage.py djstripe_sync_models Account Customer\" as a'\n        \" potential fix.\"\n    )\n</code></pre>"},{"location":"reference/models/#djstripe.models.payment_methods.LegacySourceMixin.get_stripe_dashboard_url","title":"<code>djstripe.models.payment_methods.LegacySourceMixin.get_stripe_dashboard_url()</code>","text":"Source code in <code>djstripe/models/payment_methods.py</code> <pre><code>def get_stripe_dashboard_url(self) -&gt; str:\n    if self.customer:\n        return self.customer.get_stripe_dashboard_url()\n    elif self.account:\n        return f\"https://dashboard.stripe.com/{self.account.id}/settings/payouts\"\n    else:\n        return \"\"\n</code></pre>"},{"location":"reference/models/#djstripe.models.payment_methods.LegacySourceMixin.remove","title":"<code>djstripe.models.payment_methods.LegacySourceMixin.remove()</code>","text":"<p>Removes a legacy source from this customer's account.</p> Source code in <code>djstripe/models/payment_methods.py</code> <pre><code>def remove(self):\n    \"\"\"\n    Removes a legacy source from this customer's account.\n    \"\"\"\n\n    # First, wipe default source on all customers that use this card.\n    Customer.objects.filter(default_source=self.id).update(default_source=None)\n\n    try:\n        self._api_delete()\n    except InvalidRequestError as exc:\n        if \"No such source:\" in str(exc) or \"No such customer:\" in str(exc):\n            # The exception was thrown because the stripe customer or card\n            # was already deleted on the stripe side, ignore the exception\n            pass\n        else:\n            # The exception was raised for another reason, re-raise it\n            raise\n\n    self.delete()\n</code></pre>"},{"location":"reference/models/#djstripe.models.payment_methods.PaymentMethod","title":"<code>djstripe.models.payment_methods.PaymentMethod</code>","text":"<p>               Bases: <code>StripeModel</code></p> <p>PaymentMethod objects represent your customer's payment instruments. You can use them with PaymentIntents to collect payments or save them to Customer objects to store instrument details for future payments.</p> <p>Stripe documentation: https://stripe.com/docs/api?lang=python#payment_methods</p> Source code in <code>djstripe/models/payment_methods.py</code> <pre><code>class PaymentMethod(StripeModel):\n    \"\"\"\n    PaymentMethod objects represent your customer's payment instruments.\n    You can use them with PaymentIntents to collect payments or save them\n    to Customer objects to store instrument details for future payments.\n\n    Stripe documentation: https://stripe.com/docs/api?lang=python#payment_methods\n    \"\"\"\n\n    stripe_class = stripe.PaymentMethod\n\n    @property\n    def customer(self) -&gt; Optional[\"Customer\"]:\n        customer_id = get_id_from_stripe_data(self.stripe_data.get(\"customer\"))\n        if customer_id:\n            return Customer.objects.get(id=customer_id)\n\n    @property\n    def type(self) -&gt; enums.PaymentMethodType:\n        type = self.stripe_data[\"type\"]\n        return getattr(enums.PaymentMethodType, type)\n\n    @property\n    def last4(self):\n        payment_method_data = self.stripe_data.get(self.type, {})\n        return payment_method_data.get(\"last4\", \"\")\n\n    def __str__(self):\n        humanized = enums.PaymentMethodType.humanize(self.type)\n        if self.last4:\n            return f\"{humanized} ending in {self.last4}\"\n        return humanized\n\n    def get_stripe_dashboard_url(self) -&gt; str:\n        if self.customer:\n            return self.customer.get_stripe_dashboard_url()\n        return \"\"\n\n    @classmethod\n    def attach(\n        cls,\n        payment_method: Union[str, \"PaymentMethod\"],\n        customer: Union[str, Customer],\n        api_key: str = djstripe_settings.STRIPE_SECRET_KEY,\n    ) -&gt; \"PaymentMethod\":\n        \"\"\"\n        Attach a payment method to a customer\n        \"\"\"\n\n        if isinstance(payment_method, StripeModel):\n            payment_method = payment_method.id\n\n        if isinstance(customer, StripeModel):\n            customer = customer.id\n\n        extra_kwargs = {}\n        if not isinstance(payment_method, stripe.PaymentMethod):\n            # send api_key if we're not passing in a Stripe object\n            # avoids \"Received unknown parameter: api_key\" since api uses the\n            # key cached in the Stripe object\n            extra_kwargs = {\"api_key\": api_key}\n\n        stripe_payment_method = stripe.PaymentMethod.attach(\n            payment_method, customer=customer, **extra_kwargs\n        )\n        return cls.sync_from_stripe_data(stripe_payment_method, api_key=api_key)\n\n    def detach(self):\n        \"\"\"\n        Detach the payment method from its customer.\n\n        :return: Returns true if the payment method was newly detached, \\\n                 false if it was already detached\n        :rtype: bool\n        \"\"\"\n        # Find customers that use this\n        customers = Customer.objects.filter(default_payment_method=self).all()\n        changed = True\n\n        # special handling is needed for legacy \"card\"-type PaymentMethods,\n        # since detaching them deletes them within Stripe.\n        # see https://github.com/dj-stripe/dj-stripe/pull/967\n        is_legacy_card = self.id.startswith(\"card_\")\n\n        try:\n            self.sync_from_stripe_data(self.api_retrieve().detach())\n\n            # resync customer to update .default_payment_method and\n            # .invoice_settings.default_payment_method\n            for customer in customers:\n                Customer.sync_from_stripe_data(customer.api_retrieve())\n\n        except (InvalidRequestError,):\n            # The source was already detached. Resyncing.\n\n            if self.pk and not is_legacy_card:\n                self.sync_from_stripe_data(self.api_retrieve())\n            changed = False\n\n        if self.pk:\n            if is_legacy_card:\n                self.delete()\n            else:\n                self.refresh_from_db()\n\n        return changed\n</code></pre>"},{"location":"reference/models/#djstripe.models.payment_methods.PaymentMethod-attributes","title":"Attributes","text":""},{"location":"reference/models/#djstripe.models.payment_methods.PaymentMethod.customer","title":"<code>djstripe.models.payment_methods.PaymentMethod.customer: Optional[Customer]</code>  <code>property</code>","text":""},{"location":"reference/models/#djstripe.models.payment_methods.PaymentMethod.last4","title":"<code>djstripe.models.payment_methods.PaymentMethod.last4</code>  <code>property</code>","text":""},{"location":"reference/models/#djstripe.models.payment_methods.PaymentMethod.stripe_class","title":"<code>djstripe.models.payment_methods.PaymentMethod.stripe_class = stripe.PaymentMethod</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.payment_methods.PaymentMethod.type","title":"<code>djstripe.models.payment_methods.PaymentMethod.type: enums.PaymentMethodType</code>  <code>property</code>","text":""},{"location":"reference/models/#djstripe.models.payment_methods.PaymentMethod-functions","title":"Functions","text":""},{"location":"reference/models/#djstripe.models.payment_methods.PaymentMethod.__str__","title":"<code>djstripe.models.payment_methods.PaymentMethod.__str__()</code>","text":"Source code in <code>djstripe/models/payment_methods.py</code> <pre><code>def __str__(self):\n    humanized = enums.PaymentMethodType.humanize(self.type)\n    if self.last4:\n        return f\"{humanized} ending in {self.last4}\"\n    return humanized\n</code></pre>"},{"location":"reference/models/#djstripe.models.payment_methods.PaymentMethod.attach","title":"<code>djstripe.models.payment_methods.PaymentMethod.attach(payment_method, customer, api_key=djstripe_settings.STRIPE_SECRET_KEY)</code>  <code>classmethod</code>","text":"<p>Attach a payment method to a customer</p> Source code in <code>djstripe/models/payment_methods.py</code> <pre><code>@classmethod\ndef attach(\n    cls,\n    payment_method: Union[str, \"PaymentMethod\"],\n    customer: Union[str, Customer],\n    api_key: str = djstripe_settings.STRIPE_SECRET_KEY,\n) -&gt; \"PaymentMethod\":\n    \"\"\"\n    Attach a payment method to a customer\n    \"\"\"\n\n    if isinstance(payment_method, StripeModel):\n        payment_method = payment_method.id\n\n    if isinstance(customer, StripeModel):\n        customer = customer.id\n\n    extra_kwargs = {}\n    if not isinstance(payment_method, stripe.PaymentMethod):\n        # send api_key if we're not passing in a Stripe object\n        # avoids \"Received unknown parameter: api_key\" since api uses the\n        # key cached in the Stripe object\n        extra_kwargs = {\"api_key\": api_key}\n\n    stripe_payment_method = stripe.PaymentMethod.attach(\n        payment_method, customer=customer, **extra_kwargs\n    )\n    return cls.sync_from_stripe_data(stripe_payment_method, api_key=api_key)\n</code></pre>"},{"location":"reference/models/#djstripe.models.payment_methods.PaymentMethod.detach","title":"<code>djstripe.models.payment_methods.PaymentMethod.detach()</code>","text":"<p>Detach the payment method from its customer.</p> <p>:return: Returns true if the payment method was newly detached,                  false if it was already detached :rtype: bool</p> Source code in <code>djstripe/models/payment_methods.py</code> <pre><code>def detach(self):\n    \"\"\"\n    Detach the payment method from its customer.\n\n    :return: Returns true if the payment method was newly detached, \\\n             false if it was already detached\n    :rtype: bool\n    \"\"\"\n    # Find customers that use this\n    customers = Customer.objects.filter(default_payment_method=self).all()\n    changed = True\n\n    # special handling is needed for legacy \"card\"-type PaymentMethods,\n    # since detaching them deletes them within Stripe.\n    # see https://github.com/dj-stripe/dj-stripe/pull/967\n    is_legacy_card = self.id.startswith(\"card_\")\n\n    try:\n        self.sync_from_stripe_data(self.api_retrieve().detach())\n\n        # resync customer to update .default_payment_method and\n        # .invoice_settings.default_payment_method\n        for customer in customers:\n            Customer.sync_from_stripe_data(customer.api_retrieve())\n\n    except (InvalidRequestError,):\n        # The source was already detached. Resyncing.\n\n        if self.pk and not is_legacy_card:\n            self.sync_from_stripe_data(self.api_retrieve())\n        changed = False\n\n    if self.pk:\n        if is_legacy_card:\n            self.delete()\n        else:\n            self.refresh_from_db()\n\n    return changed\n</code></pre>"},{"location":"reference/models/#djstripe.models.payment_methods.PaymentMethod.get_stripe_dashboard_url","title":"<code>djstripe.models.payment_methods.PaymentMethod.get_stripe_dashboard_url()</code>","text":"Source code in <code>djstripe/models/payment_methods.py</code> <pre><code>def get_stripe_dashboard_url(self) -&gt; str:\n    if self.customer:\n        return self.customer.get_stripe_dashboard_url()\n    return \"\"\n</code></pre>"},{"location":"reference/models/#djstripe.models.payment_methods.Source","title":"<code>djstripe.models.payment_methods.Source</code>","text":"<p>               Bases: <code>StripeModel</code></p> <p>Source objects allow you to accept a variety of payment methods. They represent a customer's payment instrument, and can be used with the Stripe API just like a Card object: once chargeable, they can be charged, or can be attached to customers.</p> <p>Stripe documentation: https://stripe.com/docs/api?lang=python#sources</p> Source code in <code>djstripe/models/payment_methods.py</code> <pre><code>class Source(StripeModel):\n    \"\"\"\n    Source objects allow you to accept a variety of payment methods.\n    They represent a customer's payment instrument, and can be used with\n    the Stripe API just like a Card object: once chargeable,\n    they can be charged, or can be attached to customers.\n\n    Stripe documentation: https://stripe.com/docs/api?lang=python#sources\n    \"\"\"\n\n    @property\n    def amount(self) -&gt; int:\n        return self.stripe_data.get(\"amount\")\n\n    @property\n    def client_secret(self) -&gt; str:\n        return self.stripe_data.get(\"client_secret\", \"\")\n\n    @property\n    def currency(self) -&gt; str:\n        return self.stripe_data.get(\"currency\", \"\")\n\n    @property\n    def flow(self) -&gt; enums.SourceFlow:\n        flow_type = self.stripe_data.get(\"flow\", \"\")\n        return enums.SourceFlow[flow_type]\n\n    flow = StripeEnumField(\n        enum=enums.SourceFlow, help_text=\"The authentication flow of the source.\"\n    )\n    owner = JSONField(\n        help_text=(\n            \"Information about the owner of the payment instrument that may be \"\n            \"used or required by particular source types.\"\n        )\n    )\n    statement_descriptor = models.CharField(\n        max_length=255,\n        default=\"\",\n        blank=True,\n        help_text=(\n            \"Extra information about a source. This will appear on your \"\n            \"customer's statement every time you charge the source.\"\n        ),\n    )\n    status = StripeEnumField(\n        enum=enums.SourceStatus,\n        help_text=(\n            \"The status of the source. Only `chargeable` sources can be used \"\n            \"to create a charge.\"\n        ),\n    )\n    type = StripeEnumField(enum=enums.SourceType, help_text=\"The type of the source.\")\n    usage = StripeEnumField(\n        enum=enums.SourceUsage,\n        help_text=(\n            \"Whether this source should be reusable or not. \"\n            \"Some source types may or may not be reusable by construction, \"\n            \"while other may leave the option at creation.\"\n        ),\n    )\n\n    # Flows\n    code_verification = JSONField(\n        null=True,\n        blank=True,\n        help_text=(\n            \"Information related to the code verification flow. \"\n            \"Present if the source is authenticated by a verification code \"\n            \"(`flow` is `code_verification`).\"\n        ),\n    )\n    receiver = JSONField(\n        null=True,\n        blank=True,\n        help_text=(\n            \"Information related to the receiver flow. \"\n            \"Present if the source is a receiver (`flow` is `receiver`).\"\n        ),\n    )\n    redirect = JSONField(\n        null=True,\n        blank=True,\n        help_text=(\n            \"Information related to the redirect flow. Present if the source is\"\n            \" authenticated by a redirect (`flow` is `redirect`).\"\n        ),\n    )\n\n    source_data = JSONField(help_text=\"The data corresponding to the source type.\")\n\n    customer = StripeForeignKey(\n        \"Customer\",\n        on_delete=models.SET_NULL,\n        null=True,\n        blank=True,\n        related_name=\"sources\",\n    )\n\n    stripe_class = stripe.Source\n    stripe_dashboard_item_name = \"sources\"\n\n    def __str__(self):\n        return f\"{self.type} {self.id}\"\n\n    @classmethod\n    def _manipulate_stripe_object_hook(cls, data):\n        # The source_data dict is an alias of all the source types\n        data[\"source_data\"] = data[data[\"type\"]]\n        return data\n\n    def _attach_objects_hook(\n        self, cls, data, api_key=djstripe_settings.STRIPE_SECRET_KEY, current_ids=None\n    ):\n        customer = None\n        # \"customer\" key could be like \"cus_6lsBvm5rJ0zyHc\" or {\"id\": \"cus_6lsBvm5rJ0zyHc\"}\n        customer_id = get_id_from_stripe_data(data.get(\"customer\"))\n\n        if current_ids is None or customer_id not in current_ids:\n            customer = cls._stripe_object_to_customer(\n                target_cls=Customer, data=data, current_ids=current_ids, api_key=api_key\n            )\n\n        if customer:\n            self.customer = customer\n        else:\n            self.customer = None\n\n    def detach(self) -&gt; bool:\n        \"\"\"\n        Detach the source from its customer.\n        \"\"\"\n\n        # First, wipe default source on all customers that use this.\n        Customer.objects.filter(default_source=self.id).update(default_source=None)\n        api_key = self.default_api_key\n        try:\n            # TODO - we could use the return value of sync_from_stripe_data\n            #  or call its internals - self._sync/_attach_objects_hook etc here\n            #  to update `self` at this point?\n            self.sync_from_stripe_data(\n                self.api_retrieve(api_key=api_key).detach(), api_key=api_key\n            )\n            return True\n        except InvalidRequestError:\n            # The source was already detached. Resyncing.\n            self.sync_from_stripe_data(\n                self.api_retrieve(api_key=self.default_api_key),\n                api_key=self.default_api_key,\n            )\n            return False\n\n    @classmethod\n    def api_list(cls, api_key=djstripe_settings.STRIPE_SECRET_KEY, **kwargs):\n        \"\"\"\n        Call the stripe API's list operation for this model.\n        :param api_key: The api key to use for this request. \\\n            Defaults to djstripe_settings.STRIPE_SECRET_KEY.\n        :type api_key: string\n        See Stripe documentation for accepted kwargs for each object.\n        :returns: an iterator over all items in the query\n        \"\"\"\n        # Update kwargs with `expand` param\n        kwargs = cls.get_expand_params(api_key, **kwargs)\n\n        return Customer.stripe_class.list_sources(\n            object=\"source\",\n            api_key=api_key,\n            stripe_version=djstripe_settings.STRIPE_API_VERSION,\n            **kwargs,\n        ).auto_paging_iter()\n</code></pre>"},{"location":"reference/models/#djstripe.models.payment_methods.Source-attributes","title":"Attributes","text":""},{"location":"reference/models/#djstripe.models.payment_methods.Source.amount","title":"<code>djstripe.models.payment_methods.Source.amount: int</code>  <code>property</code>","text":""},{"location":"reference/models/#djstripe.models.payment_methods.Source.client_secret","title":"<code>djstripe.models.payment_methods.Source.client_secret: str</code>  <code>property</code>","text":""},{"location":"reference/models/#djstripe.models.payment_methods.Source.code_verification","title":"<code>djstripe.models.payment_methods.Source.code_verification = JSONField(null=True, blank=True, help_text='Information related to the code verification flow. Present if the source is authenticated by a verification code (`flow` is `code_verification`).')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.payment_methods.Source.currency","title":"<code>djstripe.models.payment_methods.Source.currency: str</code>  <code>property</code>","text":""},{"location":"reference/models/#djstripe.models.payment_methods.Source.customer","title":"<code>djstripe.models.payment_methods.Source.customer = StripeForeignKey('Customer', on_delete=models.SET_NULL, null=True, blank=True, related_name='sources')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.payment_methods.Source.flow","title":"<code>djstripe.models.payment_methods.Source.flow: enums.SourceFlow = StripeEnumField(enum=enums.SourceFlow, help_text='The authentication flow of the source.')</code>  <code>class-attribute</code> <code>instance-attribute</code> <code>property</code>","text":""},{"location":"reference/models/#djstripe.models.payment_methods.Source.owner","title":"<code>djstripe.models.payment_methods.Source.owner = JSONField(help_text='Information about the owner of the payment instrument that may be used or required by particular source types.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.payment_methods.Source.receiver","title":"<code>djstripe.models.payment_methods.Source.receiver = JSONField(null=True, blank=True, help_text='Information related to the receiver flow. Present if the source is a receiver (`flow` is `receiver`).')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.payment_methods.Source.redirect","title":"<code>djstripe.models.payment_methods.Source.redirect = JSONField(null=True, blank=True, help_text='Information related to the redirect flow. Present if the source is authenticated by a redirect (`flow` is `redirect`).')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.payment_methods.Source.source_data","title":"<code>djstripe.models.payment_methods.Source.source_data = JSONField(help_text='The data corresponding to the source type.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.payment_methods.Source.statement_descriptor","title":"<code>djstripe.models.payment_methods.Source.statement_descriptor = models.CharField(max_length=255, default='', blank=True, help_text=\"Extra information about a source. This will appear on your customer's statement every time you charge the source.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.payment_methods.Source.status","title":"<code>djstripe.models.payment_methods.Source.status = StripeEnumField(enum=enums.SourceStatus, help_text='The status of the source. Only `chargeable` sources can be used to create a charge.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.payment_methods.Source.stripe_class","title":"<code>djstripe.models.payment_methods.Source.stripe_class = stripe.Source</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.payment_methods.Source.stripe_dashboard_item_name","title":"<code>djstripe.models.payment_methods.Source.stripe_dashboard_item_name = 'sources'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.payment_methods.Source.type","title":"<code>djstripe.models.payment_methods.Source.type = StripeEnumField(enum=enums.SourceType, help_text='The type of the source.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.payment_methods.Source.usage","title":"<code>djstripe.models.payment_methods.Source.usage = StripeEnumField(enum=enums.SourceUsage, help_text='Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while other may leave the option at creation.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.payment_methods.Source-functions","title":"Functions","text":""},{"location":"reference/models/#djstripe.models.payment_methods.Source.__str__","title":"<code>djstripe.models.payment_methods.Source.__str__()</code>","text":"Source code in <code>djstripe/models/payment_methods.py</code> <pre><code>def __str__(self):\n    return f\"{self.type} {self.id}\"\n</code></pre>"},{"location":"reference/models/#djstripe.models.payment_methods.Source.api_list","title":"<code>djstripe.models.payment_methods.Source.api_list(api_key=djstripe_settings.STRIPE_SECRET_KEY, **kwargs)</code>  <code>classmethod</code>","text":"<p>Call the stripe API's list operation for this model. :param api_key: The api key to use for this request.             Defaults to djstripe_settings.STRIPE_SECRET_KEY. :type api_key: string See Stripe documentation for accepted kwargs for each object. :returns: an iterator over all items in the query</p> Source code in <code>djstripe/models/payment_methods.py</code> <pre><code>@classmethod\ndef api_list(cls, api_key=djstripe_settings.STRIPE_SECRET_KEY, **kwargs):\n    \"\"\"\n    Call the stripe API's list operation for this model.\n    :param api_key: The api key to use for this request. \\\n        Defaults to djstripe_settings.STRIPE_SECRET_KEY.\n    :type api_key: string\n    See Stripe documentation for accepted kwargs for each object.\n    :returns: an iterator over all items in the query\n    \"\"\"\n    # Update kwargs with `expand` param\n    kwargs = cls.get_expand_params(api_key, **kwargs)\n\n    return Customer.stripe_class.list_sources(\n        object=\"source\",\n        api_key=api_key,\n        stripe_version=djstripe_settings.STRIPE_API_VERSION,\n        **kwargs,\n    ).auto_paging_iter()\n</code></pre>"},{"location":"reference/models/#djstripe.models.payment_methods.Source.detach","title":"<code>djstripe.models.payment_methods.Source.detach()</code>","text":"<p>Detach the source from its customer.</p> Source code in <code>djstripe/models/payment_methods.py</code> <pre><code>def detach(self) -&gt; bool:\n    \"\"\"\n    Detach the source from its customer.\n    \"\"\"\n\n    # First, wipe default source on all customers that use this.\n    Customer.objects.filter(default_source=self.id).update(default_source=None)\n    api_key = self.default_api_key\n    try:\n        # TODO - we could use the return value of sync_from_stripe_data\n        #  or call its internals - self._sync/_attach_objects_hook etc here\n        #  to update `self` at this point?\n        self.sync_from_stripe_data(\n            self.api_retrieve(api_key=api_key).detach(), api_key=api_key\n        )\n        return True\n    except InvalidRequestError:\n        # The source was already detached. Resyncing.\n        self.sync_from_stripe_data(\n            self.api_retrieve(api_key=self.default_api_key),\n            api_key=self.default_api_key,\n        )\n        return False\n</code></pre>"},{"location":"reference/models/#djstripe.models.payment_methods.SourceTransaction","title":"<code>djstripe.models.payment_methods.SourceTransaction</code>","text":"<p>               Bases: <code>StripeModel</code></p> <p>Stripe documentation: https://stripe.com/docs/sources/ach-credit-transfer#source-transactions</p> Source code in <code>djstripe/models/payment_methods.py</code> <pre><code>class SourceTransaction(StripeModel):\n    \"\"\"\n    Stripe documentation: https://stripe.com/docs/sources/ach-credit-transfer#source-transactions\n    \"\"\"\n\n    stripe_class = stripe.SourceTransaction\n    stripe_dashboard_item_name = \"source_transactions\"\n\n    @classmethod\n    def api_list(cls, api_key=djstripe_settings.STRIPE_SECRET_KEY, **kwargs):\n        \"\"\"\n        Call the stripe API's list operation for this model.\n        :param api_key: The api key to use for this request. \\\n            Defaults to djstripe_settings.STRIPE_SECRET_KEY.\n        :type api_key: string\n        See Stripe documentation for accepted kwargs for each object.\n        :returns: an iterator over all items in the query\n        \"\"\"\n        # Update kwargs with `expand` param\n        kwargs = cls.get_expand_params(api_key, **kwargs)\n\n        source = kwargs.pop(\"id\", None)\n        if not source:\n            raise KeyError(\"Source Object ID is missing\")\n\n        return stripe.Source.list_source_transactions(\n            source, api_key=api_key, **kwargs\n        ).auto_paging_iter()\n\n    @property\n    def amount(self) -&gt; int:\n        return self.stripe_data.get(\"amount\")\n\n    @property\n    def currency(self) -&gt; str:\n        return self.stripe_data.get(\"currency\", \"\")\n\n    @property\n    def source(self) -&gt; Optional[Source]:\n        source_id = get_id_from_stripe_data(self.stripe_data.get(\"source\"))\n        return Source.objects.get(id=source_id)\n\n    @property\n    def status(self) -&gt; str:\n        return self.stripe_data.get(\"status\", \"\")\n\n    def api_retrieve(self, api_key=None, stripe_account=None):\n        \"\"\"\n        Call the stripe API's retrieve operation for this model.\n\n        :param api_key: The api key to use for this request. \\\n            Defaults to djstripe_settings.STRIPE_SECRET_KEY.\n        :type api_key: string\n        :param stripe_account: The optional connected account \\\n            for which this request is being made.\n        :type stripe_account: string\n        \"\"\"\n        # Prefer passed in stripe_account if set.\n        if not stripe_account:\n            stripe_account = self._get_stripe_account_id(api_key)\n\n        for source_trx in SourceTransaction.api_list(\n            id=self.source.id, api_key=api_key, stripe_account=stripe_account\n        ):\n            if source_trx.id == self.id:\n                return source_trx\n\n    def get_stripe_dashboard_url(self) -&gt; str:\n        \"\"\"Get the stripe dashboard url for this object.\"\"\"\n        if (\n            not self.stripe_dashboard_item_name\n            or not self.id\n            or not self.source\n            or not self.source.id\n        ):\n            return \"\"\n        else:\n            return f\"{self._get_base_stripe_dashboard_url()}sources/{self.source.id}\"\n</code></pre>"},{"location":"reference/models/#djstripe.models.payment_methods.SourceTransaction-attributes","title":"Attributes","text":""},{"location":"reference/models/#djstripe.models.payment_methods.SourceTransaction.amount","title":"<code>djstripe.models.payment_methods.SourceTransaction.amount: int</code>  <code>property</code>","text":""},{"location":"reference/models/#djstripe.models.payment_methods.SourceTransaction.currency","title":"<code>djstripe.models.payment_methods.SourceTransaction.currency: str</code>  <code>property</code>","text":""},{"location":"reference/models/#djstripe.models.payment_methods.SourceTransaction.source","title":"<code>djstripe.models.payment_methods.SourceTransaction.source: Optional[Source]</code>  <code>property</code>","text":""},{"location":"reference/models/#djstripe.models.payment_methods.SourceTransaction.status","title":"<code>djstripe.models.payment_methods.SourceTransaction.status: str</code>  <code>property</code>","text":""},{"location":"reference/models/#djstripe.models.payment_methods.SourceTransaction.stripe_class","title":"<code>djstripe.models.payment_methods.SourceTransaction.stripe_class = stripe.SourceTransaction</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.payment_methods.SourceTransaction.stripe_dashboard_item_name","title":"<code>djstripe.models.payment_methods.SourceTransaction.stripe_dashboard_item_name = 'source_transactions'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.payment_methods.SourceTransaction-functions","title":"Functions","text":""},{"location":"reference/models/#djstripe.models.payment_methods.SourceTransaction.api_list","title":"<code>djstripe.models.payment_methods.SourceTransaction.api_list(api_key=djstripe_settings.STRIPE_SECRET_KEY, **kwargs)</code>  <code>classmethod</code>","text":"<p>Call the stripe API's list operation for this model. :param api_key: The api key to use for this request.             Defaults to djstripe_settings.STRIPE_SECRET_KEY. :type api_key: string See Stripe documentation for accepted kwargs for each object. :returns: an iterator over all items in the query</p> Source code in <code>djstripe/models/payment_methods.py</code> <pre><code>@classmethod\ndef api_list(cls, api_key=djstripe_settings.STRIPE_SECRET_KEY, **kwargs):\n    \"\"\"\n    Call the stripe API's list operation for this model.\n    :param api_key: The api key to use for this request. \\\n        Defaults to djstripe_settings.STRIPE_SECRET_KEY.\n    :type api_key: string\n    See Stripe documentation for accepted kwargs for each object.\n    :returns: an iterator over all items in the query\n    \"\"\"\n    # Update kwargs with `expand` param\n    kwargs = cls.get_expand_params(api_key, **kwargs)\n\n    source = kwargs.pop(\"id\", None)\n    if not source:\n        raise KeyError(\"Source Object ID is missing\")\n\n    return stripe.Source.list_source_transactions(\n        source, api_key=api_key, **kwargs\n    ).auto_paging_iter()\n</code></pre>"},{"location":"reference/models/#djstripe.models.payment_methods.SourceTransaction.api_retrieve","title":"<code>djstripe.models.payment_methods.SourceTransaction.api_retrieve(api_key=None, stripe_account=None)</code>","text":"<p>Call the stripe API's retrieve operation for this model.</p> <p>:param api_key: The api key to use for this request.             Defaults to djstripe_settings.STRIPE_SECRET_KEY. :type api_key: string :param stripe_account: The optional connected account             for which this request is being made. :type stripe_account: string</p> Source code in <code>djstripe/models/payment_methods.py</code> <pre><code>def api_retrieve(self, api_key=None, stripe_account=None):\n    \"\"\"\n    Call the stripe API's retrieve operation for this model.\n\n    :param api_key: The api key to use for this request. \\\n        Defaults to djstripe_settings.STRIPE_SECRET_KEY.\n    :type api_key: string\n    :param stripe_account: The optional connected account \\\n        for which this request is being made.\n    :type stripe_account: string\n    \"\"\"\n    # Prefer passed in stripe_account if set.\n    if not stripe_account:\n        stripe_account = self._get_stripe_account_id(api_key)\n\n    for source_trx in SourceTransaction.api_list(\n        id=self.source.id, api_key=api_key, stripe_account=stripe_account\n    ):\n        if source_trx.id == self.id:\n            return source_trx\n</code></pre>"},{"location":"reference/models/#djstripe.models.payment_methods.SourceTransaction.get_stripe_dashboard_url","title":"<code>djstripe.models.payment_methods.SourceTransaction.get_stripe_dashboard_url()</code>","text":"<p>Get the stripe dashboard url for this object.</p> Source code in <code>djstripe/models/payment_methods.py</code> <pre><code>def get_stripe_dashboard_url(self) -&gt; str:\n    \"\"\"Get the stripe dashboard url for this object.\"\"\"\n    if (\n        not self.stripe_dashboard_item_name\n        or not self.id\n        or not self.source\n        or not self.source.id\n    ):\n        return \"\"\n    else:\n        return f\"{self._get_base_stripe_dashboard_url()}sources/{self.source.id}\"\n</code></pre>"},{"location":"reference/models/#djstripe.models.payment_methods-functions","title":"Functions","text":""},{"location":"reference/models/#billing","title":"Billing","text":""},{"location":"reference/models/#djstripe.models.billing-attributes","title":"Attributes","text":""},{"location":"reference/models/#djstripe.models.billing.logger","title":"<code>djstripe.models.billing.logger = logging.getLogger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing-classes","title":"Classes","text":""},{"location":"reference/models/#djstripe.models.billing.BaseInvoice","title":"<code>djstripe.models.billing.BaseInvoice</code>","text":"<p>               Bases: <code>StripeModel</code></p> <p>The abstract base model shared by Invoice and UpcomingInvoice</p> <p>Note: Most fields are defined on BaseInvoice so they're available to both models. ManyToManyFields are an exception, since UpcomingInvoice doesn't exist in the db.</p> Source code in <code>djstripe/models/billing.py</code> <pre><code>class BaseInvoice(StripeModel):\n    \"\"\"\n    The abstract base model shared by Invoice and UpcomingInvoice\n\n    Note:\n    Most fields are defined on BaseInvoice so they're available to both models.\n    ManyToManyFields are an exception, since UpcomingInvoice doesn't exist in the db.\n    \"\"\"\n\n    stripe_class = stripe.Invoice\n    stripe_dashboard_item_name = \"invoices\"\n    expand_fields = [\"discounts\", \"lines.data.discounts\", \"lines.data.invoice_item\"]\n\n    account_country = models.CharField(\n        max_length=2,\n        default=\"\",\n        blank=True,\n        help_text=(\n            \"The country of the business associated with this invoice, \"\n            \"most often the business creating the invoice.\"\n        ),\n    )\n    account_name = models.TextField(\n        max_length=5000,\n        blank=True,\n        help_text=(\n            \"The public name of the business associated with this invoice, \"\n            \"most often the business creating the invoice.\"\n        ),\n    )\n    amount_due = StripeDecimalCurrencyAmountField(\n        help_text=(\n            \"Final amount due (as decimal) at this time for this invoice. If the\"\n            \" invoice's total is smaller than the minimum charge amount, for example,\"\n            \" or if there is account credit that can be applied to the invoice, the\"\n            \" amount_due may be 0. If there is a positive starting_balance for the\"\n            \" invoice (the customer owes money), the amount_due will also take that\"\n            \" into account. The charge that gets generated for the invoice will be for\"\n            \" the amount specified in amount_due.\"\n        )\n    )\n    amount_paid = StripeDecimalCurrencyAmountField(\n        null=True,  # XXX: This is not nullable, but it's a new field\n        help_text=\"The amount, (as decimal), that was paid.\",\n    )\n    amount_remaining = StripeDecimalCurrencyAmountField(\n        null=True,  # XXX: This is not nullable, but it's a new field\n        help_text=\"The amount remaining, (as decimal), that is due.\",\n    )\n    application_fee_amount = StripeDecimalCurrencyAmountField(\n        null=True,\n        blank=True,\n        help_text=(\n            \"The fee (as decimal) that will be applied to the invoice and \"\n            \"transferred to the application owner's \"\n            \"Stripe account when the invoice is paid.\"\n        ),\n    )\n    attempt_count = models.IntegerField(\n        help_text=(\n            \"Number of payment attempts made for this invoice, from the perspective of\"\n            \" the payment retry schedule. Any payment attempt counts as the first\"\n            \" attempt, and subsequently only automatic retries increment the attempt\"\n            \" count. In other words, manual payment attempts after the first attempt do\"\n            \" not affect the retry schedule.\"\n        )\n    )\n    attempted = models.BooleanField(\n        default=False,\n        help_text=(\n            \"Whether or not an attempt has been made to pay the invoice. \"\n            \"An invoice is not attempted until 1 hour after the ``invoice.created`` \"\n            \"webhook, for example, so you might not want to display that invoice as \"\n            \"unpaid to your users.\"\n        ),\n    )\n    auto_advance = models.BooleanField(\n        null=True,\n        help_text=(\n            \"Controls whether Stripe will perform automatic collection of the \"\n            \"invoice. When false, the invoice's state will not automatically \"\n            \"advance without an explicit action.\"\n        ),\n    )\n    billing_reason = StripeEnumField(\n        default=\"\",\n        blank=True,\n        enum=enums.InvoiceBillingReason,\n        help_text=(\n            \"Indicates the reason why the invoice was created. subscription_cycle\"\n            \" indicates an invoice created by a subscription advancing into a new\"\n            \" period. subscription_create indicates an invoice created due to creating\"\n            \" a subscription. subscription_update indicates an invoice created due to\"\n            \" updating a subscription. subscription is set for all old invoices to\"\n            \" indicate either a change to a subscription or a period advancement.\"\n            \" manual is set for all invoices unrelated to a subscription (for example:\"\n            \" created via the invoice editor). The upcoming value is reserved for\"\n            \" simulated invoices per the upcoming invoice endpoint.\"\n            \" subscription_threshold indicates an invoice created due to a billing\"\n            \" threshold being reached.\"\n        ),\n    )\n    charge = models.OneToOneField(\n        \"Charge\",\n        on_delete=models.CASCADE,\n        null=True,\n        # we need to use the %(class)s placeholder to avoid related name\n        # clashes between Invoice and UpcomingInvoice\n        related_name=\"latest_%(class)s\",\n        help_text=\"The latest charge generated for this invoice, if any.\",\n    )\n    collection_method = StripeEnumField(\n        enum=enums.InvoiceCollectionMethod,\n        null=True,\n        help_text=(\n            \"When charging automatically, Stripe will attempt to pay this invoice \"\n            \"using the default source attached to the customer. \"\n            \"When sending an invoice, Stripe will email this invoice to the customer \"\n            \"with payment instructions.\"\n        ),\n    )\n    currency = StripeCurrencyCodeField()\n    customer = StripeForeignKey(\n        \"Customer\",\n        on_delete=models.CASCADE,\n        # we need to use the %(class)s placeholder to avoid related name\n        # clashes between Invoice and UpcomingInvoice\n        related_name=\"%(class)ss\",\n        help_text=\"The customer associated with this invoice.\",\n    )\n    customer_address = JSONField(\n        null=True,\n        blank=True,\n        help_text=(\n            \"The customer's address. Until the invoice is finalized, this field will\"\n            \" equal customer.address. Once the invoice is finalized, this field will no\"\n            \" longer be updated.\"\n        ),\n    )\n    customer_email = models.TextField(\n        max_length=5000,\n        blank=True,\n        help_text=(\n            \"The customer's email. Until the invoice is finalized, this field will\"\n            \" equal customer.email. Once the invoice is finalized, this field will no\"\n            \" longer be updated.\"\n        ),\n    )\n    customer_name = models.TextField(\n        max_length=5000,\n        blank=True,\n        help_text=(\n            \"The customer's name. Until the invoice is finalized, this field will equal\"\n            \" customer.name. Once the invoice is finalized, this field will no longer\"\n            \" be updated.\"\n        ),\n    )\n    customer_phone = models.TextField(\n        max_length=5000,\n        blank=True,\n        help_text=(\n            \"The customer's phone number. Until the invoice is finalized, \"\n            \"this field will equal customer.phone. Once the invoice is finalized, \"\n            \"this field will no longer be updated.\"\n        ),\n    )\n    customer_shipping = JSONField(\n        null=True,\n        blank=True,\n        help_text=(\n            \"The customer's shipping information. Until the invoice is \"\n            \"finalized, this field will equal customer.shipping. Once the invoice is \"\n            \"finalized, this field will no longer be updated.\"\n        ),\n    )\n    customer_tax_exempt = StripeEnumField(\n        enum=enums.CustomerTaxExempt,\n        default=\"\",\n        help_text=(\n            \"The customer's tax exempt status. Until the invoice is finalized, \"\n            \"this field will equal customer.tax_exempt. Once the invoice is \"\n            \"finalized, this field will no longer be updated.\"\n        ),\n    )\n    default_payment_method = StripeForeignKey(\n        \"PaymentMethod\",\n        null=True,\n        blank=True,\n        on_delete=models.SET_NULL,\n        related_name=\"+\",\n        help_text=(\n            \"Default payment method for the invoice. It must belong to the \"\n            \"customer associated with the invoice. If not set, defaults to the \"\n            \"subscription's default payment method, if any, or to the default payment \"\n            \"method in the customer's invoice settings.\"\n        ),\n    )\n    # Note: default_tax_rates is handled in the subclasses since it's a\n    # ManyToManyField, otherwise reverse accessors clash\n    discount = JSONField(\n        null=True,\n        blank=True,\n        help_text=(\n            \"Deprecated! Please use discounts instead. Describes the current discount\"\n            \" applied to this subscription, if there is one. When billing, a discount\"\n            \" applied to a subscription overrides a discount applied on a customer-wide\"\n            \" basis.\"\n        ),\n    )\n    discounts = JSONField(\n        null=True,\n        blank=True,\n        help_text=(\n            \"The discounts applied to the invoice. Line item discounts are applied\"\n            \" before invoice discounts.\"\n        ),\n    )\n    due_date = StripeDateTimeField(\n        null=True,\n        blank=True,\n        help_text=(\n            \"The date on which payment for this invoice is due. \"\n            \"This value will be null for invoices where billing=charge_automatically.\"\n        ),\n    )\n    ending_balance = StripeQuantumCurrencyAmountField(\n        null=True,\n        help_text=(\n            \"Ending customer balance (in cents) after attempting to pay invoice. \"\n            \"If the invoice has not been attempted yet, this will be null.\"\n        ),\n    )\n    footer = models.TextField(\n        max_length=5000, blank=True, help_text=\"Footer displayed on the invoice.\"\n    )\n    hosted_invoice_url = models.TextField(\n        max_length=799,\n        default=\"\",\n        blank=True,\n        help_text=(\n            \"The URL for the hosted invoice page, which allows customers to view \"\n            \"and pay an invoice. If the invoice has not been frozen yet, \"\n            \"this will be null.\"\n        ),\n    )\n    invoice_pdf = models.TextField(\n        max_length=799,\n        default=\"\",\n        blank=True,\n        help_text=(\n            \"The link to download the PDF for the invoice. \"\n            \"If the invoice has not been frozen yet, this will be null.\"\n        ),\n    )\n    # TODO: Implement \"lines\" (InvoiceLineItem related_field)\n    next_payment_attempt = StripeDateTimeField(\n        null=True,\n        blank=True,\n        help_text=\"The time at which payment will next be attempted.\",\n    )\n    number = models.CharField(\n        max_length=64,\n        default=\"\",\n        blank=True,\n        help_text=(\n            \"A unique, identifying string that appears on emails sent to the customer \"\n            \"for this invoice. \"\n            \"This starts with the customer's unique invoice_prefix if it is specified.\"\n        ),\n    )\n    paid = models.BooleanField(\n        default=False,\n        help_text=(\n            \"Whether payment was successfully collected for this invoice. An invoice \"\n            \"can be paid (most commonly) with a charge or with credit from the \"\n            \"customer's account balance.\"\n        ),\n    )\n    payment_intent = models.OneToOneField(\n        \"PaymentIntent\",\n        on_delete=models.CASCADE,\n        null=True,\n        help_text=(\n            \"The PaymentIntent associated with this invoice. \"\n            \"The PaymentIntent is generated when the invoice is finalized, \"\n            \"and can then be used to pay the invoice.\"\n            \"Note that voiding an invoice will cancel the PaymentIntent\"\n        ),\n    )\n    period_end = StripeDateTimeField(\n        help_text=(\n            \"End of the usage period during which invoice items were \"\n            \"added to this invoice.\"\n        )\n    )\n    period_start = StripeDateTimeField(\n        help_text=(\n            \"Start of the usage period during which invoice items were \"\n            \"added to this invoice.\"\n        )\n    )\n    post_payment_credit_notes_amount = StripeQuantumCurrencyAmountField(\n        # This is not nullable, but it's a new field\n        null=True,\n        blank=True,\n        help_text=(\n            \"Total amount (in cents) of all post-payment credit notes issued \"\n            \"for this invoice.\"\n        ),\n    )\n    pre_payment_credit_notes_amount = StripeQuantumCurrencyAmountField(\n        # This is not nullable, but it's a new field\n        null=True,\n        blank=True,\n        help_text=(\n            \"Total amount (in cents) of all pre-payment credit notes issued \"\n            \"for this invoice.\"\n        ),\n    )\n    receipt_number = models.CharField(\n        max_length=64,\n        null=True,\n        blank=True,\n        help_text=(\n            \"This is the transaction number that appears on email receipts \"\n            \"sent for this invoice.\"\n        ),\n    )\n    starting_balance = StripeQuantumCurrencyAmountField(\n        help_text=(\n            \"Starting customer balance (in cents) before attempting to pay \"\n            \"invoice. If the invoice has not been attempted yet, this will be the \"\n            \"current customer balance.\"\n        )\n    )\n    statement_descriptor = models.CharField(\n        max_length=22,\n        default=\"\",\n        blank=True,\n        help_text=(\n            \"An arbitrary string to be displayed on your customer's credit card\"\n            \" statement. The statement description may not include &lt;&gt;\\\"' characters,\"\n            \" and will appear on your customer's statement in capital letters.\"\n            \" Non-ASCII characters are automatically stripped. While most banks display\"\n            \" this information consistently, some may display it incorrectly or not at\"\n            \" all.\"\n        ),\n    )\n    status = StripeEnumField(\n        default=\"\",\n        blank=True,\n        enum=enums.InvoiceStatus,\n        help_text=(\n            \"The status of the invoice, one of draft, open, paid, \"\n            \"uncollectible, or void.\"\n        ),\n    )\n    status_transitions = JSONField(null=True, blank=True)\n    subscription = StripeForeignKey(\n        \"Subscription\",\n        null=True,\n        # we need to use the %(class)s placeholder to avoid related name\n        # clashes between Invoice and UpcomingInvoice\n        related_name=\"%(class)ss\",\n        on_delete=models.SET_NULL,\n        help_text=\"The subscription that this invoice was prepared for, if any.\",\n    )\n    subscription_proration_date = StripeDateTimeField(\n        null=True,\n        blank=True,\n        help_text=(\n            \"Only set for upcoming invoices that preview prorations. \"\n            \"The time used to calculate prorations.\"\n        ),\n    )\n    subtotal = StripeDecimalCurrencyAmountField(\n        help_text=(\n            \"Total (as decimal) of all subscriptions, invoice items, \"\n            \"and prorations on the invoice before any discount or tax is applied.\"\n        )\n    )\n    tax = StripeDecimalCurrencyAmountField(\n        null=True,\n        blank=True,\n        help_text=(\n            \"The amount (as decimal) of tax included in the total, calculated \"\n            \"from ``tax_percent`` and the subtotal. If no \"\n            \"``tax_percent`` is defined, this value will be null.\"\n        ),\n    )\n    tax_percent = StripePercentField(\n        null=True,\n        blank=True,\n        help_text=(\n            \"This percentage of the subtotal has been added to the total amount of the\"\n            \" invoice, including invoice line items and discounts. This field is\"\n            \" inherited from the subscription's ``tax_percent`` field, but can be\"\n            \" changed before the invoice is paid. This field defaults to null.\"\n        ),\n    )\n    threshold_reason = JSONField(\n        null=True,\n        blank=True,\n        help_text=(\n            \"If billing_reason is set to subscription_threshold this returns \"\n            \"more information on which threshold rules triggered the invoice.\"\n        ),\n    )\n    total = StripeDecimalCurrencyAmountField(\"Total (as decimal) after discount.\")\n    webhooks_delivered_at = StripeDateTimeField(\n        null=True,\n        help_text=(\n            \"The time at which webhooks for this invoice were successfully delivered \"\n            \"(if the invoice had no webhooks to deliver, this will match `date`). \"\n            \"Invoice payment is delayed until webhooks are delivered, or until all \"\n            \"webhook delivery attempts have been exhausted.\"\n        ),\n    )\n\n    class Meta(StripeModel.Meta):\n        abstract = True\n        ordering = [\"-created\"]\n\n    def __str__(self):\n        invoice_number = self.number or self.receipt_number or self.id\n        amount = get_friendly_currency_amount(self.amount_paid or 0, self.currency)\n        return f\"Invoice #{invoice_number} for {amount} ({self.status})\"\n\n    @classmethod\n    def upcoming(\n        cls,\n        api_key=djstripe_settings.STRIPE_SECRET_KEY,\n        customer=None,\n        subscription=None,\n        subscription_plan=None,\n        **kwargs,\n    ) -&gt; Optional[\"UpcomingInvoice\"]:\n        \"\"\"\n        Gets the upcoming preview invoice (singular) for a customer.\n\n        At any time, you can preview the upcoming\n        invoice for a customer. This will show you all the charges that are\n        pending, including subscription renewal charges, invoice item charges,\n        etc. It will also show you any discount that is applicable to the\n        customer. (Source: https://stripe.com/docs/api#upcoming_invoice)\n\n        .. important:: Note that when you are viewing an upcoming invoice,\n            you are simply viewing a preview.\n\n        :param customer: The identifier of the customer whose upcoming invoice \\\n        you'd like to retrieve.\n        :type customer: Customer or string (customer ID)\n        :param coupon: The code of the coupon to apply.\n        :type coupon: str\n        :param subscription: The identifier of the subscription to retrieve an \\\n        invoice for.\n        :type subscription: Subscription or string (subscription ID)\n        :param subscription_plan: If set, the invoice returned will preview \\\n        updating the subscription given to this plan, or creating a new \\\n        subscription to this plan if no subscription is given.\n        :type subscription_plan: Plan or string (plan ID)\n        \"\"\"\n\n        # Convert Customer to id\n        if customer is not None and isinstance(customer, StripeModel):\n            customer = customer.id\n\n        # Convert Subscription to id\n        if subscription is not None and isinstance(subscription, StripeModel):\n            subscription = subscription.id\n\n        # Convert Plan to id\n        if subscription_plan is not None and isinstance(subscription_plan, StripeModel):\n            subscription_plan = subscription_plan.id\n\n        try:\n            upcoming_stripe_invoice = cls.stripe_class.upcoming(\n                api_key=api_key,\n                customer=customer,\n                subscription=subscription,\n                subscription_plan=subscription_plan,\n                stripe_version=djstripe_settings.STRIPE_API_VERSION,\n                **kwargs,\n            )\n        except InvalidRequestError as exc:\n            if str(exc) != \"Nothing to invoice for customer\":\n                raise\n            return None\n\n        # Workaround for \"id\" being missing (upcoming invoices don't persist).\n        upcoming_stripe_invoice[\"id\"] = \"upcoming\"\n\n        return UpcomingInvoice._create_from_stripe_object(\n            upcoming_stripe_invoice,\n            save=False,\n            api_key=api_key,\n        )\n\n    def retry(self, **kwargs):\n        \"\"\"Retry payment on this invoice if it isn't paid.\"\"\"\n\n        if self.status != enums.InvoiceStatus.paid and self.auto_advance:\n            stripe_invoice = self.api_retrieve()\n            updated_stripe_invoice = stripe_invoice.pay(\n                **kwargs\n            )  # pay() throws an exception if the charge is not successful.\n            type(self).sync_from_stripe_data(\n                updated_stripe_invoice, api_key=self.default_api_key\n            )\n            return True\n        return False\n\n    def _attach_objects_post_save_hook(\n        self,\n        cls,\n        data,\n        api_key=djstripe_settings.STRIPE_SECRET_KEY,\n        pending_relations=None,\n    ):\n        super()._attach_objects_post_save_hook(\n            cls, data, api_key=api_key, pending_relations=pending_relations\n        )\n\n        # LineItems need a saved invoice because they're associated via a\n        # RelatedManager, so this must be done as part of the post save hook.\n        cls._stripe_object_to_line_items(\n            target_cls=LineItem, data=data, invoice=self, api_key=api_key\n        )\n        # sync every discount\n        for discount in self.discounts:\n            if discount:\n                Discount.sync_from_stripe_data(discount, api_key=api_key)\n\n        for line in data.get(\"lines\", []):\n            invoice_item_data = line.get(\"invoice_item\")\n            if invoice_item_data:\n                InvoiceItem.sync_from_stripe_data(invoice_item_data, api_key=api_key)\n\n    @property\n    def plan(self) -&gt; Optional[\"Plan\"]:\n        \"\"\"Gets the associated plan for this invoice.\n\n        In order to provide a consistent view of invoices, the plan object\n        should be taken from the first invoice item that has one, rather than\n        using the plan associated with the subscription.\n\n        Subscriptions (and their associated plan) are updated by the customer\n        and represent what is current, but invoice items are immutable within\n        the invoice and stay static/unchanged.\n\n        In other words, a plan retrieved from an invoice item will represent\n        the plan as it was at the time an invoice was issued.  The plan\n        retrieved from the subscription will be the currently active plan.\n\n        :returns: The associated plan for the invoice.\n        \"\"\"\n\n        for invoiceitem in self.invoiceitems.all():\n            if invoiceitem.plan:\n                return invoiceitem.plan\n\n        if self.subscription:\n            return self.subscription.plan\n\n        return None\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.BaseInvoice-attributes","title":"Attributes","text":""},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.account_country","title":"<code>djstripe.models.billing.BaseInvoice.account_country = models.CharField(max_length=2, default='', blank=True, help_text='The country of the business associated with this invoice, most often the business creating the invoice.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.account_name","title":"<code>djstripe.models.billing.BaseInvoice.account_name = models.TextField(max_length=5000, blank=True, help_text='The public name of the business associated with this invoice, most often the business creating the invoice.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.amount_due","title":"<code>djstripe.models.billing.BaseInvoice.amount_due = StripeDecimalCurrencyAmountField(help_text=\"Final amount due (as decimal) at this time for this invoice. If the invoice's total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the amount_due may be 0. If there is a positive starting_balance for the invoice (the customer owes money), the amount_due will also take that into account. The charge that gets generated for the invoice will be for the amount specified in amount_due.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.amount_paid","title":"<code>djstripe.models.billing.BaseInvoice.amount_paid = StripeDecimalCurrencyAmountField(null=True, help_text='The amount, (as decimal), that was paid.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.amount_remaining","title":"<code>djstripe.models.billing.BaseInvoice.amount_remaining = StripeDecimalCurrencyAmountField(null=True, help_text='The amount remaining, (as decimal), that is due.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.application_fee_amount","title":"<code>djstripe.models.billing.BaseInvoice.application_fee_amount = StripeDecimalCurrencyAmountField(null=True, blank=True, help_text=\"The fee (as decimal) that will be applied to the invoice and transferred to the application owner's Stripe account when the invoice is paid.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.attempt_count","title":"<code>djstripe.models.billing.BaseInvoice.attempt_count = models.IntegerField(help_text='Number of payment attempts made for this invoice, from the perspective of the payment retry schedule. Any payment attempt counts as the first attempt, and subsequently only automatic retries increment the attempt count. In other words, manual payment attempts after the first attempt do not affect the retry schedule.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.attempted","title":"<code>djstripe.models.billing.BaseInvoice.attempted = models.BooleanField(default=False, help_text='Whether or not an attempt has been made to pay the invoice. An invoice is not attempted until 1 hour after the ``invoice.created`` webhook, for example, so you might not want to display that invoice as unpaid to your users.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.auto_advance","title":"<code>djstripe.models.billing.BaseInvoice.auto_advance = models.BooleanField(null=True, help_text=\"Controls whether Stripe will perform automatic collection of the invoice. When false, the invoice's state will not automatically advance without an explicit action.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.billing_reason","title":"<code>djstripe.models.billing.BaseInvoice.billing_reason = StripeEnumField(default='', blank=True, enum=enums.InvoiceBillingReason, help_text='Indicates the reason why the invoice was created. subscription_cycle indicates an invoice created by a subscription advancing into a new period. subscription_create indicates an invoice created due to creating a subscription. subscription_update indicates an invoice created due to updating a subscription. subscription is set for all old invoices to indicate either a change to a subscription or a period advancement. manual is set for all invoices unrelated to a subscription (for example: created via the invoice editor). The upcoming value is reserved for simulated invoices per the upcoming invoice endpoint. subscription_threshold indicates an invoice created due to a billing threshold being reached.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.charge","title":"<code>djstripe.models.billing.BaseInvoice.charge = models.OneToOneField('Charge', on_delete=models.CASCADE, null=True, related_name='latest_%(class)s', help_text='The latest charge generated for this invoice, if any.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.collection_method","title":"<code>djstripe.models.billing.BaseInvoice.collection_method = StripeEnumField(enum=enums.InvoiceCollectionMethod, null=True, help_text='When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.currency","title":"<code>djstripe.models.billing.BaseInvoice.currency = StripeCurrencyCodeField()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.customer","title":"<code>djstripe.models.billing.BaseInvoice.customer = StripeForeignKey('Customer', on_delete=models.CASCADE, related_name='%(class)ss', help_text='The customer associated with this invoice.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.customer_address","title":"<code>djstripe.models.billing.BaseInvoice.customer_address = JSONField(null=True, blank=True, help_text=\"The customer's address. Until the invoice is finalized, this field will equal customer.address. Once the invoice is finalized, this field will no longer be updated.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.customer_email","title":"<code>djstripe.models.billing.BaseInvoice.customer_email = models.TextField(max_length=5000, blank=True, help_text=\"The customer's email. Until the invoice is finalized, this field will equal customer.email. Once the invoice is finalized, this field will no longer be updated.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.customer_name","title":"<code>djstripe.models.billing.BaseInvoice.customer_name = models.TextField(max_length=5000, blank=True, help_text=\"The customer's name. Until the invoice is finalized, this field will equal customer.name. Once the invoice is finalized, this field will no longer be updated.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.customer_phone","title":"<code>djstripe.models.billing.BaseInvoice.customer_phone = models.TextField(max_length=5000, blank=True, help_text=\"The customer's phone number. Until the invoice is finalized, this field will equal customer.phone. Once the invoice is finalized, this field will no longer be updated.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.customer_shipping","title":"<code>djstripe.models.billing.BaseInvoice.customer_shipping = JSONField(null=True, blank=True, help_text=\"The customer's shipping information. Until the invoice is finalized, this field will equal customer.shipping. Once the invoice is finalized, this field will no longer be updated.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.customer_tax_exempt","title":"<code>djstripe.models.billing.BaseInvoice.customer_tax_exempt = StripeEnumField(enum=enums.CustomerTaxExempt, default='', help_text=\"The customer's tax exempt status. Until the invoice is finalized, this field will equal customer.tax_exempt. Once the invoice is finalized, this field will no longer be updated.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.default_payment_method","title":"<code>djstripe.models.billing.BaseInvoice.default_payment_method = StripeForeignKey('PaymentMethod', null=True, blank=True, on_delete=models.SET_NULL, related_name='+', help_text=\"Default payment method for the invoice. It must belong to the customer associated with the invoice. If not set, defaults to the subscription's default payment method, if any, or to the default payment method in the customer's invoice settings.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.discount","title":"<code>djstripe.models.billing.BaseInvoice.discount = JSONField(null=True, blank=True, help_text='Deprecated! Please use discounts instead. Describes the current discount applied to this subscription, if there is one. When billing, a discount applied to a subscription overrides a discount applied on a customer-wide basis.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.discounts","title":"<code>djstripe.models.billing.BaseInvoice.discounts = JSONField(null=True, blank=True, help_text='The discounts applied to the invoice. Line item discounts are applied before invoice discounts.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.due_date","title":"<code>djstripe.models.billing.BaseInvoice.due_date = StripeDateTimeField(null=True, blank=True, help_text='The date on which payment for this invoice is due. This value will be null for invoices where billing=charge_automatically.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.ending_balance","title":"<code>djstripe.models.billing.BaseInvoice.ending_balance = StripeQuantumCurrencyAmountField(null=True, help_text='Ending customer balance (in cents) after attempting to pay invoice. If the invoice has not been attempted yet, this will be null.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.expand_fields","title":"<code>djstripe.models.billing.BaseInvoice.expand_fields = ['discounts', 'lines.data.discounts', 'lines.data.invoice_item']</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.footer","title":"<code>djstripe.models.billing.BaseInvoice.footer = models.TextField(max_length=5000, blank=True, help_text='Footer displayed on the invoice.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.hosted_invoice_url","title":"<code>djstripe.models.billing.BaseInvoice.hosted_invoice_url = models.TextField(max_length=799, default='', blank=True, help_text='The URL for the hosted invoice page, which allows customers to view and pay an invoice. If the invoice has not been frozen yet, this will be null.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.invoice_pdf","title":"<code>djstripe.models.billing.BaseInvoice.invoice_pdf = models.TextField(max_length=799, default='', blank=True, help_text='The link to download the PDF for the invoice. If the invoice has not been frozen yet, this will be null.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.next_payment_attempt","title":"<code>djstripe.models.billing.BaseInvoice.next_payment_attempt = StripeDateTimeField(null=True, blank=True, help_text='The time at which payment will next be attempted.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.number","title":"<code>djstripe.models.billing.BaseInvoice.number = models.CharField(max_length=64, default='', blank=True, help_text=\"A unique, identifying string that appears on emails sent to the customer for this invoice. This starts with the customer's unique invoice_prefix if it is specified.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.paid","title":"<code>djstripe.models.billing.BaseInvoice.paid = models.BooleanField(default=False, help_text=\"Whether payment was successfully collected for this invoice. An invoice can be paid (most commonly) with a charge or with credit from the customer's account balance.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.payment_intent","title":"<code>djstripe.models.billing.BaseInvoice.payment_intent = models.OneToOneField('PaymentIntent', on_delete=models.CASCADE, null=True, help_text='The PaymentIntent associated with this invoice. The PaymentIntent is generated when the invoice is finalized, and can then be used to pay the invoice.Note that voiding an invoice will cancel the PaymentIntent')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.period_end","title":"<code>djstripe.models.billing.BaseInvoice.period_end = StripeDateTimeField(help_text='End of the usage period during which invoice items were added to this invoice.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.period_start","title":"<code>djstripe.models.billing.BaseInvoice.period_start = StripeDateTimeField(help_text='Start of the usage period during which invoice items were added to this invoice.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.plan","title":"<code>djstripe.models.billing.BaseInvoice.plan: Optional[Plan]</code>  <code>property</code>","text":"<p>Gets the associated plan for this invoice.</p> <p>In order to provide a consistent view of invoices, the plan object should be taken from the first invoice item that has one, rather than using the plan associated with the subscription.</p> <p>Subscriptions (and their associated plan) are updated by the customer and represent what is current, but invoice items are immutable within the invoice and stay static/unchanged.</p> <p>In other words, a plan retrieved from an invoice item will represent the plan as it was at the time an invoice was issued.  The plan retrieved from the subscription will be the currently active plan.</p> <p>:returns: The associated plan for the invoice.</p>"},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.post_payment_credit_notes_amount","title":"<code>djstripe.models.billing.BaseInvoice.post_payment_credit_notes_amount = StripeQuantumCurrencyAmountField(null=True, blank=True, help_text='Total amount (in cents) of all post-payment credit notes issued for this invoice.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.pre_payment_credit_notes_amount","title":"<code>djstripe.models.billing.BaseInvoice.pre_payment_credit_notes_amount = StripeQuantumCurrencyAmountField(null=True, blank=True, help_text='Total amount (in cents) of all pre-payment credit notes issued for this invoice.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.receipt_number","title":"<code>djstripe.models.billing.BaseInvoice.receipt_number = models.CharField(max_length=64, null=True, blank=True, help_text='This is the transaction number that appears on email receipts sent for this invoice.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.starting_balance","title":"<code>djstripe.models.billing.BaseInvoice.starting_balance = StripeQuantumCurrencyAmountField(help_text='Starting customer balance (in cents) before attempting to pay invoice. If the invoice has not been attempted yet, this will be the current customer balance.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.statement_descriptor","title":"<code>djstripe.models.billing.BaseInvoice.statement_descriptor = models.CharField(max_length=22, default='', blank=True, help_text='An arbitrary string to be displayed on your customer\\'s credit card statement. The statement description may not include &lt;&gt;\"\\' characters, and will appear on your customer\\'s statement in capital letters. Non-ASCII characters are automatically stripped. While most banks display this information consistently, some may display it incorrectly or not at all.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.status","title":"<code>djstripe.models.billing.BaseInvoice.status = StripeEnumField(default='', blank=True, enum=enums.InvoiceStatus, help_text='The status of the invoice, one of draft, open, paid, uncollectible, or void.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.status_transitions","title":"<code>djstripe.models.billing.BaseInvoice.status_transitions = JSONField(null=True, blank=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.stripe_class","title":"<code>djstripe.models.billing.BaseInvoice.stripe_class = stripe.Invoice</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.stripe_dashboard_item_name","title":"<code>djstripe.models.billing.BaseInvoice.stripe_dashboard_item_name = 'invoices'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.subscription","title":"<code>djstripe.models.billing.BaseInvoice.subscription = StripeForeignKey('Subscription', null=True, related_name='%(class)ss', on_delete=models.SET_NULL, help_text='The subscription that this invoice was prepared for, if any.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.subscription_proration_date","title":"<code>djstripe.models.billing.BaseInvoice.subscription_proration_date = StripeDateTimeField(null=True, blank=True, help_text='Only set for upcoming invoices that preview prorations. The time used to calculate prorations.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.subtotal","title":"<code>djstripe.models.billing.BaseInvoice.subtotal = StripeDecimalCurrencyAmountField(help_text='Total (as decimal) of all subscriptions, invoice items, and prorations on the invoice before any discount or tax is applied.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.tax","title":"<code>djstripe.models.billing.BaseInvoice.tax = StripeDecimalCurrencyAmountField(null=True, blank=True, help_text='The amount (as decimal) of tax included in the total, calculated from ``tax_percent`` and the subtotal. If no ``tax_percent`` is defined, this value will be null.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.tax_percent","title":"<code>djstripe.models.billing.BaseInvoice.tax_percent = StripePercentField(null=True, blank=True, help_text=\"This percentage of the subtotal has been added to the total amount of the invoice, including invoice line items and discounts. This field is inherited from the subscription's ``tax_percent`` field, but can be changed before the invoice is paid. This field defaults to null.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.threshold_reason","title":"<code>djstripe.models.billing.BaseInvoice.threshold_reason = JSONField(null=True, blank=True, help_text='If billing_reason is set to subscription_threshold this returns more information on which threshold rules triggered the invoice.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.total","title":"<code>djstripe.models.billing.BaseInvoice.total = StripeDecimalCurrencyAmountField('Total (as decimal) after discount.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.webhooks_delivered_at","title":"<code>djstripe.models.billing.BaseInvoice.webhooks_delivered_at = StripeDateTimeField(null=True, help_text='The time at which webhooks for this invoice were successfully delivered (if the invoice had no webhooks to deliver, this will match `date`). Invoice payment is delayed until webhooks are delivered, or until all webhook delivery attempts have been exhausted.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.BaseInvoice-classes","title":"Classes","text":""},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.Meta","title":"<code>djstripe.models.billing.BaseInvoice.Meta</code>","text":"<p>               Bases: <code>Meta</code></p> Source code in <code>djstripe/models/billing.py</code> <pre><code>class Meta(StripeModel.Meta):\n    abstract = True\n    ordering = [\"-created\"]\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.Meta-attributes","title":"Attributes","text":"<code>djstripe.models.billing.BaseInvoice.Meta.abstract = True</code> <code>class-attribute</code> <code>instance-attribute</code> <code>djstripe.models.billing.BaseInvoice.Meta.ordering = ['-created']</code> <code>class-attribute</code> <code>instance-attribute</code>"},{"location":"reference/models/#djstripe.models.billing.BaseInvoice-functions","title":"Functions","text":""},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.__str__","title":"<code>djstripe.models.billing.BaseInvoice.__str__()</code>","text":"Source code in <code>djstripe/models/billing.py</code> <pre><code>def __str__(self):\n    invoice_number = self.number or self.receipt_number or self.id\n    amount = get_friendly_currency_amount(self.amount_paid or 0, self.currency)\n    return f\"Invoice #{invoice_number} for {amount} ({self.status})\"\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.retry","title":"<code>djstripe.models.billing.BaseInvoice.retry(**kwargs)</code>","text":"<p>Retry payment on this invoice if it isn't paid.</p> Source code in <code>djstripe/models/billing.py</code> <pre><code>def retry(self, **kwargs):\n    \"\"\"Retry payment on this invoice if it isn't paid.\"\"\"\n\n    if self.status != enums.InvoiceStatus.paid and self.auto_advance:\n        stripe_invoice = self.api_retrieve()\n        updated_stripe_invoice = stripe_invoice.pay(\n            **kwargs\n        )  # pay() throws an exception if the charge is not successful.\n        type(self).sync_from_stripe_data(\n            updated_stripe_invoice, api_key=self.default_api_key\n        )\n        return True\n    return False\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.BaseInvoice.upcoming","title":"<code>djstripe.models.billing.BaseInvoice.upcoming(api_key=djstripe_settings.STRIPE_SECRET_KEY, customer=None, subscription=None, subscription_plan=None, **kwargs)</code>  <code>classmethod</code>","text":"<p>Gets the upcoming preview invoice (singular) for a customer.</p> <p>At any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discount that is applicable to the customer. (Source: https://stripe.com/docs/api#upcoming_invoice)</p> <p>.. important:: Note that when you are viewing an upcoming invoice,     you are simply viewing a preview.</p> <p>:param customer: The identifier of the customer whose upcoming invoice         you'd like to retrieve. :type customer: Customer or string (customer ID) :param coupon: The code of the coupon to apply. :type coupon: str :param subscription: The identifier of the subscription to retrieve an         invoice for. :type subscription: Subscription or string (subscription ID) :param subscription_plan: If set, the invoice returned will preview         updating the subscription given to this plan, or creating a new         subscription to this plan if no subscription is given. :type subscription_plan: Plan or string (plan ID)</p> Source code in <code>djstripe/models/billing.py</code> <pre><code>@classmethod\ndef upcoming(\n    cls,\n    api_key=djstripe_settings.STRIPE_SECRET_KEY,\n    customer=None,\n    subscription=None,\n    subscription_plan=None,\n    **kwargs,\n) -&gt; Optional[\"UpcomingInvoice\"]:\n    \"\"\"\n    Gets the upcoming preview invoice (singular) for a customer.\n\n    At any time, you can preview the upcoming\n    invoice for a customer. This will show you all the charges that are\n    pending, including subscription renewal charges, invoice item charges,\n    etc. It will also show you any discount that is applicable to the\n    customer. (Source: https://stripe.com/docs/api#upcoming_invoice)\n\n    .. important:: Note that when you are viewing an upcoming invoice,\n        you are simply viewing a preview.\n\n    :param customer: The identifier of the customer whose upcoming invoice \\\n    you'd like to retrieve.\n    :type customer: Customer or string (customer ID)\n    :param coupon: The code of the coupon to apply.\n    :type coupon: str\n    :param subscription: The identifier of the subscription to retrieve an \\\n    invoice for.\n    :type subscription: Subscription or string (subscription ID)\n    :param subscription_plan: If set, the invoice returned will preview \\\n    updating the subscription given to this plan, or creating a new \\\n    subscription to this plan if no subscription is given.\n    :type subscription_plan: Plan or string (plan ID)\n    \"\"\"\n\n    # Convert Customer to id\n    if customer is not None and isinstance(customer, StripeModel):\n        customer = customer.id\n\n    # Convert Subscription to id\n    if subscription is not None and isinstance(subscription, StripeModel):\n        subscription = subscription.id\n\n    # Convert Plan to id\n    if subscription_plan is not None and isinstance(subscription_plan, StripeModel):\n        subscription_plan = subscription_plan.id\n\n    try:\n        upcoming_stripe_invoice = cls.stripe_class.upcoming(\n            api_key=api_key,\n            customer=customer,\n            subscription=subscription,\n            subscription_plan=subscription_plan,\n            stripe_version=djstripe_settings.STRIPE_API_VERSION,\n            **kwargs,\n        )\n    except InvalidRequestError as exc:\n        if str(exc) != \"Nothing to invoice for customer\":\n            raise\n        return None\n\n    # Workaround for \"id\" being missing (upcoming invoices don't persist).\n    upcoming_stripe_invoice[\"id\"] = \"upcoming\"\n\n    return UpcomingInvoice._create_from_stripe_object(\n        upcoming_stripe_invoice,\n        save=False,\n        api_key=api_key,\n    )\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.Coupon","title":"<code>djstripe.models.billing.Coupon</code>","text":"<p>               Bases: <code>StripeModel</code></p> <p>A coupon contains information about a percent-off or amount-off discount you might want to apply to a customer. Coupons may be applied to invoices or orders. Coupons do not work with conventional one-off charges.</p> <p>Stripe documentation: https://stripe.com/docs/api/coupons?lang=python</p> Source code in <code>djstripe/models/billing.py</code> <pre><code>class Coupon(StripeModel):\n    \"\"\"\n    A coupon contains information about a percent-off or amount-off discount you might want to apply to a customer.\n    Coupons may be applied to invoices or orders.\n    Coupons do not work with conventional one-off charges.\n\n    Stripe documentation: https://stripe.com/docs/api/coupons?lang=python\n    \"\"\"\n\n    stripe_class = stripe.Coupon\n    expand_fields = [\"applies_to\"]\n    stripe_dashboard_item_name = \"coupons\"\n\n    id = StripeIdField(max_length=500)\n    applies_to = JSONField(\n        null=True,\n        blank=True,\n        help_text=\"Contains information about what this coupon applies to.\",\n    )\n    amount_off = StripeDecimalCurrencyAmountField(\n        null=True,\n        blank=True,\n        help_text=(\n            \"Amount (as decimal) that will be taken off the subtotal of any \"\n            \"invoices for this customer.\"\n        ),\n    )\n    currency = StripeCurrencyCodeField(null=True, blank=True)\n    duration = StripeEnumField(\n        enum=enums.CouponDuration,\n        help_text=(\n            \"Describes how long a customer who applies this coupon \"\n            \"will get the discount.\"\n        ),\n        default=enums.CouponDuration.once,\n    )\n    duration_in_months = models.PositiveIntegerField(\n        null=True,\n        blank=True,\n        help_text=(\n            \"If `duration` is `repeating`, the number of months the coupon applies.\"\n        ),\n    )\n    max_redemptions = models.PositiveIntegerField(\n        null=True,\n        blank=True,\n        help_text=(\n            \"Maximum number of times this coupon can be redeemed, in total, \"\n            \"before it is no longer valid.\"\n        ),\n    )\n    name = models.TextField(\n        max_length=5000,\n        default=\"\",\n        blank=True,\n        help_text=(\n            \"Name of the coupon displayed to customers on for instance invoices \"\n            \"or receipts.\"\n        ),\n    )\n    percent_off = StripePercentField(\n        null=True,\n        blank=True,\n        help_text=(\n            \"Percent that will be taken off the subtotal of any invoices for \"\n            \"this customer for the duration of the coupon. \"\n            \"For example, a coupon with percent_off of 50 will make a \"\n            \"$100 invoice $50 instead.\"\n        ),\n    )\n    redeem_by = StripeDateTimeField(\n        null=True,\n        blank=True,\n        help_text=(\n            \"Date after which the coupon can no longer be redeemed. \"\n            \"Max 5 years in the future.\"\n        ),\n    )\n    times_redeemed = models.PositiveIntegerField(\n        editable=False,\n        default=0,\n        help_text=\"Number of times this coupon has been applied to a customer.\",\n    )\n    # valid = models.BooleanField(editable=False)\n\n    class Meta(StripeModel.Meta):\n        unique_together = (\"id\", \"livemode\")\n\n    def __str__(self):\n        if self.name:\n            return self.name\n        return self.human_readable\n\n    @property\n    def human_readable_amount(self):\n        if self.percent_off:\n            amount = f\"{self.percent_off}%\"\n        elif self.currency:\n            amount = get_friendly_currency_amount(self.amount_off or 0, self.currency)\n        else:\n            amount = \"(invalid amount)\"\n        return f\"{amount} off\"\n\n    @property\n    def human_readable(self):\n        if self.duration == enums.CouponDuration.repeating:\n            if self.duration_in_months == 1:\n                duration = \"for 1 month\"\n            else:\n                duration = f\"for {self.duration_in_months} months\"\n        else:\n            duration = self.duration\n        return f\"{self.human_readable_amount} {duration}\"\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.Coupon-attributes","title":"Attributes","text":""},{"location":"reference/models/#djstripe.models.billing.Coupon.amount_off","title":"<code>djstripe.models.billing.Coupon.amount_off = StripeDecimalCurrencyAmountField(null=True, blank=True, help_text='Amount (as decimal) that will be taken off the subtotal of any invoices for this customer.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.Coupon.applies_to","title":"<code>djstripe.models.billing.Coupon.applies_to = JSONField(null=True, blank=True, help_text='Contains information about what this coupon applies to.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.Coupon.currency","title":"<code>djstripe.models.billing.Coupon.currency = StripeCurrencyCodeField(null=True, blank=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.Coupon.duration","title":"<code>djstripe.models.billing.Coupon.duration = StripeEnumField(enum=enums.CouponDuration, help_text='Describes how long a customer who applies this coupon will get the discount.', default=enums.CouponDuration.once)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.Coupon.duration_in_months","title":"<code>djstripe.models.billing.Coupon.duration_in_months = models.PositiveIntegerField(null=True, blank=True, help_text='If `duration` is `repeating`, the number of months the coupon applies.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.Coupon.expand_fields","title":"<code>djstripe.models.billing.Coupon.expand_fields = ['applies_to']</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.Coupon.human_readable","title":"<code>djstripe.models.billing.Coupon.human_readable</code>  <code>property</code>","text":""},{"location":"reference/models/#djstripe.models.billing.Coupon.human_readable_amount","title":"<code>djstripe.models.billing.Coupon.human_readable_amount</code>  <code>property</code>","text":""},{"location":"reference/models/#djstripe.models.billing.Coupon.id","title":"<code>djstripe.models.billing.Coupon.id = StripeIdField(max_length=500)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.Coupon.max_redemptions","title":"<code>djstripe.models.billing.Coupon.max_redemptions = models.PositiveIntegerField(null=True, blank=True, help_text='Maximum number of times this coupon can be redeemed, in total, before it is no longer valid.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.Coupon.name","title":"<code>djstripe.models.billing.Coupon.name = models.TextField(max_length=5000, default='', blank=True, help_text='Name of the coupon displayed to customers on for instance invoices or receipts.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.Coupon.percent_off","title":"<code>djstripe.models.billing.Coupon.percent_off = StripePercentField(null=True, blank=True, help_text='Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon. For example, a coupon with percent_off of 50 will make a $100 invoice $50 instead.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.Coupon.redeem_by","title":"<code>djstripe.models.billing.Coupon.redeem_by = StripeDateTimeField(null=True, blank=True, help_text='Date after which the coupon can no longer be redeemed. Max 5 years in the future.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.Coupon.stripe_class","title":"<code>djstripe.models.billing.Coupon.stripe_class = stripe.Coupon</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.Coupon.stripe_dashboard_item_name","title":"<code>djstripe.models.billing.Coupon.stripe_dashboard_item_name = 'coupons'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.Coupon.times_redeemed","title":"<code>djstripe.models.billing.Coupon.times_redeemed = models.PositiveIntegerField(editable=False, default=0, help_text='Number of times this coupon has been applied to a customer.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.Coupon-classes","title":"Classes","text":""},{"location":"reference/models/#djstripe.models.billing.Coupon.Meta","title":"<code>djstripe.models.billing.Coupon.Meta</code>","text":"<p>               Bases: <code>Meta</code></p> Source code in <code>djstripe/models/billing.py</code> <pre><code>class Meta(StripeModel.Meta):\n    unique_together = (\"id\", \"livemode\")\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.Coupon.Meta-attributes","title":"Attributes","text":"<code>djstripe.models.billing.Coupon.Meta.unique_together = ('id', 'livemode')</code> <code>class-attribute</code> <code>instance-attribute</code>"},{"location":"reference/models/#djstripe.models.billing.Coupon-functions","title":"Functions","text":""},{"location":"reference/models/#djstripe.models.billing.Coupon.__str__","title":"<code>djstripe.models.billing.Coupon.__str__()</code>","text":"Source code in <code>djstripe/models/billing.py</code> <pre><code>def __str__(self):\n    if self.name:\n        return self.name\n    return self.human_readable\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.Discount","title":"<code>djstripe.models.billing.Discount</code>","text":"<p>               Bases: <code>StripeModel</code></p> <p>A discount represents the actual application of a coupon or promotion code. It contains information about when the discount began, when it will end, and what it is applied to.</p> <p>Stripe documentation: https://stripe.com/docs/api/discounts</p> Source code in <code>djstripe/models/billing.py</code> <pre><code>class Discount(StripeModel):\n    \"\"\"\n    A discount represents the actual application of a coupon or promotion code.\n    It contains information about when the discount began,\n    when it will end, and what it is applied to.\n\n    Stripe documentation: https://stripe.com/docs/api/discounts\n    \"\"\"\n\n    expand_fields = [\"customer\"]\n    stripe_class = None\n\n    customer = StripeForeignKey(\n        \"Customer\",\n        null=True,\n        blank=True,\n        on_delete=models.CASCADE,\n        help_text=\"The ID of the customer associated with this discount.\",\n        related_name=\"customer_discounts\",\n    )\n    invoice = StripeForeignKey(\n        \"Invoice\",\n        null=True,\n        blank=True,\n        on_delete=models.CASCADE,\n        help_text=(\n            \"The invoice that the discount\u2019s coupon was applied to, if it was applied\"\n            \" directly to a particular invoice.\"\n        ),\n        related_name=\"invoice_discounts\",\n    )\n    promotion_code = models.CharField(\n        max_length=255,\n        blank=True,\n        help_text=\"The promotion code applied to create this discount.\",\n    )\n    subscription = StripeForeignKey(\n        \"subscription\",\n        null=True,\n        blank=True,\n        on_delete=models.CASCADE,\n        help_text=(\n            \"The subscription that this coupon is applied to, if it is applied to a\"\n            \" particular subscription.\"\n        ),\n        related_name=\"subscription_discounts\",\n    )\n\n    @classmethod\n    def is_valid_object(cls, data):\n        \"\"\"\n        Returns whether the data is a valid object for the class\n        \"\"\"\n        return \"object\" in data and data[\"object\"] == \"discount\"\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.Discount-attributes","title":"Attributes","text":""},{"location":"reference/models/#djstripe.models.billing.Discount.customer","title":"<code>djstripe.models.billing.Discount.customer = StripeForeignKey('Customer', null=True, blank=True, on_delete=models.CASCADE, help_text='The ID of the customer associated with this discount.', related_name='customer_discounts')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.Discount.expand_fields","title":"<code>djstripe.models.billing.Discount.expand_fields = ['customer']</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.Discount.invoice","title":"<code>djstripe.models.billing.Discount.invoice = StripeForeignKey('Invoice', null=True, blank=True, on_delete=models.CASCADE, help_text='The invoice that the discount\u2019s coupon was applied to, if it was applied directly to a particular invoice.', related_name='invoice_discounts')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.Discount.promotion_code","title":"<code>djstripe.models.billing.Discount.promotion_code = models.CharField(max_length=255, blank=True, help_text='The promotion code applied to create this discount.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.Discount.stripe_class","title":"<code>djstripe.models.billing.Discount.stripe_class = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.Discount.subscription","title":"<code>djstripe.models.billing.Discount.subscription = StripeForeignKey('subscription', null=True, blank=True, on_delete=models.CASCADE, help_text='The subscription that this coupon is applied to, if it is applied to a particular subscription.', related_name='subscription_discounts')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.Discount-functions","title":"Functions","text":""},{"location":"reference/models/#djstripe.models.billing.Discount.is_valid_object","title":"<code>djstripe.models.billing.Discount.is_valid_object(data)</code>  <code>classmethod</code>","text":"<p>Returns whether the data is a valid object for the class</p> Source code in <code>djstripe/models/billing.py</code> <pre><code>@classmethod\ndef is_valid_object(cls, data):\n    \"\"\"\n    Returns whether the data is a valid object for the class\n    \"\"\"\n    return \"object\" in data and data[\"object\"] == \"discount\"\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.DjstripeInvoiceTotalTaxAmount","title":"<code>djstripe.models.billing.DjstripeInvoiceTotalTaxAmount</code>","text":"<p>               Bases: <code>Model</code></p> <p>An internal model that holds the value of elements of Invoice.total_tax_amounts</p> <p>Note that this is named with the prefix Djstripe to avoid potential collision with a Stripe API object name.</p> Source code in <code>djstripe/models/billing.py</code> <pre><code>class DjstripeInvoiceTotalTaxAmount(models.Model):\n    \"\"\"\n    An internal model that holds the value of elements of Invoice.total_tax_amounts\n\n    Note that this is named with the prefix Djstripe to avoid potential\n    collision with a Stripe API object name.\n    \"\"\"\n\n    invoice = StripeForeignKey(\n        \"Invoice\", on_delete=models.CASCADE, related_name=\"total_tax_amounts\"\n    )\n\n    amount = StripeQuantumCurrencyAmountField(\n        help_text=\"The amount, in cents, of the tax.\"\n    )\n    inclusive = models.BooleanField(\n        help_text=\"Whether this tax amount is inclusive or exclusive.\"\n    )\n    tax_rate = StripeForeignKey(\n        \"TaxRate\",\n        on_delete=models.CASCADE,\n        help_text=\"The tax rate that was applied to get this tax amount.\",\n    )\n\n    class Meta:\n        unique_together = [\"invoice\", \"tax_rate\"]\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.DjstripeInvoiceTotalTaxAmount-attributes","title":"Attributes","text":""},{"location":"reference/models/#djstripe.models.billing.DjstripeInvoiceTotalTaxAmount.amount","title":"<code>djstripe.models.billing.DjstripeInvoiceTotalTaxAmount.amount = StripeQuantumCurrencyAmountField(help_text='The amount, in cents, of the tax.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.DjstripeInvoiceTotalTaxAmount.inclusive","title":"<code>djstripe.models.billing.DjstripeInvoiceTotalTaxAmount.inclusive = models.BooleanField(help_text='Whether this tax amount is inclusive or exclusive.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.DjstripeInvoiceTotalTaxAmount.invoice","title":"<code>djstripe.models.billing.DjstripeInvoiceTotalTaxAmount.invoice = StripeForeignKey('Invoice', on_delete=models.CASCADE, related_name='total_tax_amounts')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.DjstripeInvoiceTotalTaxAmount.tax_rate","title":"<code>djstripe.models.billing.DjstripeInvoiceTotalTaxAmount.tax_rate = StripeForeignKey('TaxRate', on_delete=models.CASCADE, help_text='The tax rate that was applied to get this tax amount.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.DjstripeInvoiceTotalTaxAmount-classes","title":"Classes","text":""},{"location":"reference/models/#djstripe.models.billing.DjstripeInvoiceTotalTaxAmount.Meta","title":"<code>djstripe.models.billing.DjstripeInvoiceTotalTaxAmount.Meta</code>","text":"Source code in <code>djstripe/models/billing.py</code> <pre><code>class Meta:\n    unique_together = [\"invoice\", \"tax_rate\"]\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.DjstripeInvoiceTotalTaxAmount.Meta-attributes","title":"Attributes","text":"<code>djstripe.models.billing.DjstripeInvoiceTotalTaxAmount.Meta.unique_together = ['invoice', 'tax_rate']</code> <code>class-attribute</code> <code>instance-attribute</code>"},{"location":"reference/models/#djstripe.models.billing.DjstripeUpcomingInvoiceTotalTaxAmount","title":"<code>djstripe.models.billing.DjstripeUpcomingInvoiceTotalTaxAmount</code>","text":"<p>               Bases: <code>Model</code></p> <p>As per DjstripeInvoiceTotalTaxAmount, except for UpcomingInvoice</p> Source code in <code>djstripe/models/billing.py</code> <pre><code>class DjstripeUpcomingInvoiceTotalTaxAmount(models.Model):\n    \"\"\"\n    As per DjstripeInvoiceTotalTaxAmount, except for UpcomingInvoice\n    \"\"\"\n\n    invoice = models.ForeignKey(\n        # Don't define related_name since property is defined in UpcomingInvoice\n        \"UpcomingInvoice\",\n        on_delete=models.CASCADE,\n        related_name=\"+\",\n    )\n\n    amount = StripeQuantumCurrencyAmountField(\n        help_text=\"The amount, in cents, of the tax.\"\n    )\n    inclusive = models.BooleanField(\n        help_text=\"Whether this tax amount is inclusive or exclusive.\"\n    )\n    tax_rate = StripeForeignKey(\n        \"TaxRate\",\n        on_delete=models.CASCADE,\n        help_text=\"The tax rate that was applied to get this tax amount.\",\n    )\n\n    class Meta:\n        unique_together = [\"invoice\", \"tax_rate\"]\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.DjstripeUpcomingInvoiceTotalTaxAmount-attributes","title":"Attributes","text":""},{"location":"reference/models/#djstripe.models.billing.DjstripeUpcomingInvoiceTotalTaxAmount.amount","title":"<code>djstripe.models.billing.DjstripeUpcomingInvoiceTotalTaxAmount.amount = StripeQuantumCurrencyAmountField(help_text='The amount, in cents, of the tax.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.DjstripeUpcomingInvoiceTotalTaxAmount.inclusive","title":"<code>djstripe.models.billing.DjstripeUpcomingInvoiceTotalTaxAmount.inclusive = models.BooleanField(help_text='Whether this tax amount is inclusive or exclusive.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.DjstripeUpcomingInvoiceTotalTaxAmount.invoice","title":"<code>djstripe.models.billing.DjstripeUpcomingInvoiceTotalTaxAmount.invoice = models.ForeignKey('UpcomingInvoice', on_delete=models.CASCADE, related_name='+')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.DjstripeUpcomingInvoiceTotalTaxAmount.tax_rate","title":"<code>djstripe.models.billing.DjstripeUpcomingInvoiceTotalTaxAmount.tax_rate = StripeForeignKey('TaxRate', on_delete=models.CASCADE, help_text='The tax rate that was applied to get this tax amount.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.DjstripeUpcomingInvoiceTotalTaxAmount-classes","title":"Classes","text":""},{"location":"reference/models/#djstripe.models.billing.DjstripeUpcomingInvoiceTotalTaxAmount.Meta","title":"<code>djstripe.models.billing.DjstripeUpcomingInvoiceTotalTaxAmount.Meta</code>","text":"Source code in <code>djstripe/models/billing.py</code> <pre><code>class Meta:\n    unique_together = [\"invoice\", \"tax_rate\"]\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.DjstripeUpcomingInvoiceTotalTaxAmount.Meta-attributes","title":"Attributes","text":"<code>djstripe.models.billing.DjstripeUpcomingInvoiceTotalTaxAmount.Meta.unique_together = ['invoice', 'tax_rate']</code> <code>class-attribute</code> <code>instance-attribute</code>"},{"location":"reference/models/#djstripe.models.billing.Invoice","title":"<code>djstripe.models.billing.Invoice</code>","text":"<p>               Bases: <code>BaseInvoice</code></p> <p>Invoices are statements of what a customer owes for a particular billing period, including subscriptions, invoice items, and any automatic proration adjustments if necessary.</p> <p>Once an invoice is created, payment is automatically attempted. Note that the payment, while automatic, does not happen exactly at the time of invoice creation. If you have configured webhooks, the invoice will wait until one hour after the last webhook is successfully sent (or the last webhook times out after failing).</p> <p>Any customer credit on the account is applied before determining how much is due for that invoice (the amount that will be actually charged). If the amount due for the invoice is less than 50 cents (the minimum for a charge), we add the amount to the customer's running account balance to be added to the next invoice. If this amount is negative, it will act as a credit to offset the next invoice. Note that the customer account balance does not include unpaid invoices; it only includes balances that need to be taken into account when calculating the amount due for the next invoice.</p> <p>Stripe documentation: https://stripe.com/docs/api?lang=python#invoices</p> Source code in <code>djstripe/models/billing.py</code> <pre><code>class Invoice(BaseInvoice):\n    \"\"\"\n    Invoices are statements of what a customer owes for a particular billing\n    period, including subscriptions, invoice items, and any automatic proration\n    adjustments if necessary.\n\n    Once an invoice is created, payment is automatically attempted. Note that\n    the payment, while automatic, does not happen exactly at the time of invoice\n    creation. If you have configured webhooks, the invoice will wait until one\n    hour after the last webhook is successfully sent (or the last webhook times\n    out after failing).\n\n    Any customer credit on the account is applied before determining how much is\n    due for that invoice (the amount that will be actually charged).\n    If the amount due for the invoice is less than 50 cents (the minimum for a\n    charge), we add the amount to the customer's running account balance to be\n    added to the next invoice. If this amount is negative, it will act as a\n    credit to offset the next invoice. Note that the customer account balance\n    does not include unpaid invoices; it only includes balances that need to be\n    taken into account when calculating the amount due for the next invoice.\n\n    Stripe documentation: https://stripe.com/docs/api?lang=python#invoices\n    \"\"\"\n\n    default_source = PaymentMethodForeignKey(\n        on_delete=models.SET_NULL,\n        null=True,\n        blank=True,\n        related_name=\"invoices\",\n        help_text=(\n            \"The default payment source for the invoice. \"\n            \"It must belong to the customer associated with the invoice and be \"\n            \"in a chargeable state. If not set, defaults to the subscription's \"\n            \"default source, if any, or to the customer's default source.\"\n        ),\n    )\n\n    # Note:\n    # Most fields are defined on BaseInvoice so they're shared with UpcomingInvoice.\n    # ManyToManyFields are an exception, since UpcomingInvoice doesn't exist in the db.\n    default_tax_rates = models.ManyToManyField(\n        \"TaxRate\",\n        # explicitly specify the joining table name as though the joining model\n        # was defined with through=\"DjstripeInvoiceDefaultTaxRate\"\n        db_table=\"djstripe_djstripeinvoicedefaulttaxrate\",\n        related_name=\"+\",\n        blank=True,\n        help_text=\"The tax rates applied to this invoice, if any.\",\n    )\n\n    def _attach_objects_post_save_hook(\n        self,\n        cls,\n        data,\n        api_key=djstripe_settings.STRIPE_SECRET_KEY,\n        pending_relations=None,\n    ):\n        super()._attach_objects_post_save_hook(\n            cls, data, api_key=api_key, pending_relations=pending_relations\n        )\n\n        self.default_tax_rates.set(\n            cls._stripe_object_to_default_tax_rates(\n                target_cls=TaxRate, data=data, api_key=api_key\n            )\n        )\n\n        cls._stripe_object_set_total_tax_amounts(\n            target_cls=DjstripeInvoiceTotalTaxAmount,\n            data=data,\n            instance=self,\n            api_key=api_key,\n        )\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.Invoice-attributes","title":"Attributes","text":""},{"location":"reference/models/#djstripe.models.billing.Invoice.default_source","title":"<code>djstripe.models.billing.Invoice.default_source = PaymentMethodForeignKey(on_delete=models.SET_NULL, null=True, blank=True, related_name='invoices', help_text=\"The default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription's default source, if any, or to the customer's default source.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.Invoice.default_tax_rates","title":"<code>djstripe.models.billing.Invoice.default_tax_rates = models.ManyToManyField('TaxRate', db_table='djstripe_djstripeinvoicedefaulttaxrate', related_name='+', blank=True, help_text='The tax rates applied to this invoice, if any.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.InvoiceItem","title":"<code>djstripe.models.billing.InvoiceItem</code>","text":"<p>               Bases: <code>StripeModel</code></p> <p>Sometimes you want to add a charge or credit to a customer but only actually charge the customer's card at the end of a regular billing cycle. This is useful for combining several charges to minimize per-transaction fees or having Stripe tabulate your usage-based billing totals.</p> <p>Stripe documentation: https://stripe.com/docs/api?lang=python#invoiceitems</p> Source code in <code>djstripe/models/billing.py</code> <pre><code>class InvoiceItem(StripeModel):\n    \"\"\"\n    Sometimes you want to add a charge or credit to a customer but only actually\n    charge the customer's card at the end of a regular billing cycle.\n    This is useful for combining several charges to minimize per-transaction fees\n    or having Stripe tabulate your usage-based billing totals.\n\n    Stripe documentation: https://stripe.com/docs/api?lang=python#invoiceitems\n    \"\"\"\n\n    stripe_class = stripe.InvoiceItem\n    expand_fields = [\"discounts\"]\n\n    amount = StripeDecimalCurrencyAmountField(help_text=\"Amount invoiced (as decimal).\")\n    currency = StripeCurrencyCodeField()\n    customer = StripeForeignKey(\n        \"Customer\",\n        on_delete=models.CASCADE,\n        related_name=\"invoiceitems\",\n        help_text=\"The customer associated with this invoiceitem.\",\n    )\n    date = StripeDateTimeField(help_text=\"The date on the invoiceitem.\")\n    discountable = models.BooleanField(\n        default=False,\n        help_text=(\n            \"If True, discounts will apply to this invoice item. \"\n            \"Always False for prorations.\"\n        ),\n    )\n    discounts = JSONField(\n        null=True,\n        blank=True,\n        help_text=(\n            \"The discounts which apply to the invoice item. Item discounts are applied\"\n            \" before invoice discounts.\"\n        ),\n    )\n    invoice = StripeForeignKey(\n        \"Invoice\",\n        on_delete=models.CASCADE,\n        null=True,\n        related_name=\"invoiceitems\",\n        help_text=\"The invoice to which this invoiceitem is attached.\",\n    )\n    period = JSONField()\n    period_end = StripeDateTimeField(\n        help_text=\"Might be the date when this invoiceitem's invoice was sent.\"\n    )\n    period_start = StripeDateTimeField(\n        help_text=\"Might be the date when this invoiceitem was added to the invoice\"\n    )\n    plan = models.ForeignKey(\n        \"Plan\",\n        null=True,\n        on_delete=models.SET_NULL,\n        help_text=(\n            \"If the invoice item is a proration, the plan of the subscription \"\n            \"for which the proration was computed.\"\n        ),\n    )\n    price = models.ForeignKey(\n        \"Price\",\n        null=True,\n        related_name=\"invoiceitems\",\n        on_delete=models.SET_NULL,\n        help_text=(\n            \"If the invoice item is a proration, the price of the subscription \"\n            \"for which the proration was computed.\"\n        ),\n    )\n    proration = models.BooleanField(\n        default=False,\n        help_text=(\n            \"Whether or not the invoice item was created automatically as a \"\n            \"proration adjustment when the customer switched plans.\"\n        ),\n    )\n    quantity = models.IntegerField(\n        null=True,\n        blank=True,\n        help_text=(\n            \"If the invoice item is a proration, the quantity of the \"\n            \"subscription for which the proration was computed.\"\n        ),\n    )\n    subscription = StripeForeignKey(\n        \"Subscription\",\n        null=True,\n        related_name=\"invoiceitems\",\n        on_delete=models.SET_NULL,\n        help_text=(\n            \"The subscription that this invoice item has been created for, if any.\"\n        ),\n    )\n    # XXX: subscription_item\n    tax_rates = models.ManyToManyField(\n        \"TaxRate\",\n        # explicitly specify the joining table name as though the joining model\n        # was defined with through=\"DjstripeInvoiceItemTaxRate\"\n        db_table=\"djstripe_djstripeinvoiceitemtaxrate\",\n        related_name=\"+\",\n        blank=True,\n        help_text=(\n            \"The tax rates which apply to this invoice item. When set, \"\n            \"the default_tax_rates on the invoice do not apply to this \"\n            \"invoice item.\"\n        ),\n    )\n    unit_amount = StripeQuantumCurrencyAmountField(\n        null=True,\n        blank=True,\n        help_text=\"Unit amount (in the `currency` specified) of the invoice item.\",\n    )\n    unit_amount_decimal = StripeDecimalCurrencyAmountField(\n        null=True,\n        blank=True,\n        max_digits=djstripe_settings.decimal_max_digits,\n        decimal_places=djstripe_settings.decimal_places,\n        help_text=(\n            \"Same as `unit_amount`, but contains a decimal value with \"\n            \"at most 12 decimal places.\"\n        ),\n    )\n\n    @classmethod\n    def _manipulate_stripe_object_hook(cls, data):\n        data[\"period_start\"] = data[\"period\"][\"start\"]\n        data[\"period_end\"] = data[\"period\"][\"end\"]\n\n        return data\n\n    def _attach_objects_post_save_hook(\n        self,\n        cls,\n        data,\n        api_key=djstripe_settings.STRIPE_SECRET_KEY,\n        pending_relations=None,\n    ):\n        super()._attach_objects_post_save_hook(\n            cls, data, api_key=api_key, pending_relations=pending_relations\n        )\n\n        if self.pk:\n            # only call .set() on saved instance (ie don't on items of UpcomingInvoice)\n            self.tax_rates.set(\n                cls._stripe_object_to_tax_rates(\n                    target_cls=TaxRate, data=data, api_key=api_key\n                )\n            )\n\n        # sync every discount\n        for discount in self.discounts:\n            Discount.sync_from_stripe_data(discount, api_key=api_key)\n\n    def __str__(self):\n        return self.description\n\n    def get_stripe_dashboard_url(self):\n        return self.invoice.get_stripe_dashboard_url()\n\n    def api_retrieve(self, *args, **kwargs):\n        if \"-il_\" in self.id:\n            warnings.warn(\n                f\"Attempting to retrieve InvoiceItem with id={self.id!r}\"\n                \" will most likely fail. \"\n                \"Run manage.py djstripe_update_invoiceitem_ids if this is a problem.\"\n            )\n\n        return super().api_retrieve(*args, **kwargs)\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.InvoiceItem-attributes","title":"Attributes","text":""},{"location":"reference/models/#djstripe.models.billing.InvoiceItem.amount","title":"<code>djstripe.models.billing.InvoiceItem.amount = StripeDecimalCurrencyAmountField(help_text='Amount invoiced (as decimal).')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.InvoiceItem.currency","title":"<code>djstripe.models.billing.InvoiceItem.currency = StripeCurrencyCodeField()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.InvoiceItem.customer","title":"<code>djstripe.models.billing.InvoiceItem.customer = StripeForeignKey('Customer', on_delete=models.CASCADE, related_name='invoiceitems', help_text='The customer associated with this invoiceitem.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.InvoiceItem.date","title":"<code>djstripe.models.billing.InvoiceItem.date = StripeDateTimeField(help_text='The date on the invoiceitem.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.InvoiceItem.discountable","title":"<code>djstripe.models.billing.InvoiceItem.discountable = models.BooleanField(default=False, help_text='If True, discounts will apply to this invoice item. Always False for prorations.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.InvoiceItem.discounts","title":"<code>djstripe.models.billing.InvoiceItem.discounts = JSONField(null=True, blank=True, help_text='The discounts which apply to the invoice item. Item discounts are applied before invoice discounts.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.InvoiceItem.expand_fields","title":"<code>djstripe.models.billing.InvoiceItem.expand_fields = ['discounts']</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.InvoiceItem.invoice","title":"<code>djstripe.models.billing.InvoiceItem.invoice = StripeForeignKey('Invoice', on_delete=models.CASCADE, null=True, related_name='invoiceitems', help_text='The invoice to which this invoiceitem is attached.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.InvoiceItem.period","title":"<code>djstripe.models.billing.InvoiceItem.period = JSONField()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.InvoiceItem.period_end","title":"<code>djstripe.models.billing.InvoiceItem.period_end = StripeDateTimeField(help_text=\"Might be the date when this invoiceitem's invoice was sent.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.InvoiceItem.period_start","title":"<code>djstripe.models.billing.InvoiceItem.period_start = StripeDateTimeField(help_text='Might be the date when this invoiceitem was added to the invoice')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.InvoiceItem.plan","title":"<code>djstripe.models.billing.InvoiceItem.plan = models.ForeignKey('Plan', null=True, on_delete=models.SET_NULL, help_text='If the invoice item is a proration, the plan of the subscription for which the proration was computed.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.InvoiceItem.price","title":"<code>djstripe.models.billing.InvoiceItem.price = models.ForeignKey('Price', null=True, related_name='invoiceitems', on_delete=models.SET_NULL, help_text='If the invoice item is a proration, the price of the subscription for which the proration was computed.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.InvoiceItem.proration","title":"<code>djstripe.models.billing.InvoiceItem.proration = models.BooleanField(default=False, help_text='Whether or not the invoice item was created automatically as a proration adjustment when the customer switched plans.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.InvoiceItem.quantity","title":"<code>djstripe.models.billing.InvoiceItem.quantity = models.IntegerField(null=True, blank=True, help_text='If the invoice item is a proration, the quantity of the subscription for which the proration was computed.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.InvoiceItem.stripe_class","title":"<code>djstripe.models.billing.InvoiceItem.stripe_class = stripe.InvoiceItem</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.InvoiceItem.subscription","title":"<code>djstripe.models.billing.InvoiceItem.subscription = StripeForeignKey('Subscription', null=True, related_name='invoiceitems', on_delete=models.SET_NULL, help_text='The subscription that this invoice item has been created for, if any.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.InvoiceItem.tax_rates","title":"<code>djstripe.models.billing.InvoiceItem.tax_rates = models.ManyToManyField('TaxRate', db_table='djstripe_djstripeinvoiceitemtaxrate', related_name='+', blank=True, help_text='The tax rates which apply to this invoice item. When set, the default_tax_rates on the invoice do not apply to this invoice item.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.InvoiceItem.unit_amount","title":"<code>djstripe.models.billing.InvoiceItem.unit_amount = StripeQuantumCurrencyAmountField(null=True, blank=True, help_text='Unit amount (in the `currency` specified) of the invoice item.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.InvoiceItem.unit_amount_decimal","title":"<code>djstripe.models.billing.InvoiceItem.unit_amount_decimal = StripeDecimalCurrencyAmountField(null=True, blank=True, max_digits=djstripe_settings.decimal_max_digits, decimal_places=djstripe_settings.decimal_places, help_text='Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.InvoiceItem-functions","title":"Functions","text":""},{"location":"reference/models/#djstripe.models.billing.InvoiceItem.__str__","title":"<code>djstripe.models.billing.InvoiceItem.__str__()</code>","text":"Source code in <code>djstripe/models/billing.py</code> <pre><code>def __str__(self):\n    return self.description\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.InvoiceItem.api_retrieve","title":"<code>djstripe.models.billing.InvoiceItem.api_retrieve(*args, **kwargs)</code>","text":"Source code in <code>djstripe/models/billing.py</code> <pre><code>def api_retrieve(self, *args, **kwargs):\n    if \"-il_\" in self.id:\n        warnings.warn(\n            f\"Attempting to retrieve InvoiceItem with id={self.id!r}\"\n            \" will most likely fail. \"\n            \"Run manage.py djstripe_update_invoiceitem_ids if this is a problem.\"\n        )\n\n    return super().api_retrieve(*args, **kwargs)\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.InvoiceItem.get_stripe_dashboard_url","title":"<code>djstripe.models.billing.InvoiceItem.get_stripe_dashboard_url()</code>","text":"Source code in <code>djstripe/models/billing.py</code> <pre><code>def get_stripe_dashboard_url(self):\n    return self.invoice.get_stripe_dashboard_url()\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.LineItem","title":"<code>djstripe.models.billing.LineItem</code>","text":"<p>               Bases: <code>StripeModel</code></p> <p>The individual line items that make up the invoice.</p> <p>Stripe documentation: https://stripe.com/docs/api/invoices/line_item</p> Source code in <code>djstripe/models/billing.py</code> <pre><code>class LineItem(StripeModel):\n    \"\"\"\n    The individual line items that make up the invoice.\n\n    Stripe documentation: https://stripe.com/docs/api/invoices/line_item\n    \"\"\"\n\n    stripe_class = stripe.InvoiceLineItem\n    expand_fields = [\"discounts\"]\n\n    amount = StripeQuantumCurrencyAmountField(help_text=\"The amount, in cents.\")\n    amount_excluding_tax = StripeQuantumCurrencyAmountField(\n        help_text=(\n            \"The integer amount in cents representing the amount for this line item,\"\n            \" excluding all tax and discounts.\"\n        )\n    )\n    currency = StripeCurrencyCodeField()\n    discount_amounts = JSONField(\n        null=True,\n        blank=True,\n        help_text=\"The amount of discount calculated per discount for this line item.\",\n    )\n    discountable = models.BooleanField(\n        default=False,\n        help_text=(\n            \"If True, discounts will apply to this line item. \"\n            \"Always False for prorations.\"\n        ),\n    )\n    discounts = JSONField(\n        null=True,\n        blank=True,\n        help_text=(\n            \"The discounts applied to the invoice line item. Line item discounts are\"\n            \" applied before invoice discounts.\"\n        ),\n    )\n    invoice_item = StripeForeignKey(\n        \"InvoiceItem\",\n        null=True,\n        blank=True,\n        on_delete=models.CASCADE,\n        help_text=\"The ID of the invoice item associated with this line item if any.\",\n    )\n    period = JSONField(\n        help_text=(\n            \"The period this line_item covers. For subscription line items, this is the\"\n            \" subscription period. For prorations, this starts when the proration was\"\n            \" calculated, and ends at the period end of the subscription. For invoice\"\n            \" items, this is the time at which the invoice item was created or the\"\n            \" period of the item.\"\n        )\n    )\n    period_end = StripeDateTimeField(\n        help_text=(\n            \"The end of the period, which must be greater than or equal to the start.\"\n        )\n    )\n    period_start = StripeDateTimeField(help_text=\"The start of the period.\")\n    price = JSONField(\n        help_text=\"The price of the line item.\",\n    )\n    proration = models.BooleanField(\n        default=False,\n        help_text=(\n            \"Whether or not the invoice item was created automatically as a \"\n            \"proration adjustment when the customer switched plans.\"\n        ),\n    )\n    proration_details = JSONField(\n        help_text=\"Additional details for proration line items\"\n    )\n    subscription = StripeForeignKey(\n        \"Subscription\",\n        null=True,\n        blank=True,\n        on_delete=models.CASCADE,\n        help_text=\"The subscription that the invoice item pertains to, if any.\",\n    )\n    subscription_item = StripeForeignKey(\n        \"SubscriptionItem\",\n        null=True,\n        blank=True,\n        on_delete=models.CASCADE,\n        help_text=(\n            \"The subscription item that generated this invoice item. Left empty if the\"\n            \" line item is not an explicit result of a subscription.\"\n        ),\n    )\n    tax_amounts = JSONField(\n        null=True,\n        blank=True,\n        help_text=\"The amount of tax calculated per tax rate for this line item\",\n    )\n    tax_rates = JSONField(\n        null=True, blank=True, help_text=\"The tax rates which apply to the line item.\"\n    )\n    type = StripeEnumField(enum=enums.LineItem)\n    unit_amount_excluding_tax = StripeDecimalCurrencyAmountField(\n        null=True,\n        blank=True,\n        help_text=(\n            \"The amount in cents representing the unit amount for this line item,\"\n            \" excluding all tax and discounts.\"\n        ),\n    )\n    quantity = models.IntegerField(\n        null=True,\n        blank=True,\n        help_text=(\n            \"The quantity of the subscription, if the line item is a subscription or a\"\n            \" proration.\"\n        ),\n    )\n\n    @classmethod\n    def _manipulate_stripe_object_hook(cls, data):\n        data[\"period_start\"] = data[\"period\"][\"start\"]\n        data[\"period_end\"] = data[\"period\"][\"end\"]\n\n        return data\n\n    def _attach_objects_post_save_hook(\n        self,\n        cls,\n        data,\n        api_key=djstripe_settings.STRIPE_SECRET_KEY,\n        pending_relations=None,\n    ):\n        super()._attach_objects_post_save_hook(\n            cls, data, api_key=api_key, pending_relations=pending_relations\n        )\n\n        # sync every discount\n        for discount in self.discounts:\n            Discount.sync_from_stripe_data(discount, api_key=api_key)\n\n    @classmethod\n    def api_list(cls, api_key=djstripe_settings.STRIPE_SECRET_KEY, **kwargs):\n        \"\"\"\n        Call the stripe API's list operation for this model.\n        Note that we only iterate and sync the LineItem associated with the\n        passed in Invoice.\n\n        Upcoming invoices are virtual and are not saved and hence their\n        line items are also not retrieved and synced\n\n        :param api_key: The api key to use for this request. \\\n            Defaults to djstripe_settings.STRIPE_SECRET_KEY.\n        :type api_key: string\n\n        See Stripe documentation for accepted kwargs for each object.\n\n        :returns: an iterator over all items in the query\n        \"\"\"\n        # Update kwargs with `expand` param\n        kwargs = cls.get_expand_params(api_key, **kwargs)\n\n        # get current invoice if any\n        invoice_id = kwargs.pop(\"id\")\n\n        # get expand parameter that needs to be passed to invoice.lines.list call\n        expand_fields = kwargs.pop(\"expand\")\n\n        invoice = Invoice.stripe_class.retrieve(invoice_id, api_key=api_key, **kwargs)\n\n        # iterate over all the line items on the current invoice\n        return invoice.lines.list(\n            api_key=api_key, expand=expand_fields, **kwargs\n        ).auto_paging_iter()\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.LineItem-attributes","title":"Attributes","text":""},{"location":"reference/models/#djstripe.models.billing.LineItem.amount","title":"<code>djstripe.models.billing.LineItem.amount = StripeQuantumCurrencyAmountField(help_text='The amount, in cents.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.LineItem.amount_excluding_tax","title":"<code>djstripe.models.billing.LineItem.amount_excluding_tax = StripeQuantumCurrencyAmountField(help_text='The integer amount in cents representing the amount for this line item, excluding all tax and discounts.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.LineItem.currency","title":"<code>djstripe.models.billing.LineItem.currency = StripeCurrencyCodeField()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.LineItem.discount_amounts","title":"<code>djstripe.models.billing.LineItem.discount_amounts = JSONField(null=True, blank=True, help_text='The amount of discount calculated per discount for this line item.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.LineItem.discountable","title":"<code>djstripe.models.billing.LineItem.discountable = models.BooleanField(default=False, help_text='If True, discounts will apply to this line item. Always False for prorations.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.LineItem.discounts","title":"<code>djstripe.models.billing.LineItem.discounts = JSONField(null=True, blank=True, help_text='The discounts applied to the invoice line item. Line item discounts are applied before invoice discounts.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.LineItem.expand_fields","title":"<code>djstripe.models.billing.LineItem.expand_fields = ['discounts']</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.LineItem.invoice_item","title":"<code>djstripe.models.billing.LineItem.invoice_item = StripeForeignKey('InvoiceItem', null=True, blank=True, on_delete=models.CASCADE, help_text='The ID of the invoice item associated with this line item if any.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.LineItem.period","title":"<code>djstripe.models.billing.LineItem.period = JSONField(help_text='The period this line_item covers. For subscription line items, this is the subscription period. For prorations, this starts when the proration was calculated, and ends at the period end of the subscription. For invoice items, this is the time at which the invoice item was created or the period of the item.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.LineItem.period_end","title":"<code>djstripe.models.billing.LineItem.period_end = StripeDateTimeField(help_text='The end of the period, which must be greater than or equal to the start.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.LineItem.period_start","title":"<code>djstripe.models.billing.LineItem.period_start = StripeDateTimeField(help_text='The start of the period.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.LineItem.price","title":"<code>djstripe.models.billing.LineItem.price = JSONField(help_text='The price of the line item.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.LineItem.proration","title":"<code>djstripe.models.billing.LineItem.proration = models.BooleanField(default=False, help_text='Whether or not the invoice item was created automatically as a proration adjustment when the customer switched plans.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.LineItem.proration_details","title":"<code>djstripe.models.billing.LineItem.proration_details = JSONField(help_text='Additional details for proration line items')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.LineItem.quantity","title":"<code>djstripe.models.billing.LineItem.quantity = models.IntegerField(null=True, blank=True, help_text='The quantity of the subscription, if the line item is a subscription or a proration.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.LineItem.stripe_class","title":"<code>djstripe.models.billing.LineItem.stripe_class = stripe.InvoiceLineItem</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.LineItem.subscription","title":"<code>djstripe.models.billing.LineItem.subscription = StripeForeignKey('Subscription', null=True, blank=True, on_delete=models.CASCADE, help_text='The subscription that the invoice item pertains to, if any.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.LineItem.subscription_item","title":"<code>djstripe.models.billing.LineItem.subscription_item = StripeForeignKey('SubscriptionItem', null=True, blank=True, on_delete=models.CASCADE, help_text='The subscription item that generated this invoice item. Left empty if the line item is not an explicit result of a subscription.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.LineItem.tax_amounts","title":"<code>djstripe.models.billing.LineItem.tax_amounts = JSONField(null=True, blank=True, help_text='The amount of tax calculated per tax rate for this line item')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.LineItem.tax_rates","title":"<code>djstripe.models.billing.LineItem.tax_rates = JSONField(null=True, blank=True, help_text='The tax rates which apply to the line item.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.LineItem.type","title":"<code>djstripe.models.billing.LineItem.type = StripeEnumField(enum=enums.LineItem)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.LineItem.unit_amount_excluding_tax","title":"<code>djstripe.models.billing.LineItem.unit_amount_excluding_tax = StripeDecimalCurrencyAmountField(null=True, blank=True, help_text='The amount in cents representing the unit amount for this line item, excluding all tax and discounts.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.LineItem-functions","title":"Functions","text":""},{"location":"reference/models/#djstripe.models.billing.LineItem.api_list","title":"<code>djstripe.models.billing.LineItem.api_list(api_key=djstripe_settings.STRIPE_SECRET_KEY, **kwargs)</code>  <code>classmethod</code>","text":"<p>Call the stripe API's list operation for this model. Note that we only iterate and sync the LineItem associated with the passed in Invoice.</p> <p>Upcoming invoices are virtual and are not saved and hence their line items are also not retrieved and synced</p> <p>:param api_key: The api key to use for this request.             Defaults to djstripe_settings.STRIPE_SECRET_KEY. :type api_key: string</p> <p>See Stripe documentation for accepted kwargs for each object.</p> <p>:returns: an iterator over all items in the query</p> Source code in <code>djstripe/models/billing.py</code> <pre><code>@classmethod\ndef api_list(cls, api_key=djstripe_settings.STRIPE_SECRET_KEY, **kwargs):\n    \"\"\"\n    Call the stripe API's list operation for this model.\n    Note that we only iterate and sync the LineItem associated with the\n    passed in Invoice.\n\n    Upcoming invoices are virtual and are not saved and hence their\n    line items are also not retrieved and synced\n\n    :param api_key: The api key to use for this request. \\\n        Defaults to djstripe_settings.STRIPE_SECRET_KEY.\n    :type api_key: string\n\n    See Stripe documentation for accepted kwargs for each object.\n\n    :returns: an iterator over all items in the query\n    \"\"\"\n    # Update kwargs with `expand` param\n    kwargs = cls.get_expand_params(api_key, **kwargs)\n\n    # get current invoice if any\n    invoice_id = kwargs.pop(\"id\")\n\n    # get expand parameter that needs to be passed to invoice.lines.list call\n    expand_fields = kwargs.pop(\"expand\")\n\n    invoice = Invoice.stripe_class.retrieve(invoice_id, api_key=api_key, **kwargs)\n\n    # iterate over all the line items on the current invoice\n    return invoice.lines.list(\n        api_key=api_key, expand=expand_fields, **kwargs\n    ).auto_paging_iter()\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.Plan","title":"<code>djstripe.models.billing.Plan</code>","text":"<p>               Bases: <code>StripeModel</code></p> <p>A subscription plan contains the pricing information for different products and feature levels on your site.</p> <p>Stripe documentation: https://stripe.com/docs/api/plans?lang=python</p> <p>NOTE: The Stripe Plans API has been deprecated in favor of the Prices API. You may want to upgrade to use the Price model instead of the Plan model.</p> Source code in <code>djstripe/models/billing.py</code> <pre><code>class Plan(StripeModel):\n    \"\"\"\n    A subscription plan contains the pricing information for different\n    products and feature levels on your site.\n\n    Stripe documentation: https://stripe.com/docs/api/plans?lang=python\n\n    NOTE: The Stripe Plans API has been deprecated in favor of the Prices API.\n    You may want to upgrade to use the Price model instead of the Plan model.\n    \"\"\"\n\n    stripe_class = stripe.Plan\n    expand_fields = [\"product\", \"tiers\"]\n    stripe_dashboard_item_name = \"plans\"\n\n    @classmethod\n    def get_or_create(cls, **kwargs):\n        \"\"\"Get or create a Plan.\"\"\"\n\n        try:\n            return cls.objects.get(id=kwargs[\"id\"]), False\n        except cls.DoesNotExist:\n            return cls.create(**kwargs), True\n\n    @classmethod\n    def create(cls, **kwargs):\n        # A few minor things are changed in the api-version of the create call\n        api_kwargs = dict(kwargs)\n        api_kwargs[\"amount\"] = int(api_kwargs[\"amount\"] * 100)\n\n        if isinstance(api_kwargs.get(\"product\"), StripeModel):\n            api_kwargs[\"product\"] = api_kwargs[\"product\"].id\n\n        stripe_plan = cls._api_create(**api_kwargs)\n        api_key = api_kwargs.get(\"api_key\") or djstripe_settings.STRIPE_SECRET_KEY\n        plan = cls.sync_from_stripe_data(stripe_plan, api_key=api_key)\n\n        return plan\n\n    def __str__(self):\n        if self.product and self.product.name:\n            return f\"{self.human_readable_price} for {self.product.name}\"\n        return self.human_readable_price\n\n    @property\n    def amount_in_cents(self):\n        return int(self.amount * 100)\n\n    @property\n    def human_readable_price(self) -&gt; str:\n        if self.billing_scheme == \"per_unit\":\n            unit_amount = self.amount\n            amount = get_friendly_currency_amount(unit_amount, self.currency)\n        else:\n            # tiered billing scheme\n            tier_1 = self.tiers[0]\n            flat_amount_tier_1 = tier_1[\"flat_amount\"]\n            formatted_unit_amount_tier_1 = get_friendly_currency_amount(\n                (tier_1[\"unit_amount\"] or 0) / 100, self.currency\n            )\n            amount = f\"Starts at {formatted_unit_amount_tier_1} per unit\"\n\n            # stripe shows flat fee even if it is set to 0.00\n            if flat_amount_tier_1 is not None:\n                formatted_flat_amount_tier_1 = get_friendly_currency_amount(\n                    flat_amount_tier_1 / 100, self.currency\n                )\n                amount = f\"{amount} + {formatted_flat_amount_tier_1}\"\n\n        format_args = {\"amount\": amount}\n\n        interval_count = self.interval_count\n        if interval_count == 1:\n            interval = {\n                \"day\": _(\"day\"),\n                \"week\": _(\"week\"),\n                \"month\": _(\"month\"),\n                \"year\": _(\"year\"),\n            }[self.interval]\n            template = _(\"{amount}/{interval}\")\n            format_args[\"interval\"] = interval\n        else:\n            interval = {\n                \"day\": _(\"days\"),\n                \"week\": _(\"weeks\"),\n                \"month\": _(\"months\"),\n                \"year\": _(\"years\"),\n            }[self.interval]\n            template = _(\"{amount} / every {interval_count} {interval}\")\n            format_args[\"interval\"] = interval\n            format_args[\"interval_count\"] = interval_count\n\n        return str(format_lazy(template, **format_args))\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.Plan-attributes","title":"Attributes","text":""},{"location":"reference/models/#djstripe.models.billing.Plan.amount_in_cents","title":"<code>djstripe.models.billing.Plan.amount_in_cents</code>  <code>property</code>","text":""},{"location":"reference/models/#djstripe.models.billing.Plan.expand_fields","title":"<code>djstripe.models.billing.Plan.expand_fields = ['product', 'tiers']</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.Plan.human_readable_price","title":"<code>djstripe.models.billing.Plan.human_readable_price: str</code>  <code>property</code>","text":""},{"location":"reference/models/#djstripe.models.billing.Plan.stripe_class","title":"<code>djstripe.models.billing.Plan.stripe_class = stripe.Plan</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.Plan.stripe_dashboard_item_name","title":"<code>djstripe.models.billing.Plan.stripe_dashboard_item_name = 'plans'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.Plan-functions","title":"Functions","text":""},{"location":"reference/models/#djstripe.models.billing.Plan.__str__","title":"<code>djstripe.models.billing.Plan.__str__()</code>","text":"Source code in <code>djstripe/models/billing.py</code> <pre><code>def __str__(self):\n    if self.product and self.product.name:\n        return f\"{self.human_readable_price} for {self.product.name}\"\n    return self.human_readable_price\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.Plan.create","title":"<code>djstripe.models.billing.Plan.create(**kwargs)</code>  <code>classmethod</code>","text":"Source code in <code>djstripe/models/billing.py</code> <pre><code>@classmethod\ndef create(cls, **kwargs):\n    # A few minor things are changed in the api-version of the create call\n    api_kwargs = dict(kwargs)\n    api_kwargs[\"amount\"] = int(api_kwargs[\"amount\"] * 100)\n\n    if isinstance(api_kwargs.get(\"product\"), StripeModel):\n        api_kwargs[\"product\"] = api_kwargs[\"product\"].id\n\n    stripe_plan = cls._api_create(**api_kwargs)\n    api_key = api_kwargs.get(\"api_key\") or djstripe_settings.STRIPE_SECRET_KEY\n    plan = cls.sync_from_stripe_data(stripe_plan, api_key=api_key)\n\n    return plan\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.Plan.get_or_create","title":"<code>djstripe.models.billing.Plan.get_or_create(**kwargs)</code>  <code>classmethod</code>","text":"<p>Get or create a Plan.</p> Source code in <code>djstripe/models/billing.py</code> <pre><code>@classmethod\ndef get_or_create(cls, **kwargs):\n    \"\"\"Get or create a Plan.\"\"\"\n\n    try:\n        return cls.objects.get(id=kwargs[\"id\"]), False\n    except cls.DoesNotExist:\n        return cls.create(**kwargs), True\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.ShippingRate","title":"<code>djstripe.models.billing.ShippingRate</code>","text":"<p>               Bases: <code>StripeModel</code></p> <p>Shipping rates describe the price of shipping presented to your customers and can be applied to Checkout Sessions to collect shipping costs.</p> <p>Stripe documentation: https://stripe.com/docs/api/shipping_rates</p> Source code in <code>djstripe/models/billing.py</code> <pre><code>class ShippingRate(StripeModel):\n    \"\"\"\n    Shipping rates describe the price of shipping presented\n    to your customers and can be applied to Checkout Sessions\n    to collect shipping costs.\n\n    Stripe documentation: https://stripe.com/docs/api/shipping_rates\n    \"\"\"\n\n    stripe_class = stripe.ShippingRate\n    stripe_dashboard_item_name = \"shipping-rates\"\n    description = None\n\n    active = models.BooleanField(\n        default=True,\n        help_text=(\n            \"Whether the shipping rate can be used for new purchases. Defaults to true\"\n        ),\n    )\n    display_name = models.CharField(\n        max_length=50,\n        default=\"\",\n        blank=True,\n        help_text=(\n            \"The name of the shipping rate, meant to be displayable to the customer.\"\n            \" This will appear on CheckoutSessions.\"\n        ),\n    )\n    fixed_amount = JSONField(\n        help_text=(\n            \"Describes a fixed amount to charge for shipping. Must be present if type\"\n            \" is fixed_amount\"\n        ),\n    )\n    type = StripeEnumField(\n        enum=enums.ShippingRateType,\n        default=enums.ShippingRateType.fixed_amount,\n        help_text=_(\n            \"The type of calculation to use on the shipping rate. Can only be\"\n            \" fixed_amount for now.\"\n        ),\n    )\n    delivery_estimate = JSONField(\n        null=True,\n        blank=True,\n        help_text=(\n            \"The estimated range for how long shipping will take, meant to be\"\n            \" displayable to the customer. This will appear on CheckoutSessions.\"\n        ),\n    )\n    tax_behavior = StripeEnumField(\n        enum=enums.ShippingRateTaxBehavior,\n        help_text=_(\n            \"Specifies whether the rate is considered inclusive of taxes or exclusive\"\n            \" of taxes.\"\n        ),\n    )\n    tax_code = StripeForeignKey(\n        \"TaxCode\",\n        null=True,\n        blank=True,\n        on_delete=models.CASCADE,\n        help_text=\"The shipping tax code\",\n    )\n\n    class Meta(StripeModel.Meta):\n        verbose_name = \"Shipping Rate\"\n\n    def __str__(self):\n        amount = get_friendly_currency_amount(\n            self.fixed_amount.get(\"amount\") / 100, self.fixed_amount.get(\"currency\")\n        )\n        if self.active:\n            return f\"{self.display_name} - {amount} (Active)\"\n        else:\n            return f\"{self.display_name} - {amount} (Archived)\"\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.ShippingRate-attributes","title":"Attributes","text":""},{"location":"reference/models/#djstripe.models.billing.ShippingRate.active","title":"<code>djstripe.models.billing.ShippingRate.active = models.BooleanField(default=True, help_text='Whether the shipping rate can be used for new purchases. Defaults to true')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.ShippingRate.delivery_estimate","title":"<code>djstripe.models.billing.ShippingRate.delivery_estimate = JSONField(null=True, blank=True, help_text='The estimated range for how long shipping will take, meant to be displayable to the customer. This will appear on CheckoutSessions.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.ShippingRate.description","title":"<code>djstripe.models.billing.ShippingRate.description = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.ShippingRate.display_name","title":"<code>djstripe.models.billing.ShippingRate.display_name = models.CharField(max_length=50, default='', blank=True, help_text='The name of the shipping rate, meant to be displayable to the customer. This will appear on CheckoutSessions.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.ShippingRate.fixed_amount","title":"<code>djstripe.models.billing.ShippingRate.fixed_amount = JSONField(help_text='Describes a fixed amount to charge for shipping. Must be present if type is fixed_amount')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.ShippingRate.stripe_class","title":"<code>djstripe.models.billing.ShippingRate.stripe_class = stripe.ShippingRate</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.ShippingRate.stripe_dashboard_item_name","title":"<code>djstripe.models.billing.ShippingRate.stripe_dashboard_item_name = 'shipping-rates'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.ShippingRate.tax_behavior","title":"<code>djstripe.models.billing.ShippingRate.tax_behavior = StripeEnumField(enum=enums.ShippingRateTaxBehavior, help_text=_('Specifies whether the rate is considered inclusive of taxes or exclusive of taxes.'))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.ShippingRate.tax_code","title":"<code>djstripe.models.billing.ShippingRate.tax_code = StripeForeignKey('TaxCode', null=True, blank=True, on_delete=models.CASCADE, help_text='The shipping tax code')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.ShippingRate.type","title":"<code>djstripe.models.billing.ShippingRate.type = StripeEnumField(enum=enums.ShippingRateType, default=enums.ShippingRateType.fixed_amount, help_text=_('The type of calculation to use on the shipping rate. Can only be fixed_amount for now.'))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.ShippingRate-classes","title":"Classes","text":""},{"location":"reference/models/#djstripe.models.billing.ShippingRate.Meta","title":"<code>djstripe.models.billing.ShippingRate.Meta</code>","text":"<p>               Bases: <code>Meta</code></p> Source code in <code>djstripe/models/billing.py</code> <pre><code>class Meta(StripeModel.Meta):\n    verbose_name = \"Shipping Rate\"\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.ShippingRate.Meta-attributes","title":"Attributes","text":"<code>djstripe.models.billing.ShippingRate.Meta.verbose_name = 'Shipping Rate'</code> <code>class-attribute</code> <code>instance-attribute</code>"},{"location":"reference/models/#djstripe.models.billing.ShippingRate-functions","title":"Functions","text":""},{"location":"reference/models/#djstripe.models.billing.ShippingRate.__str__","title":"<code>djstripe.models.billing.ShippingRate.__str__()</code>","text":"Source code in <code>djstripe/models/billing.py</code> <pre><code>def __str__(self):\n    amount = get_friendly_currency_amount(\n        self.fixed_amount.get(\"amount\") / 100, self.fixed_amount.get(\"currency\")\n    )\n    if self.active:\n        return f\"{self.display_name} - {amount} (Active)\"\n    else:\n        return f\"{self.display_name} - {amount} (Archived)\"\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.Subscription","title":"<code>djstripe.models.billing.Subscription</code>","text":"<p>               Bases: <code>StripeModel</code></p> <p>Subscriptions allow you to charge a customer's card on a recurring basis. A subscription ties a customer to a particular plan you've created.</p> <p>A subscription still in its trial period is <code>trialing</code> and moves to <code>active</code> when the trial period is over.</p> <p>When payment to renew the subscription fails, the subscription becomes <code>past_due</code>. After Stripe has exhausted all payment retry attempts, the subscription ends up with a status of either <code>canceled</code> or <code>unpaid</code> depending on your retry settings.</p> <p>Note that when a subscription has a status of <code>unpaid</code>, no subsequent invoices will be attempted (invoices will be created, but then immediately automatically closed.</p> <p>Additionally, updating customer card details will not lead to Stripe retrying the latest invoice.). After receiving updated card details from a customer, you may choose to reopen and pay their closed invoices.</p> <p>Stripe documentation: https://stripe.com/docs/api?lang=python#subscriptions</p> Source code in <code>djstripe/models/billing.py</code> <pre><code>class Subscription(StripeModel):\n    \"\"\"\n    Subscriptions allow you to charge a customer's card on a recurring basis.\n    A subscription ties a customer to a particular plan you've created.\n\n    A subscription still in its trial period is ``trialing`` and moves to ``active``\n    when the trial period is over.\n\n    When payment to renew the subscription fails, the subscription becomes ``past_due``.\n    After Stripe has exhausted all payment retry attempts, the subscription ends up\n    with a status of either ``canceled`` or ``unpaid`` depending on your retry settings.\n\n    Note that when a subscription has a status of ``unpaid``, no subsequent invoices\n    will be attempted (invoices will be created, but then immediately\n    automatically closed.\n\n    Additionally, updating customer card details will not lead to Stripe retrying the\n    latest invoice.).\n    After receiving updated card details from a customer, you may choose to reopen and\n    pay their closed invoices.\n\n    Stripe documentation: https://stripe.com/docs/api?lang=python#subscriptions\n    \"\"\"\n\n    stripe_class = stripe.Subscription\n    stripe_dashboard_item_name = \"subscriptions\"\n\n    customer = StripeForeignKey(\n        \"Customer\",\n        on_delete=models.CASCADE,\n        related_name=\"subscriptions\",\n        help_text=\"The customer associated with this subscription.\",\n    )\n\n    objects = SubscriptionManager()\n\n    @classmethod\n    def api_list(cls, api_key=djstripe_settings.STRIPE_SECRET_KEY, **kwargs):\n        \"\"\"\n        Call the stripe API's list operation for this model.\n        :param api_key: The api key to use for this request. \\\n            Defaults to djstripe_settings.STRIPE_SECRET_KEY.\n        :type api_key: string\n        See Stripe documentation for accepted kwargs for each object.\n        :returns: an iterator over all items in the query\n        \"\"\"\n        # Update kwargs with `expand` param\n        kwargs = cls.get_expand_params(api_key, **kwargs)\n\n        if not kwargs.get(\"status\"):\n            # special case: https://stripe.com/docs/api/subscriptions/list#list_subscriptions-status\n            # See Issue: https://github.com/dj-stripe/dj-stripe/issues/1763\n            kwargs[\"status\"] = \"all\"\n        return super().api_list(api_key=api_key, **kwargs)\n\n    def update(self, plan: Union[StripeModel, str] = None, **kwargs):\n        \"\"\"\n        See `Customer.subscribe() &lt;#djstripe.models.Customer.subscribe&gt;`__\n\n        :param plan: The plan to which to subscribe the customer.\n        :type plan: Plan or string (plan ID)\n\n        .. important:: Updating a subscription by changing the plan or quantity \\\n            creates a new ``Subscription`` in \\\n            Stripe (and dj-stripe).\n        \"\"\"\n\n        # Convert Plan to id\n        if plan is not None and isinstance(plan, StripeModel):\n            plan = plan.id\n\n        stripe_subscription = self._api_update(plan=plan, **kwargs)\n\n        api_key = kwargs.get(\"api_key\") or self.default_api_key\n        return Subscription.sync_from_stripe_data(stripe_subscription, api_key=api_key)\n\n    def extend(self, delta):\n        \"\"\"\n        Extends this subscription by the provided delta.\n\n        :param delta: The timedelta by which to extend this subscription.\n        :type delta: timedelta\n        \"\"\"\n\n        if delta.total_seconds() &lt; 0:\n            raise ValueError(\"delta must be a positive timedelta.\")\n\n        if self.trial_end is not None and self.trial_end &gt; timezone.now():\n            period_end = self.trial_end\n        else:\n            period_end = self.current_period_end\n\n        period_end += delta\n\n        return self.update(proration_behavior=\"none\", trial_end=period_end)\n\n    def cancel(self, at_period_end: bool = False, **kwargs):\n        \"\"\"\n        Cancels this subscription. If you set the at_period_end parameter to true,\n        the subscription will remain active until the end of the period, at which point\n        it will be canceled and not renewed. By default, the subscription is terminated\n        immediately. In either case, the customer will not be charged again for\n        the subscription. Note, however, that any pending invoice items or metered\n        usage will still be charged at the end of the period unless manually\n        deleted.\n\n        Depending on how `proration_behavior` is set, any pending prorations will\n        also be left in place and collected at the end of the period.\n        However, if the subscription is set to cancel immediately, you can pass the\n        `prorate` and `invoice_now` flags in `kwargs` to configure how the pending\n        metered usage is invoiced and how proration must work.\n\n        By default, all unpaid invoices for the customer will be closed upon\n        subscription cancellation. We do this in order to prevent unexpected payment\n        retries once the customer has canceled a subscription. However, you can\n        reopen the invoices manually after subscription cancellation to have us proceed\n        with automatic retries, or you could even re-attempt payment yourself on all\n        unpaid invoices before allowing the customer to cancel the\n        subscription at all.\n\n        :param at_period_end: A flag that if set to true will delay the cancellation \\\n            of the subscription until the end of the current period. Default is False.\n        :type at_period_end: boolean\n\n        .. important:: If a subscription is canceled during a trial period, \\\n        the ``at_period_end`` flag will be overridden to False so that the trial ends \\\n        immediately and the customer's card isn't charged.\n        \"\"\"\n\n        # If plan has trial days and customer cancels before\n        # trial period ends, then end subscription now,\n        # i.e. at_period_end=False\n        if self.trial_end and self.trial_end &gt; timezone.now():\n            at_period_end = False\n\n        if at_period_end:\n            stripe_subscription = self._api_update(cancel_at_period_end=True, **kwargs)\n        else:\n            try:\n                stripe_subscription = self._api_delete(**kwargs)\n            except InvalidRequestError as exc:\n                if \"No such subscription:\" in str(exc):\n                    # cancel() works by deleting the subscription. The object still\n                    # exists in Stripe however, and can still be retrieved.\n                    # If the subscription was already canceled (status=canceled),\n                    # that api_retrieve() call will fail with \"No such subscription\".\n                    # However, this may also happen if the subscription legitimately\n                    # does not exist, in which case the following line will re-raise.\n                    stripe_subscription = self.api_retrieve()\n                else:\n                    raise\n\n        return Subscription.sync_from_stripe_data(\n            stripe_subscription, api_key=self.default_api_key\n        )\n\n    def reactivate(self):\n        \"\"\"\n        Reactivates this subscription.\n\n        If a customer's subscription is canceled with ``at_period_end`` set to True and\n        it has not yet reached the end of the billing period, it can be reactivated.\n        Subscriptions canceled immediately cannot be reactivated.\n        (Source: https://stripe.com/docs/billing/subscriptions/cancel)\n\n        .. warning:: Reactivating a fully canceled Subscription will fail silently. \\\n        Be sure to check the returned Subscription's status.\n        \"\"\"\n        stripe_subscription = self.api_retrieve()\n        stripe_subscription.plan = self.plan.id\n        stripe_subscription.cancel_at_period_end = False\n\n        return Subscription.sync_from_stripe_data(stripe_subscription.save())\n\n    def is_period_current(self):\n        \"\"\"\n        Returns True if this subscription's period is current, false otherwise.\n        \"\"\"\n\n        return self.current_period_end &gt; timezone.now() or (\n            self.trial_end and self.trial_end &gt; timezone.now()\n        )\n\n    def is_status_current(self):\n        \"\"\"\n        Returns True if this subscription's status is current (active or trialing),\n        false otherwise.\n        \"\"\"\n\n        return self.status in [\"trialing\", \"active\"]\n\n    def is_status_temporarily_current(self):\n        \"\"\"\n        A status is temporarily current when the subscription is canceled with the\n        ``at_period_end`` flag.\n        The subscription is still active, but is technically canceled and we're just\n        waiting for it to run out.\n\n        You could use this method to give customers limited service after they've\n        canceled. For example, a video on demand service could only allow customers\n        to download their libraries and do nothing else when their\n        subscription is temporarily current.\n        \"\"\"\n\n        return (\n            self.canceled_at\n            and self.cancel_at_period_end\n            and timezone.now() &lt; self.current_period_end\n        )\n\n    def is_valid(self):\n        \"\"\"\n        Returns True if this subscription's status and period are current,\n        false otherwise.\n        \"\"\"\n\n        if not self.is_status_current():\n            return False\n\n        if not self.is_period_current():\n            return False\n\n        return True\n\n    def _attach_objects_post_save_hook(\n        self,\n        cls,\n        data,\n        api_key=djstripe_settings.STRIPE_SECRET_KEY,\n        pending_relations=None,\n    ):\n        super()._attach_objects_post_save_hook(\n            cls, data, api_key=api_key, pending_relations=pending_relations\n        )\n\n        cls._stripe_object_to_subscription_items(\n            target_cls=SubscriptionItem, data=data, subscription=self, api_key=api_key\n        )\n\n        self.default_tax_rates.set(\n            cls._stripe_object_to_default_tax_rates(\n                target_cls=TaxRate, data=data, api_key=api_key\n            )\n        )\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.Subscription-attributes","title":"Attributes","text":""},{"location":"reference/models/#djstripe.models.billing.Subscription.customer","title":"<code>djstripe.models.billing.Subscription.customer = StripeForeignKey('Customer', on_delete=models.CASCADE, related_name='subscriptions', help_text='The customer associated with this subscription.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.Subscription.objects","title":"<code>djstripe.models.billing.Subscription.objects = SubscriptionManager()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.Subscription.stripe_class","title":"<code>djstripe.models.billing.Subscription.stripe_class = stripe.Subscription</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.Subscription.stripe_dashboard_item_name","title":"<code>djstripe.models.billing.Subscription.stripe_dashboard_item_name = 'subscriptions'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.Subscription-functions","title":"Functions","text":""},{"location":"reference/models/#djstripe.models.billing.Subscription.api_list","title":"<code>djstripe.models.billing.Subscription.api_list(api_key=djstripe_settings.STRIPE_SECRET_KEY, **kwargs)</code>  <code>classmethod</code>","text":"<p>Call the stripe API's list operation for this model. :param api_key: The api key to use for this request.             Defaults to djstripe_settings.STRIPE_SECRET_KEY. :type api_key: string See Stripe documentation for accepted kwargs for each object. :returns: an iterator over all items in the query</p> Source code in <code>djstripe/models/billing.py</code> <pre><code>@classmethod\ndef api_list(cls, api_key=djstripe_settings.STRIPE_SECRET_KEY, **kwargs):\n    \"\"\"\n    Call the stripe API's list operation for this model.\n    :param api_key: The api key to use for this request. \\\n        Defaults to djstripe_settings.STRIPE_SECRET_KEY.\n    :type api_key: string\n    See Stripe documentation for accepted kwargs for each object.\n    :returns: an iterator over all items in the query\n    \"\"\"\n    # Update kwargs with `expand` param\n    kwargs = cls.get_expand_params(api_key, **kwargs)\n\n    if not kwargs.get(\"status\"):\n        # special case: https://stripe.com/docs/api/subscriptions/list#list_subscriptions-status\n        # See Issue: https://github.com/dj-stripe/dj-stripe/issues/1763\n        kwargs[\"status\"] = \"all\"\n    return super().api_list(api_key=api_key, **kwargs)\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.Subscription.cancel","title":"<code>djstripe.models.billing.Subscription.cancel(at_period_end=False, **kwargs)</code>","text":"<p>Cancels this subscription. If you set the at_period_end parameter to true, the subscription will remain active until the end of the period, at which point it will be canceled and not renewed. By default, the subscription is terminated immediately. In either case, the customer will not be charged again for the subscription. Note, however, that any pending invoice items or metered usage will still be charged at the end of the period unless manually deleted.</p> <p>Depending on how <code>proration_behavior</code> is set, any pending prorations will also be left in place and collected at the end of the period. However, if the subscription is set to cancel immediately, you can pass the <code>prorate</code> and <code>invoice_now</code> flags in <code>kwargs</code> to configure how the pending metered usage is invoiced and how proration must work.</p> <p>By default, all unpaid invoices for the customer will be closed upon subscription cancellation. We do this in order to prevent unexpected payment retries once the customer has canceled a subscription. However, you can reopen the invoices manually after subscription cancellation to have us proceed with automatic retries, or you could even re-attempt payment yourself on all unpaid invoices before allowing the customer to cancel the subscription at all.</p> <p>:param at_period_end: A flag that if set to true will delay the cancellation             of the subscription until the end of the current period. Default is False. :type at_period_end: boolean</p> <p>.. important:: If a subscription is canceled during a trial period,         the <code>at_period_end</code> flag will be overridden to False so that the trial ends         immediately and the customer's card isn't charged.</p> Source code in <code>djstripe/models/billing.py</code> <pre><code>def cancel(self, at_period_end: bool = False, **kwargs):\n    \"\"\"\n    Cancels this subscription. If you set the at_period_end parameter to true,\n    the subscription will remain active until the end of the period, at which point\n    it will be canceled and not renewed. By default, the subscription is terminated\n    immediately. In either case, the customer will not be charged again for\n    the subscription. Note, however, that any pending invoice items or metered\n    usage will still be charged at the end of the period unless manually\n    deleted.\n\n    Depending on how `proration_behavior` is set, any pending prorations will\n    also be left in place and collected at the end of the period.\n    However, if the subscription is set to cancel immediately, you can pass the\n    `prorate` and `invoice_now` flags in `kwargs` to configure how the pending\n    metered usage is invoiced and how proration must work.\n\n    By default, all unpaid invoices for the customer will be closed upon\n    subscription cancellation. We do this in order to prevent unexpected payment\n    retries once the customer has canceled a subscription. However, you can\n    reopen the invoices manually after subscription cancellation to have us proceed\n    with automatic retries, or you could even re-attempt payment yourself on all\n    unpaid invoices before allowing the customer to cancel the\n    subscription at all.\n\n    :param at_period_end: A flag that if set to true will delay the cancellation \\\n        of the subscription until the end of the current period. Default is False.\n    :type at_period_end: boolean\n\n    .. important:: If a subscription is canceled during a trial period, \\\n    the ``at_period_end`` flag will be overridden to False so that the trial ends \\\n    immediately and the customer's card isn't charged.\n    \"\"\"\n\n    # If plan has trial days and customer cancels before\n    # trial period ends, then end subscription now,\n    # i.e. at_period_end=False\n    if self.trial_end and self.trial_end &gt; timezone.now():\n        at_period_end = False\n\n    if at_period_end:\n        stripe_subscription = self._api_update(cancel_at_period_end=True, **kwargs)\n    else:\n        try:\n            stripe_subscription = self._api_delete(**kwargs)\n        except InvalidRequestError as exc:\n            if \"No such subscription:\" in str(exc):\n                # cancel() works by deleting the subscription. The object still\n                # exists in Stripe however, and can still be retrieved.\n                # If the subscription was already canceled (status=canceled),\n                # that api_retrieve() call will fail with \"No such subscription\".\n                # However, this may also happen if the subscription legitimately\n                # does not exist, in which case the following line will re-raise.\n                stripe_subscription = self.api_retrieve()\n            else:\n                raise\n\n    return Subscription.sync_from_stripe_data(\n        stripe_subscription, api_key=self.default_api_key\n    )\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.Subscription.extend","title":"<code>djstripe.models.billing.Subscription.extend(delta)</code>","text":"<p>Extends this subscription by the provided delta.</p> <p>:param delta: The timedelta by which to extend this subscription. :type delta: timedelta</p> Source code in <code>djstripe/models/billing.py</code> <pre><code>def extend(self, delta):\n    \"\"\"\n    Extends this subscription by the provided delta.\n\n    :param delta: The timedelta by which to extend this subscription.\n    :type delta: timedelta\n    \"\"\"\n\n    if delta.total_seconds() &lt; 0:\n        raise ValueError(\"delta must be a positive timedelta.\")\n\n    if self.trial_end is not None and self.trial_end &gt; timezone.now():\n        period_end = self.trial_end\n    else:\n        period_end = self.current_period_end\n\n    period_end += delta\n\n    return self.update(proration_behavior=\"none\", trial_end=period_end)\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.Subscription.is_period_current","title":"<code>djstripe.models.billing.Subscription.is_period_current()</code>","text":"<p>Returns True if this subscription's period is current, false otherwise.</p> Source code in <code>djstripe/models/billing.py</code> <pre><code>def is_period_current(self):\n    \"\"\"\n    Returns True if this subscription's period is current, false otherwise.\n    \"\"\"\n\n    return self.current_period_end &gt; timezone.now() or (\n        self.trial_end and self.trial_end &gt; timezone.now()\n    )\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.Subscription.is_status_current","title":"<code>djstripe.models.billing.Subscription.is_status_current()</code>","text":"<p>Returns True if this subscription's status is current (active or trialing), false otherwise.</p> Source code in <code>djstripe/models/billing.py</code> <pre><code>def is_status_current(self):\n    \"\"\"\n    Returns True if this subscription's status is current (active or trialing),\n    false otherwise.\n    \"\"\"\n\n    return self.status in [\"trialing\", \"active\"]\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.Subscription.is_status_temporarily_current","title":"<code>djstripe.models.billing.Subscription.is_status_temporarily_current()</code>","text":"<p>A status is temporarily current when the subscription is canceled with the <code>at_period_end</code> flag. The subscription is still active, but is technically canceled and we're just waiting for it to run out.</p> <p>You could use this method to give customers limited service after they've canceled. For example, a video on demand service could only allow customers to download their libraries and do nothing else when their subscription is temporarily current.</p> Source code in <code>djstripe/models/billing.py</code> <pre><code>def is_status_temporarily_current(self):\n    \"\"\"\n    A status is temporarily current when the subscription is canceled with the\n    ``at_period_end`` flag.\n    The subscription is still active, but is technically canceled and we're just\n    waiting for it to run out.\n\n    You could use this method to give customers limited service after they've\n    canceled. For example, a video on demand service could only allow customers\n    to download their libraries and do nothing else when their\n    subscription is temporarily current.\n    \"\"\"\n\n    return (\n        self.canceled_at\n        and self.cancel_at_period_end\n        and timezone.now() &lt; self.current_period_end\n    )\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.Subscription.is_valid","title":"<code>djstripe.models.billing.Subscription.is_valid()</code>","text":"<p>Returns True if this subscription's status and period are current, false otherwise.</p> Source code in <code>djstripe/models/billing.py</code> <pre><code>def is_valid(self):\n    \"\"\"\n    Returns True if this subscription's status and period are current,\n    false otherwise.\n    \"\"\"\n\n    if not self.is_status_current():\n        return False\n\n    if not self.is_period_current():\n        return False\n\n    return True\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.Subscription.reactivate","title":"<code>djstripe.models.billing.Subscription.reactivate()</code>","text":"<p>Reactivates this subscription.</p> <p>If a customer's subscription is canceled with <code>at_period_end</code> set to True and it has not yet reached the end of the billing period, it can be reactivated. Subscriptions canceled immediately cannot be reactivated. (Source: https://stripe.com/docs/billing/subscriptions/cancel)</p> <p>.. warning:: Reactivating a fully canceled Subscription will fail silently.         Be sure to check the returned Subscription's status.</p> Source code in <code>djstripe/models/billing.py</code> <pre><code>def reactivate(self):\n    \"\"\"\n    Reactivates this subscription.\n\n    If a customer's subscription is canceled with ``at_period_end`` set to True and\n    it has not yet reached the end of the billing period, it can be reactivated.\n    Subscriptions canceled immediately cannot be reactivated.\n    (Source: https://stripe.com/docs/billing/subscriptions/cancel)\n\n    .. warning:: Reactivating a fully canceled Subscription will fail silently. \\\n    Be sure to check the returned Subscription's status.\n    \"\"\"\n    stripe_subscription = self.api_retrieve()\n    stripe_subscription.plan = self.plan.id\n    stripe_subscription.cancel_at_period_end = False\n\n    return Subscription.sync_from_stripe_data(stripe_subscription.save())\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.Subscription.update","title":"<code>djstripe.models.billing.Subscription.update(plan=None, **kwargs)</code>","text":"<p>See <code>Customer.subscribe() &lt;#djstripe.models.Customer.subscribe&gt;</code>__</p> <p>:param plan: The plan to which to subscribe the customer. :type plan: Plan or string (plan ID)</p> <p>.. important:: Updating a subscription by changing the plan or quantity             creates a new <code>Subscription</code> in             Stripe (and dj-stripe).</p> Source code in <code>djstripe/models/billing.py</code> <pre><code>def update(self, plan: Union[StripeModel, str] = None, **kwargs):\n    \"\"\"\n    See `Customer.subscribe() &lt;#djstripe.models.Customer.subscribe&gt;`__\n\n    :param plan: The plan to which to subscribe the customer.\n    :type plan: Plan or string (plan ID)\n\n    .. important:: Updating a subscription by changing the plan or quantity \\\n        creates a new ``Subscription`` in \\\n        Stripe (and dj-stripe).\n    \"\"\"\n\n    # Convert Plan to id\n    if plan is not None and isinstance(plan, StripeModel):\n        plan = plan.id\n\n    stripe_subscription = self._api_update(plan=plan, **kwargs)\n\n    api_key = kwargs.get(\"api_key\") or self.default_api_key\n    return Subscription.sync_from_stripe_data(stripe_subscription, api_key=api_key)\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.SubscriptionItem","title":"<code>djstripe.models.billing.SubscriptionItem</code>","text":"<p>               Bases: <code>StripeModel</code></p> <p>Subscription items allow you to create customer subscriptions with more than one plan, making it easy to represent complex billing relationships.</p> <p>Stripe documentation: https://stripe.com/docs/api?lang=python#subscription_items</p> Source code in <code>djstripe/models/billing.py</code> <pre><code>class SubscriptionItem(StripeModel):\n    \"\"\"\n    Subscription items allow you to create customer subscriptions\n    with more than one plan, making it easy to represent complex billing relationships.\n\n    Stripe documentation: https://stripe.com/docs/api?lang=python#subscription_items\n    \"\"\"\n\n    stripe_class = stripe.SubscriptionItem\n\n    billing_thresholds = JSONField(\n        null=True,\n        blank=True,\n        help_text=(\n            \"Define thresholds at which an invoice will be sent, and the \"\n            \"related subscription advanced to a new billing period.\"\n        ),\n    )\n    plan = models.ForeignKey(\n        \"Plan\",\n        on_delete=models.CASCADE,\n        related_name=\"subscription_items\",\n        help_text=\"The plan the customer is subscribed to.\",\n    )\n    price = models.ForeignKey(\n        \"Price\",\n        null=True,\n        blank=True,\n        on_delete=models.CASCADE,\n        related_name=\"subscription_items\",\n        help_text=\"The price the customer is subscribed to.\",\n    )\n    proration_behavior = StripeEnumField(\n        enum=enums.SubscriptionProrationBehavior,\n        help_text=(\n            \"Determines how to handle prorations when the billing cycle changes (e.g.,\"\n            \" when switching plans, resetting billing_cycle_anchor=now, or starting a\"\n            \" trial), or if an item\u2019s quantity changes\"\n        ),\n        default=enums.SubscriptionProrationBehavior.create_prorations,\n        blank=True,\n    )\n    proration_date = StripeDateTimeField(\n        null=True,\n        blank=True,\n        help_text=(\n            \"If set, the proration will be calculated as though the subscription was\"\n            \" updated at the given time. This can be used to apply exactly the same\"\n            \" proration that was previewed with upcoming invoice endpoint. It can also\"\n            \" be used to implement custom proration logic, such as prorating by day\"\n            \" instead of by second, by providing the time that you wish to use for\"\n            \" proration calculations\"\n        ),\n    )\n    quantity = models.PositiveIntegerField(\n        null=True,\n        blank=True,\n        help_text=(\n            \"The quantity of the plan to which the customer should be subscribed.\"\n        ),\n    )\n    subscription = StripeForeignKey(\n        \"Subscription\",\n        on_delete=models.CASCADE,\n        related_name=\"items\",\n        help_text=\"The subscription this subscription item belongs to.\",\n    )\n    tax_rates = models.ManyToManyField(\n        \"TaxRate\",\n        # explicitly specify the joining table name as though the joining model\n        # was defined with through=\"DjstripeSubscriptionItemTaxRate\"\n        db_table=\"djstripe_djstripesubscriptionitemtaxrate\",\n        related_name=\"+\",\n        blank=True,\n        help_text=(\n            \"The tax rates which apply to this subscription_item. When set, \"\n            \"the default_tax_rates on the subscription do not apply to this \"\n            \"subscription_item.\"\n        ),\n    )\n\n    def _attach_objects_post_save_hook(\n        self,\n        cls,\n        data,\n        api_key=djstripe_settings.STRIPE_SECRET_KEY,\n        pending_relations=None,\n    ):\n        super()._attach_objects_post_save_hook(\n            cls, data, api_key=api_key, pending_relations=pending_relations\n        )\n\n        self.tax_rates.set(\n            cls._stripe_object_to_tax_rates(\n                target_cls=TaxRate, data=data, api_key=api_key\n            )\n        )\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.SubscriptionItem-attributes","title":"Attributes","text":""},{"location":"reference/models/#djstripe.models.billing.SubscriptionItem.billing_thresholds","title":"<code>djstripe.models.billing.SubscriptionItem.billing_thresholds = JSONField(null=True, blank=True, help_text='Define thresholds at which an invoice will be sent, and the related subscription advanced to a new billing period.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.SubscriptionItem.plan","title":"<code>djstripe.models.billing.SubscriptionItem.plan = models.ForeignKey('Plan', on_delete=models.CASCADE, related_name='subscription_items', help_text='The plan the customer is subscribed to.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.SubscriptionItem.price","title":"<code>djstripe.models.billing.SubscriptionItem.price = models.ForeignKey('Price', null=True, blank=True, on_delete=models.CASCADE, related_name='subscription_items', help_text='The price the customer is subscribed to.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.SubscriptionItem.proration_behavior","title":"<code>djstripe.models.billing.SubscriptionItem.proration_behavior = StripeEnumField(enum=enums.SubscriptionProrationBehavior, help_text='Determines how to handle prorations when the billing cycle changes (e.g., when switching plans, resetting billing_cycle_anchor=now, or starting a trial), or if an item\u2019s quantity changes', default=enums.SubscriptionProrationBehavior.create_prorations, blank=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.SubscriptionItem.proration_date","title":"<code>djstripe.models.billing.SubscriptionItem.proration_date = StripeDateTimeField(null=True, blank=True, help_text='If set, the proration will be calculated as though the subscription was updated at the given time. This can be used to apply exactly the same proration that was previewed with upcoming invoice endpoint. It can also be used to implement custom proration logic, such as prorating by day instead of by second, by providing the time that you wish to use for proration calculations')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.SubscriptionItem.quantity","title":"<code>djstripe.models.billing.SubscriptionItem.quantity = models.PositiveIntegerField(null=True, blank=True, help_text='The quantity of the plan to which the customer should be subscribed.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.SubscriptionItem.stripe_class","title":"<code>djstripe.models.billing.SubscriptionItem.stripe_class = stripe.SubscriptionItem</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.SubscriptionItem.subscription","title":"<code>djstripe.models.billing.SubscriptionItem.subscription = StripeForeignKey('Subscription', on_delete=models.CASCADE, related_name='items', help_text='The subscription this subscription item belongs to.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.SubscriptionItem.tax_rates","title":"<code>djstripe.models.billing.SubscriptionItem.tax_rates = models.ManyToManyField('TaxRate', db_table='djstripe_djstripesubscriptionitemtaxrate', related_name='+', blank=True, help_text='The tax rates which apply to this subscription_item. When set, the default_tax_rates on the subscription do not apply to this subscription_item.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.SubscriptionSchedule","title":"<code>djstripe.models.billing.SubscriptionSchedule</code>","text":"<p>               Bases: <code>StripeModel</code></p> <p>Subscription schedules allow you to create and manage the lifecycle of a subscription by predefining expected changes.</p> <p>Stripe documentation: https://stripe.com/docs/api/subscription_schedules?lang=python</p> Source code in <code>djstripe/models/billing.py</code> <pre><code>class SubscriptionSchedule(StripeModel):\n    \"\"\"\n    Subscription schedules allow you to create and manage the lifecycle\n    of a subscription by predefining expected changes.\n\n    Stripe documentation: https://stripe.com/docs/api/subscription_schedules?lang=python\n    \"\"\"\n\n    stripe_class = stripe.SubscriptionSchedule\n    stripe_dashboard_item_name = \"subscription_schedules\"\n\n    canceled_at = StripeDateTimeField(\n        null=True,\n        blank=True,\n        help_text=\"Time at which the subscription schedule was canceled.\",\n    )\n    completed_at = StripeDateTimeField(\n        null=True,\n        blank=True,\n        help_text=\"Time at which the subscription schedule was completed.\",\n    )\n    current_phase = JSONField(\n        null=True,\n        blank=True,\n        help_text=(\n            \"Object representing the start and end dates for the \"\n            \"current phase of the subscription schedule, if it is `active`.\"\n        ),\n    )\n    customer = models.ForeignKey(\n        \"Customer\",\n        on_delete=models.CASCADE,\n        related_name=\"schedules\",\n        help_text=\"The customer who owns the subscription schedule.\",\n    )\n    default_settings = JSONField(\n        null=True,\n        blank=True,\n        help_text=\"Object representing the subscription schedule's default settings.\",\n    )\n    end_behavior = StripeEnumField(\n        enum=enums.SubscriptionScheduleEndBehavior,\n        help_text=(\n            \"Behavior of the subscription schedule and underlying \"\n            \"subscription when it ends.\"\n        ),\n    )\n    phases = JSONField(\n        null=True,\n        blank=True,\n        help_text=\"Configuration for the subscription schedule's phases.\",\n    )\n    released_at = StripeDateTimeField(\n        null=True,\n        blank=True,\n        help_text=\"Time at which the subscription schedule was released.\",\n    )\n    released_subscription = models.ForeignKey(\n        \"Subscription\",\n        null=True,\n        blank=True,\n        on_delete=models.SET_NULL,\n        related_name=\"released_schedules\",\n        help_text=(\n            \"The subscription once managed by this subscription schedule \"\n            \"(if it is released).\"\n        ),\n    )\n    status = StripeEnumField(\n        enum=enums.SubscriptionScheduleStatus,\n        help_text=(\n            \"The present status of the subscription schedule. Possible \"\n            \"values are `not_started`, `active`, `completed`, `released`, and \"\n            \"`canceled`.\"\n        ),\n    )\n    subscription = models.ForeignKey(\n        \"Subscription\",\n        null=True,\n        blank=True,\n        on_delete=models.SET_NULL,\n        related_name=\"subscriptions\",\n        help_text=\"ID of the subscription managed by the subscription schedule.\",\n    )\n\n    def release(self, api_key=None, stripe_account=None, **kwargs):\n        \"\"\"\n        Releases the subscription schedule immediately, which will stop scheduling\n        of its phases, but leave any existing subscription in place.\n        A schedule can only be released if its status is not_started or active.\n        If the subscription schedule is currently associated with a subscription,\n        releasing it will remove its subscription property and set the subscription\u2019s\n        ID to the released_subscription property\n        and returns the Released SubscriptionSchedule.\n        :param api_key: The api key to use for this request.\n            Defaults to djstripe_settings.STRIPE_SECRET_KEY.\n        :type api_key: string\n        :param stripe_account: The optional connected account \\\n            for which this request is being made.\n        :type stripe_account: string\n        \"\"\"\n\n        api_key = api_key or self.default_api_key\n\n        # Prefer passed in stripe_account if set.\n        if not stripe_account:\n            stripe_account = self._get_stripe_account_id(api_key)\n\n        stripe_subscription_schedule = self.stripe_class.release(\n            self.id,\n            api_key=api_key,\n            stripe_account=stripe_account,\n            stripe_version=djstripe_settings.STRIPE_API_VERSION,\n            **kwargs,\n        )\n\n        return SubscriptionSchedule.sync_from_stripe_data(stripe_subscription_schedule)\n\n    def cancel(self, api_key=None, stripe_account=None, **kwargs):\n        \"\"\"\n        Cancels a subscription schedule and its associated subscription immediately\n        (if the subscription schedule has an active subscription). A subscription schedule can only be canceled if its status is not_started or active\n        and returns the Canceled SubscriptionSchedule.\n        :param api_key: The api key to use for this request.\n            Defaults to djstripe_settings.STRIPE_SECRET_KEY.\n        :type api_key: string\n        :param stripe_account: The optional connected account \\\n            for which this request is being made.\n        :type stripe_account: string\n        \"\"\"\n\n        api_key = api_key or self.default_api_key\n\n        # Prefer passed in stripe_account if set.\n        if not stripe_account:\n            stripe_account = self._get_stripe_account_id(api_key)\n\n        stripe_subscription_schedule = self.stripe_class.cancel(\n            self.id,\n            api_key=api_key,\n            stripe_account=stripe_account,\n            stripe_version=djstripe_settings.STRIPE_API_VERSION,\n            **kwargs,\n        )\n\n        return SubscriptionSchedule.sync_from_stripe_data(stripe_subscription_schedule)\n\n    def update(self, api_key=None, stripe_account=None, **kwargs):\n        \"\"\"\n        Updates an existing subscription schedule\n        and returns the updated SubscriptionSchedule.\n        :param api_key: The api key to use for this request.\n            Defaults to djstripe_settings.STRIPE_SECRET_KEY.\n        :type api_key: string\n        :param stripe_account: The optional connected account \\\n            for which this request is being made.\n        :type stripe_account: string\n        \"\"\"\n        stripe_subscription_schedule = self._api_update(\n            api_key=api_key, stripe_account=stripe_account, **kwargs\n        )\n        return SubscriptionSchedule.sync_from_stripe_data(stripe_subscription_schedule)\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.SubscriptionSchedule-attributes","title":"Attributes","text":""},{"location":"reference/models/#djstripe.models.billing.SubscriptionSchedule.canceled_at","title":"<code>djstripe.models.billing.SubscriptionSchedule.canceled_at = StripeDateTimeField(null=True, blank=True, help_text='Time at which the subscription schedule was canceled.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.SubscriptionSchedule.completed_at","title":"<code>djstripe.models.billing.SubscriptionSchedule.completed_at = StripeDateTimeField(null=True, blank=True, help_text='Time at which the subscription schedule was completed.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.SubscriptionSchedule.current_phase","title":"<code>djstripe.models.billing.SubscriptionSchedule.current_phase = JSONField(null=True, blank=True, help_text='Object representing the start and end dates for the current phase of the subscription schedule, if it is `active`.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.SubscriptionSchedule.customer","title":"<code>djstripe.models.billing.SubscriptionSchedule.customer = models.ForeignKey('Customer', on_delete=models.CASCADE, related_name='schedules', help_text='The customer who owns the subscription schedule.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.SubscriptionSchedule.default_settings","title":"<code>djstripe.models.billing.SubscriptionSchedule.default_settings = JSONField(null=True, blank=True, help_text=\"Object representing the subscription schedule's default settings.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.SubscriptionSchedule.end_behavior","title":"<code>djstripe.models.billing.SubscriptionSchedule.end_behavior = StripeEnumField(enum=enums.SubscriptionScheduleEndBehavior, help_text='Behavior of the subscription schedule and underlying subscription when it ends.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.SubscriptionSchedule.phases","title":"<code>djstripe.models.billing.SubscriptionSchedule.phases = JSONField(null=True, blank=True, help_text=\"Configuration for the subscription schedule's phases.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.SubscriptionSchedule.released_at","title":"<code>djstripe.models.billing.SubscriptionSchedule.released_at = StripeDateTimeField(null=True, blank=True, help_text='Time at which the subscription schedule was released.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.SubscriptionSchedule.released_subscription","title":"<code>djstripe.models.billing.SubscriptionSchedule.released_subscription = models.ForeignKey('Subscription', null=True, blank=True, on_delete=models.SET_NULL, related_name='released_schedules', help_text='The subscription once managed by this subscription schedule (if it is released).')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.SubscriptionSchedule.status","title":"<code>djstripe.models.billing.SubscriptionSchedule.status = StripeEnumField(enum=enums.SubscriptionScheduleStatus, help_text='The present status of the subscription schedule. Possible values are `not_started`, `active`, `completed`, `released`, and `canceled`.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.SubscriptionSchedule.stripe_class","title":"<code>djstripe.models.billing.SubscriptionSchedule.stripe_class = stripe.SubscriptionSchedule</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.SubscriptionSchedule.stripe_dashboard_item_name","title":"<code>djstripe.models.billing.SubscriptionSchedule.stripe_dashboard_item_name = 'subscription_schedules'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.SubscriptionSchedule.subscription","title":"<code>djstripe.models.billing.SubscriptionSchedule.subscription = models.ForeignKey('Subscription', null=True, blank=True, on_delete=models.SET_NULL, related_name='subscriptions', help_text='ID of the subscription managed by the subscription schedule.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.SubscriptionSchedule-functions","title":"Functions","text":""},{"location":"reference/models/#djstripe.models.billing.SubscriptionSchedule.cancel","title":"<code>djstripe.models.billing.SubscriptionSchedule.cancel(api_key=None, stripe_account=None, **kwargs)</code>","text":"<p>Cancels a subscription schedule and its associated subscription immediately (if the subscription schedule has an active subscription). A subscription schedule can only be canceled if its status is not_started or active and returns the Canceled SubscriptionSchedule. :param api_key: The api key to use for this request.     Defaults to djstripe_settings.STRIPE_SECRET_KEY. :type api_key: string :param stripe_account: The optional connected account             for which this request is being made. :type stripe_account: string</p> Source code in <code>djstripe/models/billing.py</code> <pre><code>def cancel(self, api_key=None, stripe_account=None, **kwargs):\n    \"\"\"\n    Cancels a subscription schedule and its associated subscription immediately\n    (if the subscription schedule has an active subscription). A subscription schedule can only be canceled if its status is not_started or active\n    and returns the Canceled SubscriptionSchedule.\n    :param api_key: The api key to use for this request.\n        Defaults to djstripe_settings.STRIPE_SECRET_KEY.\n    :type api_key: string\n    :param stripe_account: The optional connected account \\\n        for which this request is being made.\n    :type stripe_account: string\n    \"\"\"\n\n    api_key = api_key or self.default_api_key\n\n    # Prefer passed in stripe_account if set.\n    if not stripe_account:\n        stripe_account = self._get_stripe_account_id(api_key)\n\n    stripe_subscription_schedule = self.stripe_class.cancel(\n        self.id,\n        api_key=api_key,\n        stripe_account=stripe_account,\n        stripe_version=djstripe_settings.STRIPE_API_VERSION,\n        **kwargs,\n    )\n\n    return SubscriptionSchedule.sync_from_stripe_data(stripe_subscription_schedule)\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.SubscriptionSchedule.release","title":"<code>djstripe.models.billing.SubscriptionSchedule.release(api_key=None, stripe_account=None, **kwargs)</code>","text":"<p>Releases the subscription schedule immediately, which will stop scheduling of its phases, but leave any existing subscription in place. A schedule can only be released if its status is not_started or active. If the subscription schedule is currently associated with a subscription, releasing it will remove its subscription property and set the subscription\u2019s ID to the released_subscription property and returns the Released SubscriptionSchedule. :param api_key: The api key to use for this request.     Defaults to djstripe_settings.STRIPE_SECRET_KEY. :type api_key: string :param stripe_account: The optional connected account             for which this request is being made. :type stripe_account: string</p> Source code in <code>djstripe/models/billing.py</code> <pre><code>def release(self, api_key=None, stripe_account=None, **kwargs):\n    \"\"\"\n    Releases the subscription schedule immediately, which will stop scheduling\n    of its phases, but leave any existing subscription in place.\n    A schedule can only be released if its status is not_started or active.\n    If the subscription schedule is currently associated with a subscription,\n    releasing it will remove its subscription property and set the subscription\u2019s\n    ID to the released_subscription property\n    and returns the Released SubscriptionSchedule.\n    :param api_key: The api key to use for this request.\n        Defaults to djstripe_settings.STRIPE_SECRET_KEY.\n    :type api_key: string\n    :param stripe_account: The optional connected account \\\n        for which this request is being made.\n    :type stripe_account: string\n    \"\"\"\n\n    api_key = api_key or self.default_api_key\n\n    # Prefer passed in stripe_account if set.\n    if not stripe_account:\n        stripe_account = self._get_stripe_account_id(api_key)\n\n    stripe_subscription_schedule = self.stripe_class.release(\n        self.id,\n        api_key=api_key,\n        stripe_account=stripe_account,\n        stripe_version=djstripe_settings.STRIPE_API_VERSION,\n        **kwargs,\n    )\n\n    return SubscriptionSchedule.sync_from_stripe_data(stripe_subscription_schedule)\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.SubscriptionSchedule.update","title":"<code>djstripe.models.billing.SubscriptionSchedule.update(api_key=None, stripe_account=None, **kwargs)</code>","text":"<p>Updates an existing subscription schedule and returns the updated SubscriptionSchedule. :param api_key: The api key to use for this request.     Defaults to djstripe_settings.STRIPE_SECRET_KEY. :type api_key: string :param stripe_account: The optional connected account             for which this request is being made. :type stripe_account: string</p> Source code in <code>djstripe/models/billing.py</code> <pre><code>def update(self, api_key=None, stripe_account=None, **kwargs):\n    \"\"\"\n    Updates an existing subscription schedule\n    and returns the updated SubscriptionSchedule.\n    :param api_key: The api key to use for this request.\n        Defaults to djstripe_settings.STRIPE_SECRET_KEY.\n    :type api_key: string\n    :param stripe_account: The optional connected account \\\n        for which this request is being made.\n    :type stripe_account: string\n    \"\"\"\n    stripe_subscription_schedule = self._api_update(\n        api_key=api_key, stripe_account=stripe_account, **kwargs\n    )\n    return SubscriptionSchedule.sync_from_stripe_data(stripe_subscription_schedule)\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.TaxCode","title":"<code>djstripe.models.billing.TaxCode</code>","text":"<p>               Bases: <code>StripeModel</code></p> <p>Tax codes classify goods and services for tax purposes.</p> <p>Stripe documentation: https://stripe.com/docs/api/tax_codes</p> Source code in <code>djstripe/models/billing.py</code> <pre><code>class TaxCode(StripeModel):\n    \"\"\"\n    Tax codes classify goods and services for tax purposes.\n\n    Stripe documentation: https://stripe.com/docs/api/tax_codes\n    \"\"\"\n\n    stripe_class = stripe.TaxCode\n    metadata = None\n\n    name = models.CharField(\n        max_length=128,\n        help_text=\"A short name for the tax code.\",\n    )\n\n    class Meta(StripeModel.Meta):\n        verbose_name = \"Tax Code\"\n\n    def __str__(self):\n        return f\"{self.name}: {self.id}\"\n\n    @classmethod\n    def _find_owner_account(cls, data, api_key=djstripe_settings.STRIPE_SECRET_KEY):\n        # Tax Codes do not belong to any Stripe Account\n        pass\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.TaxCode-attributes","title":"Attributes","text":""},{"location":"reference/models/#djstripe.models.billing.TaxCode.metadata","title":"<code>djstripe.models.billing.TaxCode.metadata = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.TaxCode.name","title":"<code>djstripe.models.billing.TaxCode.name = models.CharField(max_length=128, help_text='A short name for the tax code.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.TaxCode.stripe_class","title":"<code>djstripe.models.billing.TaxCode.stripe_class = stripe.TaxCode</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.TaxCode-classes","title":"Classes","text":""},{"location":"reference/models/#djstripe.models.billing.TaxCode.Meta","title":"<code>djstripe.models.billing.TaxCode.Meta</code>","text":"<p>               Bases: <code>Meta</code></p> Source code in <code>djstripe/models/billing.py</code> <pre><code>class Meta(StripeModel.Meta):\n    verbose_name = \"Tax Code\"\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.TaxCode.Meta-attributes","title":"Attributes","text":"<code>djstripe.models.billing.TaxCode.Meta.verbose_name = 'Tax Code'</code> <code>class-attribute</code> <code>instance-attribute</code>"},{"location":"reference/models/#djstripe.models.billing.TaxCode-functions","title":"Functions","text":""},{"location":"reference/models/#djstripe.models.billing.TaxCode.__str__","title":"<code>djstripe.models.billing.TaxCode.__str__()</code>","text":"Source code in <code>djstripe/models/billing.py</code> <pre><code>def __str__(self):\n    return f\"{self.name}: {self.id}\"\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.TaxId","title":"<code>djstripe.models.billing.TaxId</code>","text":"<p>               Bases: <code>StripeModel</code></p> <p>Add one or multiple tax IDs to a customer. A customer's tax IDs are displayed on invoices and credit notes issued for the customer.</p> <p>Stripe documentation: https://stripe.com/docs/api/customer_tax_ids?lang=python</p> Source code in <code>djstripe/models/billing.py</code> <pre><code>class TaxId(StripeModel):\n    \"\"\"\n    Add one or multiple tax IDs to a customer.\n    A customer's tax IDs are displayed on invoices and\n    credit notes issued for the customer.\n\n    Stripe documentation: https://stripe.com/docs/api/customer_tax_ids?lang=python\n    \"\"\"\n\n    stripe_class = stripe.TaxId\n    description = None\n    metadata = None\n\n    country = models.CharField(\n        max_length=2,\n        help_text=\"Two-letter ISO code representing the country of the tax ID.\",\n    )\n    customer = StripeForeignKey(\n        \"djstripe.customer\", on_delete=models.CASCADE, related_name=\"tax_ids\"\n    )\n    type = StripeEnumField(\n        enum=enums.TaxIdType, help_text=\"The status of this subscription.\"\n    )\n    value = models.CharField(max_length=50, help_text=\"Value of the tax ID.\")\n    verification = JSONField(help_text=\"Tax ID verification information.\")\n\n    def __str__(self):\n        return f\"{enums.TaxIdType.humanize(self.type)} {self.value} ({self.verification.get('status')})\"\n\n    class Meta(StripeModel.Meta):\n        verbose_name = \"Tax ID\"\n\n    @classmethod\n    def _api_create(cls, api_key=djstripe_settings.STRIPE_SECRET_KEY, **kwargs):\n        \"\"\"\n        Call the stripe API's create operation for this model.\n\n        :param api_key: The api key to use for this request. \\\n            Defaults to djstripe_settings.STRIPE_SECRET_KEY.\n        :type api_key: string\n        \"\"\"\n\n        if not kwargs.get(\"id\"):\n            raise KeyError(\"Customer Object ID is missing\")\n\n        try:\n            Customer.objects.get(id=kwargs[\"id\"])\n        except Customer.DoesNotExist:\n            raise\n\n        return stripe.Customer.create_tax_id(api_key=api_key, **kwargs)\n\n    def api_retrieve(self, api_key=None, stripe_account=None):\n        \"\"\"\n        Call the stripe API's retrieve operation for this model.\n        :param api_key: The api key to use for this request. \\\n            Defaults to djstripe_settings.STRIPE_SECRET_KEY.\n        :type api_key: string\n        :param stripe_account: The optional connected account \\\n            for which this request is being made.\n        :type stripe_account: string\n        \"\"\"\n        nested_id = self.id\n        id = self.customer.id\n        api_key = api_key or self.default_api_key\n\n        # Prefer passed in stripe_account if set.\n        if not stripe_account:\n            stripe_account = self._get_stripe_account_id(api_key)\n\n        return stripe.Customer.retrieve_tax_id(\n            id=id,\n            nested_id=nested_id,\n            api_key=api_key,\n            expand=self.expand_fields,\n            stripe_account=stripe_account,\n            stripe_version=djstripe_settings.STRIPE_API_VERSION,\n        )\n\n    @classmethod\n    def api_list(cls, api_key=djstripe_settings.STRIPE_SECRET_KEY, **kwargs):\n        \"\"\"\n        Call the stripe API's list operation for this model.\n        :param api_key: The api key to use for this request. \\\n            Defaults to djstripe_settings.STRIPE_SECRET_KEY.\n        :type api_key: string\n        See Stripe documentation for accepted kwargs for each object.\n        :returns: an iterator over all items in the query\n        \"\"\"\n        # Update kwargs with `expand` param\n        kwargs = cls.get_expand_params(api_key, **kwargs)\n\n        return stripe.Customer.list_tax_ids(\n            api_key=api_key,\n            stripe_version=djstripe_settings.STRIPE_API_VERSION,\n            **kwargs,\n        ).auto_paging_iter()\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.TaxId-attributes","title":"Attributes","text":""},{"location":"reference/models/#djstripe.models.billing.TaxId.country","title":"<code>djstripe.models.billing.TaxId.country = models.CharField(max_length=2, help_text='Two-letter ISO code representing the country of the tax ID.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.TaxId.customer","title":"<code>djstripe.models.billing.TaxId.customer = StripeForeignKey('djstripe.customer', on_delete=models.CASCADE, related_name='tax_ids')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.TaxId.description","title":"<code>djstripe.models.billing.TaxId.description = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.TaxId.metadata","title":"<code>djstripe.models.billing.TaxId.metadata = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.TaxId.stripe_class","title":"<code>djstripe.models.billing.TaxId.stripe_class = stripe.TaxId</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.TaxId.type","title":"<code>djstripe.models.billing.TaxId.type = StripeEnumField(enum=enums.TaxIdType, help_text='The status of this subscription.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.TaxId.value","title":"<code>djstripe.models.billing.TaxId.value = models.CharField(max_length=50, help_text='Value of the tax ID.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.TaxId.verification","title":"<code>djstripe.models.billing.TaxId.verification = JSONField(help_text='Tax ID verification information.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.TaxId-classes","title":"Classes","text":""},{"location":"reference/models/#djstripe.models.billing.TaxId.Meta","title":"<code>djstripe.models.billing.TaxId.Meta</code>","text":"<p>               Bases: <code>Meta</code></p> Source code in <code>djstripe/models/billing.py</code> <pre><code>class Meta(StripeModel.Meta):\n    verbose_name = \"Tax ID\"\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.TaxId.Meta-attributes","title":"Attributes","text":"<code>djstripe.models.billing.TaxId.Meta.verbose_name = 'Tax ID'</code> <code>class-attribute</code> <code>instance-attribute</code>"},{"location":"reference/models/#djstripe.models.billing.TaxId-functions","title":"Functions","text":""},{"location":"reference/models/#djstripe.models.billing.TaxId.__str__","title":"<code>djstripe.models.billing.TaxId.__str__()</code>","text":"Source code in <code>djstripe/models/billing.py</code> <pre><code>def __str__(self):\n    return f\"{enums.TaxIdType.humanize(self.type)} {self.value} ({self.verification.get('status')})\"\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.TaxId.api_list","title":"<code>djstripe.models.billing.TaxId.api_list(api_key=djstripe_settings.STRIPE_SECRET_KEY, **kwargs)</code>  <code>classmethod</code>","text":"<p>Call the stripe API's list operation for this model. :param api_key: The api key to use for this request.             Defaults to djstripe_settings.STRIPE_SECRET_KEY. :type api_key: string See Stripe documentation for accepted kwargs for each object. :returns: an iterator over all items in the query</p> Source code in <code>djstripe/models/billing.py</code> <pre><code>@classmethod\ndef api_list(cls, api_key=djstripe_settings.STRIPE_SECRET_KEY, **kwargs):\n    \"\"\"\n    Call the stripe API's list operation for this model.\n    :param api_key: The api key to use for this request. \\\n        Defaults to djstripe_settings.STRIPE_SECRET_KEY.\n    :type api_key: string\n    See Stripe documentation for accepted kwargs for each object.\n    :returns: an iterator over all items in the query\n    \"\"\"\n    # Update kwargs with `expand` param\n    kwargs = cls.get_expand_params(api_key, **kwargs)\n\n    return stripe.Customer.list_tax_ids(\n        api_key=api_key,\n        stripe_version=djstripe_settings.STRIPE_API_VERSION,\n        **kwargs,\n    ).auto_paging_iter()\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.TaxId.api_retrieve","title":"<code>djstripe.models.billing.TaxId.api_retrieve(api_key=None, stripe_account=None)</code>","text":"<p>Call the stripe API's retrieve operation for this model. :param api_key: The api key to use for this request.             Defaults to djstripe_settings.STRIPE_SECRET_KEY. :type api_key: string :param stripe_account: The optional connected account             for which this request is being made. :type stripe_account: string</p> Source code in <code>djstripe/models/billing.py</code> <pre><code>def api_retrieve(self, api_key=None, stripe_account=None):\n    \"\"\"\n    Call the stripe API's retrieve operation for this model.\n    :param api_key: The api key to use for this request. \\\n        Defaults to djstripe_settings.STRIPE_SECRET_KEY.\n    :type api_key: string\n    :param stripe_account: The optional connected account \\\n        for which this request is being made.\n    :type stripe_account: string\n    \"\"\"\n    nested_id = self.id\n    id = self.customer.id\n    api_key = api_key or self.default_api_key\n\n    # Prefer passed in stripe_account if set.\n    if not stripe_account:\n        stripe_account = self._get_stripe_account_id(api_key)\n\n    return stripe.Customer.retrieve_tax_id(\n        id=id,\n        nested_id=nested_id,\n        api_key=api_key,\n        expand=self.expand_fields,\n        stripe_account=stripe_account,\n        stripe_version=djstripe_settings.STRIPE_API_VERSION,\n    )\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.TaxRate","title":"<code>djstripe.models.billing.TaxRate</code>","text":"<p>               Bases: <code>StripeModel</code></p> <p>Tax rates can be applied to invoices and subscriptions to collect tax.</p> <p>Stripe documentation: https://stripe.com/docs/api/tax_rates?lang=python</p> Source code in <code>djstripe/models/billing.py</code> <pre><code>class TaxRate(StripeModel):\n    \"\"\"\n    Tax rates can be applied to invoices and subscriptions to collect tax.\n\n    Stripe documentation: https://stripe.com/docs/api/tax_rates?lang=python\n    \"\"\"\n\n    stripe_class = stripe.TaxRate\n    stripe_dashboard_item_name = \"tax-rates\"\n\n    active = models.BooleanField(\n        default=True,\n        help_text=(\n            \"Defaults to true. When set to false, this tax rate cannot be \"\n            \"applied to objects in the API, but will still be applied to subscriptions \"\n            \"and invoices that already have it set.\"\n        ),\n    )\n    country = models.CharField(\n        max_length=2,\n        default=\"\",\n        blank=True,\n        help_text=\"Two-letter country code.\",\n    )\n    display_name = models.CharField(\n        max_length=50,\n        default=\"\",\n        blank=True,\n        help_text=(\n            \"The display name of the tax rates as it will appear to your \"\n            \"customer on their receipt email, PDF, and the hosted invoice page.\"\n        ),\n    )\n    inclusive = models.BooleanField(\n        help_text=\"This specifies if the tax rate is inclusive or exclusive.\"\n    )\n    jurisdiction = models.CharField(\n        max_length=50,\n        default=\"\",\n        blank=True,\n        help_text=\"The jurisdiction for the tax rate.\",\n    )\n    percentage = StripePercentField(\n        decimal_places=4,\n        max_digits=7,\n        help_text=\"This represents the tax rate percent out of 100.\",\n    )\n    state = models.CharField(\n        max_length=2,\n        default=\"\",\n        blank=True,\n        help_text=\"ISO 3166-2 subdivision code, without country prefix.\",\n    )\n    tax_type = models.CharField(\n        default=\"\",\n        blank=True,\n        max_length=50,\n        help_text=\"The high-level tax type, such as vat, gst, sales_tax or custom.\",\n    )\n\n    def __str__(self):\n        return f\"{self.display_name} at {self.percentage}%\"\n\n    class Meta(StripeModel.Meta):\n        verbose_name = \"Tax Rate\"\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.TaxRate-attributes","title":"Attributes","text":""},{"location":"reference/models/#djstripe.models.billing.TaxRate.active","title":"<code>djstripe.models.billing.TaxRate.active = models.BooleanField(default=True, help_text='Defaults to true. When set to false, this tax rate cannot be applied to objects in the API, but will still be applied to subscriptions and invoices that already have it set.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.TaxRate.country","title":"<code>djstripe.models.billing.TaxRate.country = models.CharField(max_length=2, default='', blank=True, help_text='Two-letter country code.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.TaxRate.display_name","title":"<code>djstripe.models.billing.TaxRate.display_name = models.CharField(max_length=50, default='', blank=True, help_text='The display name of the tax rates as it will appear to your customer on their receipt email, PDF, and the hosted invoice page.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.TaxRate.inclusive","title":"<code>djstripe.models.billing.TaxRate.inclusive = models.BooleanField(help_text='This specifies if the tax rate is inclusive or exclusive.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.TaxRate.jurisdiction","title":"<code>djstripe.models.billing.TaxRate.jurisdiction = models.CharField(max_length=50, default='', blank=True, help_text='The jurisdiction for the tax rate.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.TaxRate.percentage","title":"<code>djstripe.models.billing.TaxRate.percentage = StripePercentField(decimal_places=4, max_digits=7, help_text='This represents the tax rate percent out of 100.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.TaxRate.state","title":"<code>djstripe.models.billing.TaxRate.state = models.CharField(max_length=2, default='', blank=True, help_text='ISO 3166-2 subdivision code, without country prefix.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.TaxRate.stripe_class","title":"<code>djstripe.models.billing.TaxRate.stripe_class = stripe.TaxRate</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.TaxRate.stripe_dashboard_item_name","title":"<code>djstripe.models.billing.TaxRate.stripe_dashboard_item_name = 'tax-rates'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.TaxRate.tax_type","title":"<code>djstripe.models.billing.TaxRate.tax_type = models.CharField(default='', blank=True, max_length=50, help_text='The high-level tax type, such as vat, gst, sales_tax or custom.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.TaxRate-classes","title":"Classes","text":""},{"location":"reference/models/#djstripe.models.billing.TaxRate.Meta","title":"<code>djstripe.models.billing.TaxRate.Meta</code>","text":"<p>               Bases: <code>Meta</code></p> Source code in <code>djstripe/models/billing.py</code> <pre><code>class Meta(StripeModel.Meta):\n    verbose_name = \"Tax Rate\"\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.TaxRate.Meta-attributes","title":"Attributes","text":"<code>djstripe.models.billing.TaxRate.Meta.verbose_name = 'Tax Rate'</code> <code>class-attribute</code> <code>instance-attribute</code>"},{"location":"reference/models/#djstripe.models.billing.TaxRate-functions","title":"Functions","text":""},{"location":"reference/models/#djstripe.models.billing.TaxRate.__str__","title":"<code>djstripe.models.billing.TaxRate.__str__()</code>","text":"Source code in <code>djstripe/models/billing.py</code> <pre><code>def __str__(self):\n    return f\"{self.display_name} at {self.percentage}%\"\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.UpcomingInvoice","title":"<code>djstripe.models.billing.UpcomingInvoice</code>","text":"<p>               Bases: <code>BaseInvoice</code></p> <p>The preview of an upcoming invoice - does not exist in the Django database.</p> <p>See BaseInvoice.upcoming()</p> <p>Logically it should be set abstract, but that doesn't quite work since we do actually want to instantiate the model and use relations.</p> Source code in <code>djstripe/models/billing.py</code> <pre><code>class UpcomingInvoice(BaseInvoice):\n    \"\"\"\n    The preview of an upcoming invoice - does not exist in the Django database.\n\n    See BaseInvoice.upcoming()\n\n    Logically it should be set abstract, but that doesn't quite work since we\n    do actually want to instantiate the model and use relations.\n    \"\"\"\n\n    default_source = PaymentMethodForeignKey(\n        on_delete=models.SET_NULL,\n        null=True,\n        related_name=\"upcoming_invoices\",\n        help_text=(\n            \"The default payment source for the invoice. \"\n            \"It must belong to the customer associated with the invoice and be \"\n            \"in a chargeable state. If not set, defaults to the subscription's \"\n            \"default source, if any, or to the customer's default source.\"\n        ),\n    )\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n        self._lineitems = []\n        self._default_tax_rates = []\n        self._total_tax_amounts = []\n\n    def get_stripe_dashboard_url(self):\n        return \"\"\n\n    def _attach_objects_hook(\n        self, cls, data, api_key=djstripe_settings.STRIPE_SECRET_KEY, current_ids=None\n    ):\n        super()._attach_objects_hook(\n            cls, data, api_key=api_key, current_ids=current_ids\n        )\n\n        self._lineitems = cls._stripe_object_to_line_items(\n            target_cls=LineItem, data=data, invoice=self, api_key=api_key\n        )\n\n    def _attach_objects_post_save_hook(\n        self,\n        cls,\n        data,\n        api_key=djstripe_settings.STRIPE_SECRET_KEY,\n        pending_relations=None,\n    ):\n        super()._attach_objects_post_save_hook(\n            cls, data, api_key=api_key, pending_relations=pending_relations\n        )\n\n        self._default_tax_rates = cls._stripe_object_to_default_tax_rates(\n            target_cls=TaxRate, data=data, api_key=api_key\n        )\n\n        total_tax_amounts = []\n\n        for tax_amount_data in data.get(\"total_tax_amounts\", []):\n            tax_rate_id = tax_amount_data[\"tax_rate\"]\n            if not isinstance(tax_rate_id, str):\n                tax_rate_id = tax_rate_id[\"tax_rate\"]\n\n            tax_rate = TaxRate._get_or_retrieve(id=tax_rate_id, api_key=api_key)\n\n            tax_amount = DjstripeUpcomingInvoiceTotalTaxAmount(\n                invoice=self,\n                amount=tax_amount_data[\"amount\"],\n                inclusive=tax_amount_data[\"inclusive\"],\n                tax_rate=tax_rate,\n            )\n\n            total_tax_amounts.append(tax_amount)\n\n        self._total_tax_amounts = total_tax_amounts\n\n    @property\n    def invoiceitems(self):\n        \"\"\"\n        Gets the invoice items associated with this upcoming invoice.\n\n        This differs from normal (non-upcoming) invoices, in that upcoming\n        invoices are in-memory and do not persist to the database. Therefore,\n        all of the data comes from the Stripe API itself.\n\n        Instead of returning a normal queryset for the invoiceitems, this will\n        return a mock of a queryset, but with the data fetched from Stripe - It\n        will act like a normal queryset, but mutation will silently fail.\n        \"\"\"\n        # filter lineitems with type=\"invoice_item\" and fetch all the actual InvoiceItem objects\n        items = []\n        for item in self._lineitems:\n            if item.type == \"invoice_item\":\n                items.append(item.invoice_item)\n\n        return QuerySetMock.from_iterable(InvoiceItem, items)\n\n    @property\n    def lineitems(self):\n        \"\"\"\n        Gets the line items associated with this upcoming invoice.\n\n        This differs from normal (non-upcoming) invoices, in that upcoming\n        invoices are in-memory and do not persist to the database. Therefore,\n        all of the data comes from the Stripe API itself.\n\n        Instead of returning a normal queryset for the lineitems, this will\n        return a mock of a queryset, but with the data fetched from Stripe - It\n        will act like a normal queryset, but mutation will silently fail.\n        \"\"\"\n        return QuerySetMock.from_iterable(LineItem, self._lineitems)\n\n    @property\n    def default_tax_rates(self):\n        \"\"\"\n        Gets the default tax rates associated with this upcoming invoice.\n        :return:\n        \"\"\"\n        return QuerySetMock.from_iterable(TaxRate, self._default_tax_rates)\n\n    @property\n    def total_tax_amounts(self):\n        \"\"\"\n        Gets the total tax amounts associated with this upcoming invoice.\n        :return:\n        \"\"\"\n        return QuerySetMock.from_iterable(\n            DjstripeUpcomingInvoiceTotalTaxAmount, self._total_tax_amounts\n        )\n\n    @property\n    def id(self):\n        return None\n\n    @id.setter\n    def id(self, value):\n        return  # noop\n\n    def save(self, *args, **kwargs):\n        return  # noop\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.UpcomingInvoice-attributes","title":"Attributes","text":""},{"location":"reference/models/#djstripe.models.billing.UpcomingInvoice.default_source","title":"<code>djstripe.models.billing.UpcomingInvoice.default_source = PaymentMethodForeignKey(on_delete=models.SET_NULL, null=True, related_name='upcoming_invoices', help_text=\"The default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription's default source, if any, or to the customer's default source.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.UpcomingInvoice.default_tax_rates","title":"<code>djstripe.models.billing.UpcomingInvoice.default_tax_rates</code>  <code>property</code>","text":"<p>Gets the default tax rates associated with this upcoming invoice. :return:</p>"},{"location":"reference/models/#djstripe.models.billing.UpcomingInvoice.id","title":"<code>djstripe.models.billing.UpcomingInvoice.id</code>  <code>property</code> <code>writable</code>","text":""},{"location":"reference/models/#djstripe.models.billing.UpcomingInvoice.invoiceitems","title":"<code>djstripe.models.billing.UpcomingInvoice.invoiceitems</code>  <code>property</code>","text":"<p>Gets the invoice items associated with this upcoming invoice.</p> <p>This differs from normal (non-upcoming) invoices, in that upcoming invoices are in-memory and do not persist to the database. Therefore, all of the data comes from the Stripe API itself.</p> <p>Instead of returning a normal queryset for the invoiceitems, this will return a mock of a queryset, but with the data fetched from Stripe - It will act like a normal queryset, but mutation will silently fail.</p>"},{"location":"reference/models/#djstripe.models.billing.UpcomingInvoice.lineitems","title":"<code>djstripe.models.billing.UpcomingInvoice.lineitems</code>  <code>property</code>","text":"<p>Gets the line items associated with this upcoming invoice.</p> <p>This differs from normal (non-upcoming) invoices, in that upcoming invoices are in-memory and do not persist to the database. Therefore, all of the data comes from the Stripe API itself.</p> <p>Instead of returning a normal queryset for the lineitems, this will return a mock of a queryset, but with the data fetched from Stripe - It will act like a normal queryset, but mutation will silently fail.</p>"},{"location":"reference/models/#djstripe.models.billing.UpcomingInvoice.total_tax_amounts","title":"<code>djstripe.models.billing.UpcomingInvoice.total_tax_amounts</code>  <code>property</code>","text":"<p>Gets the total tax amounts associated with this upcoming invoice. :return:</p>"},{"location":"reference/models/#djstripe.models.billing.UpcomingInvoice-functions","title":"Functions","text":""},{"location":"reference/models/#djstripe.models.billing.UpcomingInvoice.__init__","title":"<code>djstripe.models.billing.UpcomingInvoice.__init__(*args, **kwargs)</code>","text":"Source code in <code>djstripe/models/billing.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    super().__init__(*args, **kwargs)\n\n    self._lineitems = []\n    self._default_tax_rates = []\n    self._total_tax_amounts = []\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.UpcomingInvoice.get_stripe_dashboard_url","title":"<code>djstripe.models.billing.UpcomingInvoice.get_stripe_dashboard_url()</code>","text":"Source code in <code>djstripe/models/billing.py</code> <pre><code>def get_stripe_dashboard_url(self):\n    return \"\"\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.UpcomingInvoice.save","title":"<code>djstripe.models.billing.UpcomingInvoice.save(*args, **kwargs)</code>","text":"Source code in <code>djstripe/models/billing.py</code> <pre><code>def save(self, *args, **kwargs):\n    return  # noop\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.UsageRecord","title":"<code>djstripe.models.billing.UsageRecord</code>","text":"<p>               Bases: <code>StripeModel</code></p> <p>Usage records allow you to continually report usage and metrics to Stripe for metered billing of plans.</p> <p>Stripe documentation: https://stripe.com/docs/api?lang=python#usage_records</p> Source code in <code>djstripe/models/billing.py</code> <pre><code>class UsageRecord(StripeModel):\n    \"\"\"\n    Usage records allow you to continually report usage and metrics to\n    Stripe for metered billing of plans.\n\n    Stripe documentation: https://stripe.com/docs/api?lang=python#usage_records\n    \"\"\"\n\n    description = None\n    metadata = None\n\n    stripe_class = stripe.UsageRecord\n\n    quantity = models.PositiveIntegerField(\n        help_text=\"The quantity of the plan to which the customer should be subscribed.\"\n    )\n    subscription_item = StripeForeignKey(\n        \"SubscriptionItem\",\n        on_delete=models.CASCADE,\n        related_name=\"usage_records\",\n        help_text=\"The subscription item this usage record contains data for.\",\n    )\n    timestamp = StripeDateTimeField(\n        null=True,\n        blank=True,\n        help_text=(\n            \"The timestamp for the usage event. This timestamp must be within the\"\n            \" current billing period of the subscription of the provided\"\n            \" subscription_item.\"\n        ),\n    )\n\n    def __str__(self):\n        return f\"Usage for {self.subscription_item}\"\n\n    @classmethod\n    def _api_create(cls, api_key=djstripe_settings.STRIPE_SECRET_KEY, **kwargs):\n        \"\"\"\n        Call the stripe API's create operation for this model.\n\n        :param api_key: The api key to use for this request. \\\n            Defaults to djstripe_settings.STRIPE_SECRET_KEY.\n        :type api_key: string\n        \"\"\"\n\n        if not kwargs.get(\"id\"):\n            raise KeyError(\"SubscriptionItem Object ID is missing\")\n\n        try:\n            SubscriptionItem.objects.get(id=kwargs[\"id\"])\n        except SubscriptionItem.DoesNotExist:\n            raise\n\n        usage_stripe_data = stripe.SubscriptionItem.create_usage_record(\n            api_key=api_key, **kwargs\n        )\n\n        # ! Hack: there is no way to retrieve a UsageRecord object from Stripe,\n        # ! which is why we create and sync it right here\n        cls.sync_from_stripe_data(usage_stripe_data, api_key=api_key)\n\n        return usage_stripe_data\n\n    @classmethod\n    def create(cls, **kwargs):\n        \"\"\"\n        A wrapper around _api_create() to allow one to create and sync UsageRecord Objects\n        \"\"\"\n        return cls._api_create(**kwargs)\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.UsageRecord-attributes","title":"Attributes","text":""},{"location":"reference/models/#djstripe.models.billing.UsageRecord.description","title":"<code>djstripe.models.billing.UsageRecord.description = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.UsageRecord.metadata","title":"<code>djstripe.models.billing.UsageRecord.metadata = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.UsageRecord.quantity","title":"<code>djstripe.models.billing.UsageRecord.quantity = models.PositiveIntegerField(help_text='The quantity of the plan to which the customer should be subscribed.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.UsageRecord.stripe_class","title":"<code>djstripe.models.billing.UsageRecord.stripe_class = stripe.UsageRecord</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.UsageRecord.subscription_item","title":"<code>djstripe.models.billing.UsageRecord.subscription_item = StripeForeignKey('SubscriptionItem', on_delete=models.CASCADE, related_name='usage_records', help_text='The subscription item this usage record contains data for.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.UsageRecord.timestamp","title":"<code>djstripe.models.billing.UsageRecord.timestamp = StripeDateTimeField(null=True, blank=True, help_text='The timestamp for the usage event. This timestamp must be within the current billing period of the subscription of the provided subscription_item.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.UsageRecord-functions","title":"Functions","text":""},{"location":"reference/models/#djstripe.models.billing.UsageRecord.__str__","title":"<code>djstripe.models.billing.UsageRecord.__str__()</code>","text":"Source code in <code>djstripe/models/billing.py</code> <pre><code>def __str__(self):\n    return f\"Usage for {self.subscription_item}\"\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.UsageRecord.create","title":"<code>djstripe.models.billing.UsageRecord.create(**kwargs)</code>  <code>classmethod</code>","text":"<p>A wrapper around _api_create() to allow one to create and sync UsageRecord Objects</p> Source code in <code>djstripe/models/billing.py</code> <pre><code>@classmethod\ndef create(cls, **kwargs):\n    \"\"\"\n    A wrapper around _api_create() to allow one to create and sync UsageRecord Objects\n    \"\"\"\n    return cls._api_create(**kwargs)\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.UsageRecordSummary","title":"<code>djstripe.models.billing.UsageRecordSummary</code>","text":"<p>               Bases: <code>StripeModel</code></p> <p>Usage record summaries provides usage information that's been summarized from multiple usage records and over a subscription billing period (e.g., 15 usage records in the month of September). Since new usage records can still be added, the returned summary information for the subscription item's ID should be seen as unstable until the subscription billing period ends.</p> <p>Stripe documentation: https://stripe.com/docs/api/usage_records/subscription_item_summary_list?lang=python</p> Source code in <code>djstripe/models/billing.py</code> <pre><code>class UsageRecordSummary(StripeModel):\n    \"\"\"\n    Usage record summaries provides usage information that's been summarized\n    from multiple usage records and over a subscription billing period\n    (e.g., 15 usage records in the month of September).\n    Since new usage records can still be added, the returned summary information for the subscription item's ID\n    should be seen as unstable until the subscription billing period ends.\n\n    Stripe documentation: https://stripe.com/docs/api/usage_records/subscription_item_summary_list?lang=python\n    \"\"\"\n\n    stripe_class = stripe.UsageRecordSummary\n\n    description = None\n    metadata = None\n\n    invoice = StripeForeignKey(\n        \"Invoice\",\n        null=True,\n        blank=True,\n        on_delete=models.CASCADE,\n        related_name=\"usage_record_summaries\",\n    )\n    subscription_item = StripeForeignKey(\n        SubscriptionItem,\n        on_delete=models.CASCADE,\n        related_name=\"usage_record_summaries\",\n        help_text=\"The subscription item this usage record contains data for.\",\n    )\n\n    def __str__(self):\n        return f\"Usage Summary for {self.subscription_item} ({self.invoice})\"\n\n    @classmethod\n    def api_list(cls, api_key=djstripe_settings.STRIPE_SECRET_KEY, **kwargs):\n        \"\"\"\n        Call the stripe API's list operation for this model.\n\n        :param api_key: The api key to use for this request. \\\n            Defaults to djstripe_settings.STRIPE_SECRET_KEY.\n        :type api_key: string\n\n        See Stripe documentation for accepted kwargs for each object.\n\n        :returns: an iterator over all items in the query\n        \"\"\"\n        # Update kwargs with `expand` param\n        kwargs = cls.get_expand_params(api_key, **kwargs)\n\n        if not kwargs.get(\"id\"):\n            raise KeyError(\"SubscriptionItem Object ID is missing\")\n\n        try:\n            SubscriptionItem.objects.get(id=kwargs[\"id\"])\n        except SubscriptionItem.DoesNotExist:\n            raise\n\n        return stripe.SubscriptionItem.list_usage_record_summaries(\n            api_key=api_key,\n            stripe_version=djstripe_settings.STRIPE_API_VERSION,\n            **kwargs,\n        ).auto_paging_iter()\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.UsageRecordSummary-attributes","title":"Attributes","text":""},{"location":"reference/models/#djstripe.models.billing.UsageRecordSummary.description","title":"<code>djstripe.models.billing.UsageRecordSummary.description = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.UsageRecordSummary.invoice","title":"<code>djstripe.models.billing.UsageRecordSummary.invoice = StripeForeignKey('Invoice', null=True, blank=True, on_delete=models.CASCADE, related_name='usage_record_summaries')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.UsageRecordSummary.metadata","title":"<code>djstripe.models.billing.UsageRecordSummary.metadata = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.UsageRecordSummary.stripe_class","title":"<code>djstripe.models.billing.UsageRecordSummary.stripe_class = stripe.UsageRecordSummary</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.UsageRecordSummary.subscription_item","title":"<code>djstripe.models.billing.UsageRecordSummary.subscription_item = StripeForeignKey(SubscriptionItem, on_delete=models.CASCADE, related_name='usage_record_summaries', help_text='The subscription item this usage record contains data for.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.billing.UsageRecordSummary-functions","title":"Functions","text":""},{"location":"reference/models/#djstripe.models.billing.UsageRecordSummary.__str__","title":"<code>djstripe.models.billing.UsageRecordSummary.__str__()</code>","text":"Source code in <code>djstripe/models/billing.py</code> <pre><code>def __str__(self):\n    return f\"Usage Summary for {self.subscription_item} ({self.invoice})\"\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing.UsageRecordSummary.api_list","title":"<code>djstripe.models.billing.UsageRecordSummary.api_list(api_key=djstripe_settings.STRIPE_SECRET_KEY, **kwargs)</code>  <code>classmethod</code>","text":"<p>Call the stripe API's list operation for this model.</p> <p>:param api_key: The api key to use for this request.             Defaults to djstripe_settings.STRIPE_SECRET_KEY. :type api_key: string</p> <p>See Stripe documentation for accepted kwargs for each object.</p> <p>:returns: an iterator over all items in the query</p> Source code in <code>djstripe/models/billing.py</code> <pre><code>@classmethod\ndef api_list(cls, api_key=djstripe_settings.STRIPE_SECRET_KEY, **kwargs):\n    \"\"\"\n    Call the stripe API's list operation for this model.\n\n    :param api_key: The api key to use for this request. \\\n        Defaults to djstripe_settings.STRIPE_SECRET_KEY.\n    :type api_key: string\n\n    See Stripe documentation for accepted kwargs for each object.\n\n    :returns: an iterator over all items in the query\n    \"\"\"\n    # Update kwargs with `expand` param\n    kwargs = cls.get_expand_params(api_key, **kwargs)\n\n    if not kwargs.get(\"id\"):\n        raise KeyError(\"SubscriptionItem Object ID is missing\")\n\n    try:\n        SubscriptionItem.objects.get(id=kwargs[\"id\"])\n    except SubscriptionItem.DoesNotExist:\n        raise\n\n    return stripe.SubscriptionItem.list_usage_record_summaries(\n        api_key=api_key,\n        stripe_version=djstripe_settings.STRIPE_API_VERSION,\n        **kwargs,\n    ).auto_paging_iter()\n</code></pre>"},{"location":"reference/models/#djstripe.models.billing-functions","title":"Functions","text":""},{"location":"reference/models/#connect","title":"Connect","text":""},{"location":"reference/models/#djstripe.models.account-attributes","title":"Attributes","text":""},{"location":"reference/models/#djstripe.models.account-classes","title":"Classes","text":""},{"location":"reference/models/#djstripe.models.account.Account","title":"<code>djstripe.models.account.Account</code>","text":"<p>               Bases: <code>StripeModel</code></p> <p>This is an object representing a Stripe account.</p> <p>You can retrieve it to see properties on the account like its current e-mail address or if the account is enabled yet to make live charges.</p> <p>Stripe documentation: https://stripe.com/docs/api/accounts?lang=python</p> Source code in <code>djstripe/models/account.py</code> <pre><code>class Account(StripeModel):\n    \"\"\"\n    This is an object representing a Stripe account.\n\n    You can retrieve it to see properties on the account like its\n    current e-mail address or if the account is enabled yet to make live charges.\n\n    Stripe documentation: https://stripe.com/docs/api/accounts?lang=python\n    \"\"\"\n\n    stripe_class = stripe.Account\n\n    @classmethod\n    def _create_from_stripe_object(\n        cls,\n        data,\n        current_ids=None,\n        pending_relations=None,\n        save=True,\n        stripe_account=None,\n        api_key=djstripe_settings.STRIPE_SECRET_KEY,\n    ):\n        \"\"\"\n        Set the stripe_account to the id of the Account instance being created.\n\n        This ensures that the foreign-key relations that may exist in stripe are\n        fetched using the appropriate connected account ID.\n        \"\"\"\n        return super()._create_from_stripe_object(\n            data=data,\n            current_ids=current_ids,\n            pending_relations=pending_relations,\n            save=save,\n            stripe_account=data[\"id\"] if not stripe_account else stripe_account,\n            api_key=api_key,\n        )\n\n    @classmethod\n    def get_default_account(cls, api_key=djstripe_settings.STRIPE_SECRET_KEY):\n        # As of API version 2020-03-02, there is no permission that can allow\n        # restricted keys to call GET /v1/account\n        if djstripe_settings.STRIPE_SECRET_KEY.startswith(\"rk_\"):\n            return None\n\n        account_data = cls.stripe_class.retrieve(\n            api_key=api_key, stripe_version=djstripe_settings.STRIPE_API_VERSION\n        )\n\n        return cls._get_or_create_from_stripe_object(account_data, api_key=api_key)[0]\n\n    @classmethod\n    def get_or_retrieve_for_api_key(cls, api_key: str):\n        with transaction.atomic():\n            apikey_instance, _ = APIKey.objects.get_or_create_by_api_key(api_key)\n            if not apikey_instance.djstripe_owner_account:\n                apikey_instance.refresh_account()\n\n            return apikey_instance.djstripe_owner_account\n\n    def __str__(self):\n        settings = self.stripe_data.get(\"settings\") or {}\n        business_profile = self.stripe_data.get(\"business_profile\") or {}\n        return (\n            settings.get(\"dashboard\", {}).get(\"display_name\")\n            or business_profile.get(\"name\")\n            or super().__str__()\n        )\n\n    @property\n    def default_api_key(self) -&gt; str:\n        return self.get_default_api_key()\n\n    @property\n    def business_url(self) -&gt; str:\n        \"\"\"\n        The business's publicly available website.\n        \"\"\"\n        business_profile = self.stripe_data.get(\"business_profile\")\n        if business_profile:\n            return business_profile.get(\"url\", \"\")\n        return \"\"\n\n    @property\n    def country(self) -&gt; str:\n        return self.stripe_data.get(\"country\", \"\")\n\n    @property\n    def default_currency(self) -&gt; str:\n        return self.stripe_data.get(\"default_currency\", \"\")\n\n    @property\n    def email(self) -&gt; str:\n        return self.stripe_data.get(\"email\", \"\")\n\n    @property\n    def type(self) -&gt; str:\n        return self.stripe_data.get(\"type\", \"\")\n\n    def get_stripe_dashboard_url(self) -&gt; str:\n        \"\"\"Get the stripe dashboard url for this object.\"\"\"\n        return (\n            f\"https://dashboard.stripe.com/{self.id}/\"\n            f\"{'test/' if not self.livemode else ''}dashboard\"\n        )\n\n    def api_reject(self, api_key=None, stripe_account=None, **kwargs):\n        \"\"\"\n        Call the stripe API's reject operation for Account model\n\n        :param api_key: The api key to use for this request.\n            Defaults to djstripe_settings.STRIPE_SECRET_KEY.\n        :type api_key: string\n        :param stripe_account: The optional connected account \\\n            for which this request is being made.\n        :type stripe_account: string\n        \"\"\"\n        api_key = api_key or self.default_api_key\n\n        # Prefer passed in stripe_account if set.\n        if not stripe_account:\n            stripe_account = self._get_stripe_account_id(api_key)\n\n        return self.stripe_class.reject(\n            self.id,\n            api_key=api_key,\n            stripe_account=stripe_account,\n            stripe_version=djstripe_settings.STRIPE_API_VERSION,\n            **kwargs,\n        )\n\n    def get_default_api_key(self, livemode: bool = None) -&gt; str:\n        if livemode is None:\n            livemode = self.livemode\n            api_key = APIKey.objects.filter(\n                djstripe_owner_account=self, type=APIKeyType.secret\n            ).first()\n        else:\n            api_key = APIKey.objects.filter(\n                djstripe_owner_account=self, type=APIKeyType.secret, livemode=livemode\n            ).first()\n\n        if api_key:\n            return api_key.secret\n        return djstripe_settings.get_default_api_key(livemode)\n\n    def _attach_objects_post_save_hook(\n        self,\n        cls,\n        data,\n        pending_relations=None,\n        api_key=djstripe_settings.STRIPE_SECRET_KEY,\n    ):\n        super()._attach_objects_post_save_hook(\n            cls, data, pending_relations=pending_relations, api_key=api_key\n        )\n\n        # set the livemode if not returned by data\n        if \"livemode\" not in data.keys() and self.djstripe_owner_account is not None:\n            # Platform Account\n            if self == self.djstripe_owner_account:\n                self.livemode = None\n            else:\n                # Connected Account\n                _, self.livemode = get_api_key_details_by_prefix(api_key)\n\n        # save the updates\n        self.save()\n</code></pre>"},{"location":"reference/models/#djstripe.models.account.Account-attributes","title":"Attributes","text":""},{"location":"reference/models/#djstripe.models.account.Account.business_url","title":"<code>djstripe.models.account.Account.business_url: str</code>  <code>property</code>","text":"<p>The business's publicly available website.</p>"},{"location":"reference/models/#djstripe.models.account.Account.country","title":"<code>djstripe.models.account.Account.country: str</code>  <code>property</code>","text":""},{"location":"reference/models/#djstripe.models.account.Account.default_api_key","title":"<code>djstripe.models.account.Account.default_api_key: str</code>  <code>property</code>","text":""},{"location":"reference/models/#djstripe.models.account.Account.default_currency","title":"<code>djstripe.models.account.Account.default_currency: str</code>  <code>property</code>","text":""},{"location":"reference/models/#djstripe.models.account.Account.email","title":"<code>djstripe.models.account.Account.email: str</code>  <code>property</code>","text":""},{"location":"reference/models/#djstripe.models.account.Account.stripe_class","title":"<code>djstripe.models.account.Account.stripe_class = stripe.Account</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.account.Account.type","title":"<code>djstripe.models.account.Account.type: str</code>  <code>property</code>","text":""},{"location":"reference/models/#djstripe.models.account.Account-functions","title":"Functions","text":""},{"location":"reference/models/#djstripe.models.account.Account.__str__","title":"<code>djstripe.models.account.Account.__str__()</code>","text":"Source code in <code>djstripe/models/account.py</code> <pre><code>def __str__(self):\n    settings = self.stripe_data.get(\"settings\") or {}\n    business_profile = self.stripe_data.get(\"business_profile\") or {}\n    return (\n        settings.get(\"dashboard\", {}).get(\"display_name\")\n        or business_profile.get(\"name\")\n        or super().__str__()\n    )\n</code></pre>"},{"location":"reference/models/#djstripe.models.account.Account.api_reject","title":"<code>djstripe.models.account.Account.api_reject(api_key=None, stripe_account=None, **kwargs)</code>","text":"<p>Call the stripe API's reject operation for Account model</p> <p>:param api_key: The api key to use for this request.     Defaults to djstripe_settings.STRIPE_SECRET_KEY. :type api_key: string :param stripe_account: The optional connected account             for which this request is being made. :type stripe_account: string</p> Source code in <code>djstripe/models/account.py</code> <pre><code>def api_reject(self, api_key=None, stripe_account=None, **kwargs):\n    \"\"\"\n    Call the stripe API's reject operation for Account model\n\n    :param api_key: The api key to use for this request.\n        Defaults to djstripe_settings.STRIPE_SECRET_KEY.\n    :type api_key: string\n    :param stripe_account: The optional connected account \\\n        for which this request is being made.\n    :type stripe_account: string\n    \"\"\"\n    api_key = api_key or self.default_api_key\n\n    # Prefer passed in stripe_account if set.\n    if not stripe_account:\n        stripe_account = self._get_stripe_account_id(api_key)\n\n    return self.stripe_class.reject(\n        self.id,\n        api_key=api_key,\n        stripe_account=stripe_account,\n        stripe_version=djstripe_settings.STRIPE_API_VERSION,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/models/#djstripe.models.account.Account.get_default_account","title":"<code>djstripe.models.account.Account.get_default_account(api_key=djstripe_settings.STRIPE_SECRET_KEY)</code>  <code>classmethod</code>","text":"Source code in <code>djstripe/models/account.py</code> <pre><code>@classmethod\ndef get_default_account(cls, api_key=djstripe_settings.STRIPE_SECRET_KEY):\n    # As of API version 2020-03-02, there is no permission that can allow\n    # restricted keys to call GET /v1/account\n    if djstripe_settings.STRIPE_SECRET_KEY.startswith(\"rk_\"):\n        return None\n\n    account_data = cls.stripe_class.retrieve(\n        api_key=api_key, stripe_version=djstripe_settings.STRIPE_API_VERSION\n    )\n\n    return cls._get_or_create_from_stripe_object(account_data, api_key=api_key)[0]\n</code></pre>"},{"location":"reference/models/#djstripe.models.account.Account.get_default_api_key","title":"<code>djstripe.models.account.Account.get_default_api_key(livemode=None)</code>","text":"Source code in <code>djstripe/models/account.py</code> <pre><code>def get_default_api_key(self, livemode: bool = None) -&gt; str:\n    if livemode is None:\n        livemode = self.livemode\n        api_key = APIKey.objects.filter(\n            djstripe_owner_account=self, type=APIKeyType.secret\n        ).first()\n    else:\n        api_key = APIKey.objects.filter(\n            djstripe_owner_account=self, type=APIKeyType.secret, livemode=livemode\n        ).first()\n\n    if api_key:\n        return api_key.secret\n    return djstripe_settings.get_default_api_key(livemode)\n</code></pre>"},{"location":"reference/models/#djstripe.models.account.Account.get_or_retrieve_for_api_key","title":"<code>djstripe.models.account.Account.get_or_retrieve_for_api_key(api_key)</code>  <code>classmethod</code>","text":"Source code in <code>djstripe/models/account.py</code> <pre><code>@classmethod\ndef get_or_retrieve_for_api_key(cls, api_key: str):\n    with transaction.atomic():\n        apikey_instance, _ = APIKey.objects.get_or_create_by_api_key(api_key)\n        if not apikey_instance.djstripe_owner_account:\n            apikey_instance.refresh_account()\n\n        return apikey_instance.djstripe_owner_account\n</code></pre>"},{"location":"reference/models/#djstripe.models.account.Account.get_stripe_dashboard_url","title":"<code>djstripe.models.account.Account.get_stripe_dashboard_url()</code>","text":"<p>Get the stripe dashboard url for this object.</p> Source code in <code>djstripe/models/account.py</code> <pre><code>def get_stripe_dashboard_url(self) -&gt; str:\n    \"\"\"Get the stripe dashboard url for this object.\"\"\"\n    return (\n        f\"https://dashboard.stripe.com/{self.id}/\"\n        f\"{'test/' if not self.livemode else ''}dashboard\"\n    )\n</code></pre>"},{"location":"reference/models/#djstripe.models.account-functions","title":"Functions","text":""},{"location":"reference/models/#djstripe.models.connect-attributes","title":"Attributes","text":""},{"location":"reference/models/#djstripe.models.connect-classes","title":"Classes","text":""},{"location":"reference/models/#djstripe.models.connect.ApplicationFee","title":"<code>djstripe.models.connect.ApplicationFee</code>","text":"<p>               Bases: <code>StripeModel</code></p> <p>When you collect a transaction fee on top of a charge made for your user (using Connect), an ApplicationFee is created in your account.</p> <p>Please note the model field charge exists on the Stripe Connected Account while the application_fee modelfield on Charge model exists on the Platform Account!</p> <p>Stripe documentation: https://stripe.com/docs/api?lang=python#application_fees</p> Source code in <code>djstripe/models/connect.py</code> <pre><code>class ApplicationFee(StripeModel):\n    \"\"\"\n    When you collect a transaction fee on top of a charge made for your\n    user (using Connect), an ApplicationFee is created in your account.\n\n    Please note the model field charge exists on the Stripe Connected Account\n    while the application_fee modelfield on Charge model exists on the Platform Account!\n\n    Stripe documentation: https://stripe.com/docs/api?lang=python#application_fees\n    \"\"\"\n\n    stripe_class = stripe.ApplicationFee\n    account = StripeForeignKey(\n        \"Account\",\n        on_delete=models.PROTECT,\n        related_name=\"application_fees\",\n        help_text=\"ID of the Stripe account this fee was taken from.\",\n    )\n    amount = StripeQuantumCurrencyAmountField(help_text=\"Amount earned, in cents.\")\n    amount_refunded = StripeQuantumCurrencyAmountField(\n        help_text=(\n            \"Amount in cents refunded (can be less than the amount attribute \"\n            \"on the fee if a partial refund was issued)\"\n        )\n    )\n    # TODO application = ...\n    # balance_transaction exists on the platform account\n    balance_transaction = StripeForeignKey(\n        \"BalanceTransaction\",\n        on_delete=models.CASCADE,\n        help_text=(\n            \"Balance transaction that describes the impact on your account balance.\"\n        ),\n    )\n    # charge exists on the Stripe Connected Account and not the Platform Account\n    charge = StripeForeignKey(\n        \"Charge\",\n        on_delete=models.CASCADE,\n        help_text=\"The charge that the application fee was taken from.\",\n    )\n    currency = StripeCurrencyCodeField()\n    # TODO originating_transaction = ... (refs. both Charge and Transfer)\n    refunded = models.BooleanField(\n        help_text=(\n            \"Whether the fee has been fully refunded. If the fee is only \"\n            \"partially refunded, this attribute will still be false.\"\n        )\n    )\n</code></pre>"},{"location":"reference/models/#djstripe.models.connect.ApplicationFee-attributes","title":"Attributes","text":""},{"location":"reference/models/#djstripe.models.connect.ApplicationFee.account","title":"<code>djstripe.models.connect.ApplicationFee.account = StripeForeignKey('Account', on_delete=models.PROTECT, related_name='application_fees', help_text='ID of the Stripe account this fee was taken from.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.connect.ApplicationFee.amount","title":"<code>djstripe.models.connect.ApplicationFee.amount = StripeQuantumCurrencyAmountField(help_text='Amount earned, in cents.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.connect.ApplicationFee.amount_refunded","title":"<code>djstripe.models.connect.ApplicationFee.amount_refunded = StripeQuantumCurrencyAmountField(help_text='Amount in cents refunded (can be less than the amount attribute on the fee if a partial refund was issued)')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.connect.ApplicationFee.balance_transaction","title":"<code>djstripe.models.connect.ApplicationFee.balance_transaction = StripeForeignKey('BalanceTransaction', on_delete=models.CASCADE, help_text='Balance transaction that describes the impact on your account balance.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.connect.ApplicationFee.charge","title":"<code>djstripe.models.connect.ApplicationFee.charge = StripeForeignKey('Charge', on_delete=models.CASCADE, help_text='The charge that the application fee was taken from.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.connect.ApplicationFee.currency","title":"<code>djstripe.models.connect.ApplicationFee.currency = StripeCurrencyCodeField()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.connect.ApplicationFee.refunded","title":"<code>djstripe.models.connect.ApplicationFee.refunded = models.BooleanField(help_text='Whether the fee has been fully refunded. If the fee is only partially refunded, this attribute will still be false.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.connect.ApplicationFee.stripe_class","title":"<code>djstripe.models.connect.ApplicationFee.stripe_class = stripe.ApplicationFee</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.connect.ApplicationFeeRefund","title":"<code>djstripe.models.connect.ApplicationFeeRefund</code>","text":"<p>               Bases: <code>StripeModel</code></p> <p>ApplicationFeeRefund objects allow you to refund an ApplicationFee that has previously been created but not yet refunded. Funds will be refunded to the Stripe account from which the fee was originally collected.</p> <p>Stripe documentation: https://stripe.com/docs/api?lang=python#fee_refunds</p> Source code in <code>djstripe/models/connect.py</code> <pre><code>class ApplicationFeeRefund(StripeModel):\n    \"\"\"\n    ApplicationFeeRefund objects allow you to refund an ApplicationFee that\n    has previously been created but not yet refunded.\n    Funds will be refunded to the Stripe account from which the fee was\n    originally collected.\n\n    Stripe documentation: https://stripe.com/docs/api?lang=python#fee_refunds\n    \"\"\"\n\n    description = None\n    stripe_class = stripe.ApplicationFeeRefund\n\n    amount = StripeQuantumCurrencyAmountField(help_text=\"Amount refunded, in cents.\")\n    balance_transaction = StripeForeignKey(\n        \"BalanceTransaction\",\n        on_delete=models.CASCADE,\n        help_text=(\n            \"Balance transaction that describes the impact on your account balance.\"\n        ),\n    )\n    currency = StripeCurrencyCodeField()\n    fee = StripeForeignKey(\n        \"ApplicationFee\",\n        on_delete=models.CASCADE,\n        related_name=\"refunds\",\n        help_text=\"The application fee that was refunded\",\n    )\n</code></pre>"},{"location":"reference/models/#djstripe.models.connect.ApplicationFeeRefund-attributes","title":"Attributes","text":""},{"location":"reference/models/#djstripe.models.connect.ApplicationFeeRefund.amount","title":"<code>djstripe.models.connect.ApplicationFeeRefund.amount = StripeQuantumCurrencyAmountField(help_text='Amount refunded, in cents.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.connect.ApplicationFeeRefund.balance_transaction","title":"<code>djstripe.models.connect.ApplicationFeeRefund.balance_transaction = StripeForeignKey('BalanceTransaction', on_delete=models.CASCADE, help_text='Balance transaction that describes the impact on your account balance.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.connect.ApplicationFeeRefund.currency","title":"<code>djstripe.models.connect.ApplicationFeeRefund.currency = StripeCurrencyCodeField()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.connect.ApplicationFeeRefund.description","title":"<code>djstripe.models.connect.ApplicationFeeRefund.description = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.connect.ApplicationFeeRefund.fee","title":"<code>djstripe.models.connect.ApplicationFeeRefund.fee = StripeForeignKey('ApplicationFee', on_delete=models.CASCADE, related_name='refunds', help_text='The application fee that was refunded')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.connect.ApplicationFeeRefund.stripe_class","title":"<code>djstripe.models.connect.ApplicationFeeRefund.stripe_class = stripe.ApplicationFeeRefund</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.connect.Transfer","title":"<code>djstripe.models.connect.Transfer</code>","text":"<p>               Bases: <code>StripeModel</code></p> <p>When Stripe sends you money or you initiate a transfer to a bank account, debit card, or connected Stripe account, a transfer object will be created.</p> <p>Stripe documentation: https://stripe.com/docs/api?lang=python#transfers</p> Source code in <code>djstripe/models/connect.py</code> <pre><code>class Transfer(StripeModel):\n    \"\"\"\n    When Stripe sends you money or you initiate a transfer to a bank account,\n    debit card, or connected Stripe account, a transfer object will be created.\n\n    Stripe documentation: https://stripe.com/docs/api?lang=python#transfers\n    \"\"\"\n\n    stripe_class = stripe.Transfer\n    expand_fields = [\"balance_transaction\"]\n    stripe_dashboard_item_name = \"transfers\"\n\n    objects = TransferManager()\n\n    amount = StripeDecimalCurrencyAmountField(help_text=\"The amount transferred\")\n    amount_reversed = StripeDecimalCurrencyAmountField(\n        null=True,\n        blank=True,\n        help_text=(\n            \"The amount (as decimal) reversed (can be less than the amount \"\n            \"attribute on the transfer if a partial reversal was issued).\"\n        ),\n    )\n    balance_transaction = StripeForeignKey(\n        \"BalanceTransaction\",\n        on_delete=models.SET_NULL,\n        null=True,\n        blank=True,\n        help_text=(\n            \"Balance transaction that describes the impact on your account balance.\"\n        ),\n    )\n    currency = StripeCurrencyCodeField()\n\n    destination = StripeIdField(\n        max_length=255,\n        null=True,\n        help_text=(\n            \"ID of the bank account, card, or Stripe account the transfer was sent to.\"\n        ),\n    )\n\n    # todo implement payment model (for some reason py ids are showing up in the charge model)\n    destination_payment = StripeIdField(\n        null=True,\n        blank=True,\n        help_text=(\n            \"If the destination is a Stripe account, this will be the ID of the \"\n            \"payment that the destination account received for the transfer.\"\n        ),\n    )\n    reversed = models.BooleanField(\n        default=False,\n        help_text=(\n            \"Whether or not the transfer has been fully reversed. \"\n            \"If the transfer is only partially reversed, this attribute will still \"\n            \"be false.\"\n        ),\n    )\n    source_transaction = StripeIdField(\n        null=True,\n        help_text=(\n            \"ID of the charge (or other transaction) that was used to fund \"\n            \"the transfer. If null, the transfer was funded from the available balance.\"\n        ),\n    )\n    source_type = StripeEnumField(\n        enum=enums.LegacySourceType,\n        help_text=\"The source balance from which this transfer came.\",\n    )\n    transfer_group = models.CharField(\n        max_length=255,\n        default=\"\",\n        blank=True,\n        help_text=\"A string that identifies this transaction as part of a group.\",\n    )\n\n    @property\n    def fee(self):\n        if self.balance_transaction:\n            return self.balance_transaction.fee\n\n    def __str__(self):\n        amount = get_friendly_currency_amount(self.amount, self.currency)\n        if self.reversed:\n            # Complete Reversal\n            return f\"{amount} Reversed\"\n        elif self.amount_reversed:\n            # Partial Reversal\n            return f\"{amount} Partially Reversed\"\n        # No Reversal\n        return f\"{amount}\"\n\n    def _attach_objects_post_save_hook(\n        self,\n        cls,\n        data,\n        api_key=djstripe_settings.STRIPE_SECRET_KEY,\n        pending_relations=None,\n    ):\n        \"\"\"\n        Iterate over reversals on the Transfer object to create and/or sync\n        TransferReversal objects\n        \"\"\"\n\n        super()._attach_objects_post_save_hook(\n            cls, data, api_key=api_key, pending_relations=pending_relations\n        )\n\n        # Transfer Reversals exist as a list on the Transfer Object\n        for reversals_data in data.get(\"reversals\").auto_paging_iter():\n            TransferReversal.sync_from_stripe_data(reversals_data, api_key=api_key)\n\n    def get_stripe_dashboard_url(self) -&gt; str:\n        return (\n            f\"{self._get_base_stripe_dashboard_url()}\"\n            f\"connect/{self.stripe_dashboard_item_name}/{self.id}\"\n        )\n</code></pre>"},{"location":"reference/models/#djstripe.models.connect.Transfer-attributes","title":"Attributes","text":""},{"location":"reference/models/#djstripe.models.connect.Transfer.amount","title":"<code>djstripe.models.connect.Transfer.amount = StripeDecimalCurrencyAmountField(help_text='The amount transferred')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.connect.Transfer.amount_reversed","title":"<code>djstripe.models.connect.Transfer.amount_reversed = StripeDecimalCurrencyAmountField(null=True, blank=True, help_text='The amount (as decimal) reversed (can be less than the amount attribute on the transfer if a partial reversal was issued).')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.connect.Transfer.balance_transaction","title":"<code>djstripe.models.connect.Transfer.balance_transaction = StripeForeignKey('BalanceTransaction', on_delete=models.SET_NULL, null=True, blank=True, help_text='Balance transaction that describes the impact on your account balance.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.connect.Transfer.currency","title":"<code>djstripe.models.connect.Transfer.currency = StripeCurrencyCodeField()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.connect.Transfer.destination","title":"<code>djstripe.models.connect.Transfer.destination = StripeIdField(max_length=255, null=True, help_text='ID of the bank account, card, or Stripe account the transfer was sent to.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.connect.Transfer.destination_payment","title":"<code>djstripe.models.connect.Transfer.destination_payment = StripeIdField(null=True, blank=True, help_text='If the destination is a Stripe account, this will be the ID of the payment that the destination account received for the transfer.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.connect.Transfer.expand_fields","title":"<code>djstripe.models.connect.Transfer.expand_fields = ['balance_transaction']</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.connect.Transfer.fee","title":"<code>djstripe.models.connect.Transfer.fee</code>  <code>property</code>","text":""},{"location":"reference/models/#djstripe.models.connect.Transfer.objects","title":"<code>djstripe.models.connect.Transfer.objects = TransferManager()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.connect.Transfer.reversed","title":"<code>djstripe.models.connect.Transfer.reversed = models.BooleanField(default=False, help_text='Whether or not the transfer has been fully reversed. If the transfer is only partially reversed, this attribute will still be false.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.connect.Transfer.source_transaction","title":"<code>djstripe.models.connect.Transfer.source_transaction = StripeIdField(null=True, help_text='ID of the charge (or other transaction) that was used to fund the transfer. If null, the transfer was funded from the available balance.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.connect.Transfer.source_type","title":"<code>djstripe.models.connect.Transfer.source_type = StripeEnumField(enum=enums.LegacySourceType, help_text='The source balance from which this transfer came.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.connect.Transfer.stripe_class","title":"<code>djstripe.models.connect.Transfer.stripe_class = stripe.Transfer</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.connect.Transfer.stripe_dashboard_item_name","title":"<code>djstripe.models.connect.Transfer.stripe_dashboard_item_name = 'transfers'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.connect.Transfer.transfer_group","title":"<code>djstripe.models.connect.Transfer.transfer_group = models.CharField(max_length=255, default='', blank=True, help_text='A string that identifies this transaction as part of a group.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.connect.Transfer-functions","title":"Functions","text":""},{"location":"reference/models/#djstripe.models.connect.Transfer.__str__","title":"<code>djstripe.models.connect.Transfer.__str__()</code>","text":"Source code in <code>djstripe/models/connect.py</code> <pre><code>def __str__(self):\n    amount = get_friendly_currency_amount(self.amount, self.currency)\n    if self.reversed:\n        # Complete Reversal\n        return f\"{amount} Reversed\"\n    elif self.amount_reversed:\n        # Partial Reversal\n        return f\"{amount} Partially Reversed\"\n    # No Reversal\n    return f\"{amount}\"\n</code></pre>"},{"location":"reference/models/#djstripe.models.connect.Transfer.get_stripe_dashboard_url","title":"<code>djstripe.models.connect.Transfer.get_stripe_dashboard_url()</code>","text":"Source code in <code>djstripe/models/connect.py</code> <pre><code>def get_stripe_dashboard_url(self) -&gt; str:\n    return (\n        f\"{self._get_base_stripe_dashboard_url()}\"\n        f\"connect/{self.stripe_dashboard_item_name}/{self.id}\"\n    )\n</code></pre>"},{"location":"reference/models/#djstripe.models.connect.TransferReversal","title":"<code>djstripe.models.connect.TransferReversal</code>","text":"<p>               Bases: <code>StripeModel</code></p> <p>Stripe documentation: https://stripe.com/docs/api?lang=python#transfer_reversals</p> Source code in <code>djstripe/models/connect.py</code> <pre><code>class TransferReversal(StripeModel):\n    \"\"\"\n    Stripe documentation: https://stripe.com/docs/api?lang=python#transfer_reversals\n    \"\"\"\n\n    expand_fields = [\"balance_transaction\", \"transfer\"]\n    stripe_dashboard_item_name = \"transfer_reversals\"\n\n    # TransferReversal classmethods are derived from\n    # and attached to the stripe.Transfer class\n    stripe_class = stripe.Transfer\n\n    amount = StripeQuantumCurrencyAmountField(help_text=\"Amount, in cents.\")\n    balance_transaction = StripeForeignKey(\n        \"BalanceTransaction\",\n        on_delete=models.SET_NULL,\n        null=True,\n        blank=True,\n        related_name=\"transfer_reversals\",\n        help_text=(\n            \"Balance transaction that describes the impact on your account balance.\"\n        ),\n    )\n    currency = StripeCurrencyCodeField()\n    transfer = StripeForeignKey(\n        \"Transfer\",\n        on_delete=models.CASCADE,\n        help_text=\"The transfer that was reversed.\",\n        related_name=\"reversals\",\n    )\n\n    def __str__(self):\n        return str(self.transfer)\n\n    @classmethod\n    def _api_create(cls, api_key=djstripe_settings.STRIPE_SECRET_KEY, **kwargs):\n        \"\"\"\n        Call the stripe API's create operation for this model.\n        :param api_key: The api key to use for this request. \\\n            Defaults to djstripe_settings.STRIPE_SECRET_KEY.\n        :type api_key: string\n        \"\"\"\n\n        if not kwargs.get(\"id\"):\n            raise KeyError(\"Transfer Object ID is missing\")\n\n        try:\n            Transfer.objects.get(id=kwargs[\"id\"])\n        except Transfer.DoesNotExist:\n            raise\n\n        return stripe.Transfer.create_reversal(\n            api_key=api_key,\n            stripe_version=djstripe_settings.STRIPE_API_VERSION,\n            **kwargs,\n        )\n\n    def api_retrieve(self, api_key=None, stripe_account=None):\n        \"\"\"\n        Call the stripe API's retrieve operation for this model.\n        :param api_key: The api key to use for this request. \\\n            Defaults to djstripe_settings.STRIPE_SECRET_KEY.\n        :type api_key: string\n        :param stripe_account: The optional connected account \\\n            for which this request is being made.\n        :type stripe_account: string\n        \"\"\"\n        nested_id = self.id\n        id = self.transfer.id\n        api_key = api_key or self.default_api_key\n\n        # Prefer passed in stripe_account if set.\n        if not stripe_account:\n            stripe_account = self._get_stripe_account_id(api_key)\n\n        return stripe.Transfer.retrieve_reversal(\n            id=id,\n            nested_id=nested_id,\n            api_key=api_key,\n            stripe_version=djstripe_settings.STRIPE_API_VERSION,\n            expand=self.expand_fields,\n            stripe_account=stripe_account,\n        )\n\n    @classmethod\n    def api_list(cls, api_key=djstripe_settings.STRIPE_SECRET_KEY, **kwargs):\n        \"\"\"\n        Call the stripe API's list operation for this model.\n        :param api_key: The api key to use for this request. \\\n            Defaults to djstripe_settings.STRIPE_SECRET_KEY.\n        :type api_key: string\n        See Stripe documentation for accepted kwargs for each object.\n        :returns: an iterator over all items in the query\n        \"\"\"\n        # Update kwargs with `expand` param\n        kwargs = cls.get_expand_params(api_key, **kwargs)\n\n        return stripe.Transfer.list_reversals(\n            api_key=api_key,\n            stripe_version=djstripe_settings.STRIPE_API_VERSION,\n            **kwargs,\n        ).auto_paging_iter()\n\n    @classmethod\n    def is_valid_object(cls, data):\n        \"\"\"\n        Returns whether the data is a valid object for the class\n        \"\"\"\n        return data and data.get(\"object\") == \"transfer_reversal\"\n</code></pre>"},{"location":"reference/models/#djstripe.models.connect.TransferReversal-attributes","title":"Attributes","text":""},{"location":"reference/models/#djstripe.models.connect.TransferReversal.amount","title":"<code>djstripe.models.connect.TransferReversal.amount = StripeQuantumCurrencyAmountField(help_text='Amount, in cents.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.connect.TransferReversal.balance_transaction","title":"<code>djstripe.models.connect.TransferReversal.balance_transaction = StripeForeignKey('BalanceTransaction', on_delete=models.SET_NULL, null=True, blank=True, related_name='transfer_reversals', help_text='Balance transaction that describes the impact on your account balance.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.connect.TransferReversal.currency","title":"<code>djstripe.models.connect.TransferReversal.currency = StripeCurrencyCodeField()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.connect.TransferReversal.expand_fields","title":"<code>djstripe.models.connect.TransferReversal.expand_fields = ['balance_transaction', 'transfer']</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.connect.TransferReversal.stripe_class","title":"<code>djstripe.models.connect.TransferReversal.stripe_class = stripe.Transfer</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.connect.TransferReversal.stripe_dashboard_item_name","title":"<code>djstripe.models.connect.TransferReversal.stripe_dashboard_item_name = 'transfer_reversals'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.connect.TransferReversal.transfer","title":"<code>djstripe.models.connect.TransferReversal.transfer = StripeForeignKey('Transfer', on_delete=models.CASCADE, help_text='The transfer that was reversed.', related_name='reversals')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.connect.TransferReversal-functions","title":"Functions","text":""},{"location":"reference/models/#djstripe.models.connect.TransferReversal.__str__","title":"<code>djstripe.models.connect.TransferReversal.__str__()</code>","text":"Source code in <code>djstripe/models/connect.py</code> <pre><code>def __str__(self):\n    return str(self.transfer)\n</code></pre>"},{"location":"reference/models/#djstripe.models.connect.TransferReversal.api_list","title":"<code>djstripe.models.connect.TransferReversal.api_list(api_key=djstripe_settings.STRIPE_SECRET_KEY, **kwargs)</code>  <code>classmethod</code>","text":"<p>Call the stripe API's list operation for this model. :param api_key: The api key to use for this request.             Defaults to djstripe_settings.STRIPE_SECRET_KEY. :type api_key: string See Stripe documentation for accepted kwargs for each object. :returns: an iterator over all items in the query</p> Source code in <code>djstripe/models/connect.py</code> <pre><code>@classmethod\ndef api_list(cls, api_key=djstripe_settings.STRIPE_SECRET_KEY, **kwargs):\n    \"\"\"\n    Call the stripe API's list operation for this model.\n    :param api_key: The api key to use for this request. \\\n        Defaults to djstripe_settings.STRIPE_SECRET_KEY.\n    :type api_key: string\n    See Stripe documentation for accepted kwargs for each object.\n    :returns: an iterator over all items in the query\n    \"\"\"\n    # Update kwargs with `expand` param\n    kwargs = cls.get_expand_params(api_key, **kwargs)\n\n    return stripe.Transfer.list_reversals(\n        api_key=api_key,\n        stripe_version=djstripe_settings.STRIPE_API_VERSION,\n        **kwargs,\n    ).auto_paging_iter()\n</code></pre>"},{"location":"reference/models/#djstripe.models.connect.TransferReversal.api_retrieve","title":"<code>djstripe.models.connect.TransferReversal.api_retrieve(api_key=None, stripe_account=None)</code>","text":"<p>Call the stripe API's retrieve operation for this model. :param api_key: The api key to use for this request.             Defaults to djstripe_settings.STRIPE_SECRET_KEY. :type api_key: string :param stripe_account: The optional connected account             for which this request is being made. :type stripe_account: string</p> Source code in <code>djstripe/models/connect.py</code> <pre><code>def api_retrieve(self, api_key=None, stripe_account=None):\n    \"\"\"\n    Call the stripe API's retrieve operation for this model.\n    :param api_key: The api key to use for this request. \\\n        Defaults to djstripe_settings.STRIPE_SECRET_KEY.\n    :type api_key: string\n    :param stripe_account: The optional connected account \\\n        for which this request is being made.\n    :type stripe_account: string\n    \"\"\"\n    nested_id = self.id\n    id = self.transfer.id\n    api_key = api_key or self.default_api_key\n\n    # Prefer passed in stripe_account if set.\n    if not stripe_account:\n        stripe_account = self._get_stripe_account_id(api_key)\n\n    return stripe.Transfer.retrieve_reversal(\n        id=id,\n        nested_id=nested_id,\n        api_key=api_key,\n        stripe_version=djstripe_settings.STRIPE_API_VERSION,\n        expand=self.expand_fields,\n        stripe_account=stripe_account,\n    )\n</code></pre>"},{"location":"reference/models/#djstripe.models.connect.TransferReversal.is_valid_object","title":"<code>djstripe.models.connect.TransferReversal.is_valid_object(data)</code>  <code>classmethod</code>","text":"<p>Returns whether the data is a valid object for the class</p> Source code in <code>djstripe/models/connect.py</code> <pre><code>@classmethod\ndef is_valid_object(cls, data):\n    \"\"\"\n    Returns whether the data is a valid object for the class\n    \"\"\"\n    return data and data.get(\"object\") == \"transfer_reversal\"\n</code></pre>"},{"location":"reference/models/#djstripe.models.connect-functions","title":"Functions","text":""},{"location":"reference/models/#fraud","title":"Fraud","text":""},{"location":"reference/models/#orders","title":"Orders","text":""},{"location":"reference/models/#djstripe.models.orders-classes","title":"Classes","text":""},{"location":"reference/models/#djstripe.models.orders.Order","title":"<code>djstripe.models.orders.Order</code>","text":"<p>               Bases: <code>StripeModel</code></p> <p>An Order describes a purchase being made by a customer, including the products &amp; quantities being purchased, the order status, the payment information, and the billing/shipping details.</p> <p>Stripe documentation: https://stripe.com/docs/api/orders_v2/object?lang=python</p> Source code in <code>djstripe/models/orders.py</code> <pre><code>class Order(StripeModel):\n    \"\"\"\n    An Order describes a purchase being made by a customer,\n    including the products &amp; quantities being purchased, the order status,\n    the payment information, and the billing/shipping details.\n\n    Stripe documentation: https://stripe.com/docs/api/orders_v2/object?lang=python\n    \"\"\"\n\n    stripe_class = stripe.Order\n    expand_fields = [\"customer\", \"line_items\", \"discounts\", \"total_details.breakdown\"]\n    stripe_dashboard_item_name = \"orders\"\n\n    amount_subtotal = StripeQuantumCurrencyAmountField(\n        help_text=(\n            \"Order cost before any discounts or taxes are applied. A positive integer\"\n            \" representing the subtotal of the order in the smallest currency unit\"\n            \" (e.g., 100 cents to charge $1.00 or 100 to charge \u00a5100, a zero-decimal\"\n            \" currency).\"\n        )\n    )\n    amount_total = StripeQuantumCurrencyAmountField(\n        help_text=(\n            \"Total order cost after discounts and taxes are applied. A positive integer\"\n            \" representing the cost of the order in the smallest currency unit (e.g.,\"\n            \" 100 cents to charge $1.00 or 100 to charge \u00a5100, a zero-decimal\"\n            \" currency). To submit an order, the total must be either 0 or at least\"\n            \" $0.50 USD or equivalent in charge currency.\"\n        )\n    )\n    application = models.CharField(\n        max_length=255,\n        blank=True,\n        help_text=\"ID of the Connect application that created the Order, if any.\",\n    )\n    automatic_tax = JSONField(\n        help_text=\"Settings and latest results for automatic tax lookup for this Order.\"\n    )\n    billing_details = JSONField(\n        null=True,\n        blank=True,\n        help_text=\"Customer billing details associated with the order.\",\n    )\n    client_secret = models.TextField(\n        max_length=5000,\n        help_text=(\n            \"The client secret of this PaymentIntent. \"\n            \"Used for client-side retrieval using a publishable key.\"\n        ),\n    )\n    currency = StripeCurrencyCodeField(\n        help_text=(\n            \"Three-letter ISO currency code, in lowercase. Must be a supported\"\n            \" currency.\"\n        )\n    )\n    # not deleting order when customer is deleted, because order may be important for taxation and audit purposes\n    customer = StripeForeignKey(\n        \"Customer\",\n        on_delete=models.SET_NULL,\n        null=True,\n        blank=True,\n        help_text=\"The customer which this orders belongs to.\",\n    )\n    discounts = JSONField(\n        null=True,\n        blank=True,\n        help_text=\"The discounts applied to the order.\",\n    )\n    ip_address = models.GenericIPAddressField(\n        null=True,\n        blank=True,\n        help_text=(\n            \"A recent IP address of the purchaser used for tax reporting and tax\"\n            \" location inference.\"\n        ),\n    )\n    line_items = JSONField(\n        help_text=(\n            \"A list of line items the customer is ordering. Each line item includes\"\n            \" information about the product, the quantity, and the resulting cost.\"\n            \" There is a maximum of 100 line items.\"\n        ),\n    )\n    payment = JSONField(\n        help_text=(\n            \"Payment information associated with the order. Includes payment status,\"\n            \" settings, and a PaymentIntent ID\"\n        ),\n    )\n    payment_intent = StripeForeignKey(\n        \"PaymentIntent\",\n        on_delete=models.SET_NULL,\n        null=True,\n        blank=True,\n        help_text=(\n            \"ID of the payment intent associated with this order. Null when the order\"\n            \" is open.\"\n        ),\n    )\n    shipping_cost = JSONField(\n        null=True,\n        blank=True,\n        help_text=(\n            \"The details of the customer cost of shipping, including the customer\"\n            \" chosen ShippingRate.\"\n        ),\n    )\n    shipping_details = JSONField(\n        null=True,\n        blank=True,\n        help_text=\"Customer shipping information associated with the order.\",\n    )\n    status = StripeEnumField(\n        enum=OrderStatus, help_text=\"The overall status of the order.\"\n    )\n    tax_details = JSONField(\n        null=True,\n        blank=True,\n        help_text=\"Tax details about the purchaser for this order.\",\n    )\n    total_details = JSONField(\n        help_text=(\n            \"Tax, discount, and shipping details for the computed total amount of this\"\n            \" order.\"\n        ),\n    )\n\n    def __str__(self):\n        template = f\"on {self.created.strftime('%m/%d/%Y')} ({self.status})\"\n        if self.status in (OrderStatus.open, OrderStatus.canceled):\n            return \"Created \" + template\n        elif self.status in (\n            OrderStatus.submitted,\n            OrderStatus.complete,\n            OrderStatus.processing,\n        ):\n            return \"Placed \" + template\n        return self.id\n\n    @classmethod\n    def _manipulate_stripe_object_hook(cls, data):\n        data[\"payment_intent\"] = data[\"payment\"][\"payment_intent\"]\n        return data\n\n    def _attach_objects_post_save_hook(\n        self,\n        cls,\n        data,\n        api_key=DjstripeSettings.STRIPE_SECRET_KEY,\n        pending_relations=None,\n    ):\n        super()._attach_objects_post_save_hook(\n            cls, data, api_key=api_key, pending_relations=pending_relations\n        )\n\n        # sync every discount\n        for discount in self.discounts:\n            Discount.sync_from_stripe_data(discount, api_key=api_key)\n\n    def cancel(self, api_key=None, stripe_account=None, **kwargs):\n        \"\"\"\n        Cancels the order as well as the payment intent if one is attached.\n\n        :param api_key: The api key to use for this request. \\\n            Defaults to djstripe_settings.STRIPE_SECRET_KEY.\n        :type api_key: string\n        :param stripe_account: The optional connected account \\\n            for which this request is being made.\n        :type stripe_account: string\n        \"\"\"\n        api_key = api_key or self.default_api_key\n        # Prefer passed in stripe_account if set.\n        if not stripe_account:\n            stripe_account = self._get_stripe_account_id(api_key)\n\n        return self.stripe_class.cancel(\n            self.id,\n            api_key=api_key,\n            stripe_account=stripe_account,\n            stripe_version=djstripe_settings.STRIPE_API_VERSION,\n            **kwargs,\n        )\n\n    def reopen(self, api_key=None, stripe_account=None, **kwargs):\n        \"\"\"\n        Reopens a submitted order.\n\n        :param api_key: The api key to use for this request. \\\n            Defaults to djstripe_settings.STRIPE_SECRET_KEY.\n        :type api_key: string\n        :param stripe_account: The optional connected account \\\n            for which this request is being made.\n        :type stripe_account: string\n        \"\"\"\n        api_key = api_key or self.default_api_key\n        # Prefer passed in stripe_account if set.\n        if not stripe_account:\n            stripe_account = self._get_stripe_account_id(api_key)\n\n        return self.stripe_class.reopen(\n            self.id,\n            api_key=api_key,\n            stripe_account=stripe_account,\n            stripe_version=djstripe_settings.STRIPE_API_VERSION,\n            **kwargs,\n        )\n\n    def submit(self, api_key=None, stripe_account=None, **kwargs):\n        \"\"\"\n        Submitting an Order transitions the status to processing and creates a PaymentIntent object\n        so the order can be paid.\n        If the Order has an amount_total of 0, no PaymentIntent object will be created.\n        Once the order is submitted, its contents cannot be changed,\n        unless the reopen method is called.\n\n        :param api_key: The api key to use for this request. \\\n            Defaults to djstripe_settings.STRIPE_SECRET_KEY.\n        :type api_key: string\n        :param stripe_account: The optional connected account \\\n            for which this request is being made.\n        :type stripe_account: string\n        \"\"\"\n        api_key = api_key or self.default_api_key\n        # Prefer passed in stripe_account if set.\n        if not stripe_account:\n            stripe_account = self._get_stripe_account_id(api_key)\n\n        return self.stripe_class.submit(\n            self.id,\n            api_key=api_key,\n            stripe_account=stripe_account,\n            stripe_version=djstripe_settings.STRIPE_API_VERSION,\n            **kwargs,\n        )\n</code></pre>"},{"location":"reference/models/#djstripe.models.orders.Order-attributes","title":"Attributes","text":""},{"location":"reference/models/#djstripe.models.orders.Order.amount_subtotal","title":"<code>djstripe.models.orders.Order.amount_subtotal = StripeQuantumCurrencyAmountField(help_text='Order cost before any discounts or taxes are applied. A positive integer representing the subtotal of the order in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge \u00a5100, a zero-decimal currency).')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.orders.Order.amount_total","title":"<code>djstripe.models.orders.Order.amount_total = StripeQuantumCurrencyAmountField(help_text='Total order cost after discounts and taxes are applied. A positive integer representing the cost of the order in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge \u00a5100, a zero-decimal currency). To submit an order, the total must be either 0 or at least $0.50 USD or equivalent in charge currency.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.orders.Order.application","title":"<code>djstripe.models.orders.Order.application = models.CharField(max_length=255, blank=True, help_text='ID of the Connect application that created the Order, if any.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.orders.Order.automatic_tax","title":"<code>djstripe.models.orders.Order.automatic_tax = JSONField(help_text='Settings and latest results for automatic tax lookup for this Order.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.orders.Order.billing_details","title":"<code>djstripe.models.orders.Order.billing_details = JSONField(null=True, blank=True, help_text='Customer billing details associated with the order.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.orders.Order.client_secret","title":"<code>djstripe.models.orders.Order.client_secret = models.TextField(max_length=5000, help_text='The client secret of this PaymentIntent. Used for client-side retrieval using a publishable key.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.orders.Order.currency","title":"<code>djstripe.models.orders.Order.currency = StripeCurrencyCodeField(help_text='Three-letter ISO currency code, in lowercase. Must be a supported currency.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.orders.Order.customer","title":"<code>djstripe.models.orders.Order.customer = StripeForeignKey('Customer', on_delete=models.SET_NULL, null=True, blank=True, help_text='The customer which this orders belongs to.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.orders.Order.discounts","title":"<code>djstripe.models.orders.Order.discounts = JSONField(null=True, blank=True, help_text='The discounts applied to the order.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.orders.Order.expand_fields","title":"<code>djstripe.models.orders.Order.expand_fields = ['customer', 'line_items', 'discounts', 'total_details.breakdown']</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.orders.Order.ip_address","title":"<code>djstripe.models.orders.Order.ip_address = models.GenericIPAddressField(null=True, blank=True, help_text='A recent IP address of the purchaser used for tax reporting and tax location inference.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.orders.Order.line_items","title":"<code>djstripe.models.orders.Order.line_items = JSONField(help_text='A list of line items the customer is ordering. Each line item includes information about the product, the quantity, and the resulting cost. There is a maximum of 100 line items.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.orders.Order.payment","title":"<code>djstripe.models.orders.Order.payment = JSONField(help_text='Payment information associated with the order. Includes payment status, settings, and a PaymentIntent ID')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.orders.Order.payment_intent","title":"<code>djstripe.models.orders.Order.payment_intent = StripeForeignKey('PaymentIntent', on_delete=models.SET_NULL, null=True, blank=True, help_text='ID of the payment intent associated with this order. Null when the order is open.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.orders.Order.shipping_cost","title":"<code>djstripe.models.orders.Order.shipping_cost = JSONField(null=True, blank=True, help_text='The details of the customer cost of shipping, including the customer chosen ShippingRate.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.orders.Order.shipping_details","title":"<code>djstripe.models.orders.Order.shipping_details = JSONField(null=True, blank=True, help_text='Customer shipping information associated with the order.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.orders.Order.status","title":"<code>djstripe.models.orders.Order.status = StripeEnumField(enum=OrderStatus, help_text='The overall status of the order.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.orders.Order.stripe_class","title":"<code>djstripe.models.orders.Order.stripe_class = stripe.Order</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.orders.Order.stripe_dashboard_item_name","title":"<code>djstripe.models.orders.Order.stripe_dashboard_item_name = 'orders'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.orders.Order.tax_details","title":"<code>djstripe.models.orders.Order.tax_details = JSONField(null=True, blank=True, help_text='Tax details about the purchaser for this order.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.orders.Order.total_details","title":"<code>djstripe.models.orders.Order.total_details = JSONField(help_text='Tax, discount, and shipping details for the computed total amount of this order.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.orders.Order-functions","title":"Functions","text":""},{"location":"reference/models/#djstripe.models.orders.Order.__str__","title":"<code>djstripe.models.orders.Order.__str__()</code>","text":"Source code in <code>djstripe/models/orders.py</code> <pre><code>def __str__(self):\n    template = f\"on {self.created.strftime('%m/%d/%Y')} ({self.status})\"\n    if self.status in (OrderStatus.open, OrderStatus.canceled):\n        return \"Created \" + template\n    elif self.status in (\n        OrderStatus.submitted,\n        OrderStatus.complete,\n        OrderStatus.processing,\n    ):\n        return \"Placed \" + template\n    return self.id\n</code></pre>"},{"location":"reference/models/#djstripe.models.orders.Order.cancel","title":"<code>djstripe.models.orders.Order.cancel(api_key=None, stripe_account=None, **kwargs)</code>","text":"<p>Cancels the order as well as the payment intent if one is attached.</p> <p>:param api_key: The api key to use for this request.             Defaults to djstripe_settings.STRIPE_SECRET_KEY. :type api_key: string :param stripe_account: The optional connected account             for which this request is being made. :type stripe_account: string</p> Source code in <code>djstripe/models/orders.py</code> <pre><code>def cancel(self, api_key=None, stripe_account=None, **kwargs):\n    \"\"\"\n    Cancels the order as well as the payment intent if one is attached.\n\n    :param api_key: The api key to use for this request. \\\n        Defaults to djstripe_settings.STRIPE_SECRET_KEY.\n    :type api_key: string\n    :param stripe_account: The optional connected account \\\n        for which this request is being made.\n    :type stripe_account: string\n    \"\"\"\n    api_key = api_key or self.default_api_key\n    # Prefer passed in stripe_account if set.\n    if not stripe_account:\n        stripe_account = self._get_stripe_account_id(api_key)\n\n    return self.stripe_class.cancel(\n        self.id,\n        api_key=api_key,\n        stripe_account=stripe_account,\n        stripe_version=djstripe_settings.STRIPE_API_VERSION,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/models/#djstripe.models.orders.Order.reopen","title":"<code>djstripe.models.orders.Order.reopen(api_key=None, stripe_account=None, **kwargs)</code>","text":"<p>Reopens a submitted order.</p> <p>:param api_key: The api key to use for this request.             Defaults to djstripe_settings.STRIPE_SECRET_KEY. :type api_key: string :param stripe_account: The optional connected account             for which this request is being made. :type stripe_account: string</p> Source code in <code>djstripe/models/orders.py</code> <pre><code>def reopen(self, api_key=None, stripe_account=None, **kwargs):\n    \"\"\"\n    Reopens a submitted order.\n\n    :param api_key: The api key to use for this request. \\\n        Defaults to djstripe_settings.STRIPE_SECRET_KEY.\n    :type api_key: string\n    :param stripe_account: The optional connected account \\\n        for which this request is being made.\n    :type stripe_account: string\n    \"\"\"\n    api_key = api_key or self.default_api_key\n    # Prefer passed in stripe_account if set.\n    if not stripe_account:\n        stripe_account = self._get_stripe_account_id(api_key)\n\n    return self.stripe_class.reopen(\n        self.id,\n        api_key=api_key,\n        stripe_account=stripe_account,\n        stripe_version=djstripe_settings.STRIPE_API_VERSION,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/models/#djstripe.models.orders.Order.submit","title":"<code>djstripe.models.orders.Order.submit(api_key=None, stripe_account=None, **kwargs)</code>","text":"<p>Submitting an Order transitions the status to processing and creates a PaymentIntent object so the order can be paid. If the Order has an amount_total of 0, no PaymentIntent object will be created. Once the order is submitted, its contents cannot be changed, unless the reopen method is called.</p> <p>:param api_key: The api key to use for this request.             Defaults to djstripe_settings.STRIPE_SECRET_KEY. :type api_key: string :param stripe_account: The optional connected account             for which this request is being made. :type stripe_account: string</p> Source code in <code>djstripe/models/orders.py</code> <pre><code>def submit(self, api_key=None, stripe_account=None, **kwargs):\n    \"\"\"\n    Submitting an Order transitions the status to processing and creates a PaymentIntent object\n    so the order can be paid.\n    If the Order has an amount_total of 0, no PaymentIntent object will be created.\n    Once the order is submitted, its contents cannot be changed,\n    unless the reopen method is called.\n\n    :param api_key: The api key to use for this request. \\\n        Defaults to djstripe_settings.STRIPE_SECRET_KEY.\n    :type api_key: string\n    :param stripe_account: The optional connected account \\\n        for which this request is being made.\n    :type stripe_account: string\n    \"\"\"\n    api_key = api_key or self.default_api_key\n    # Prefer passed in stripe_account if set.\n    if not stripe_account:\n        stripe_account = self._get_stripe_account_id(api_key)\n\n    return self.stripe_class.submit(\n        self.id,\n        api_key=api_key,\n        stripe_account=stripe_account,\n        stripe_version=djstripe_settings.STRIPE_API_VERSION,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/models/#sigma","title":"Sigma","text":""},{"location":"reference/models/#djstripe.models.sigma-classes","title":"Classes","text":""},{"location":"reference/models/#djstripe.models.sigma.ScheduledQueryRun","title":"<code>djstripe.models.sigma.ScheduledQueryRun</code>","text":"<p>               Bases: <code>StripeModel</code></p> <p>Stripe documentation: https://stripe.com/docs/api?lang=python#scheduled_queries</p> Source code in <code>djstripe/models/sigma.py</code> <pre><code>class ScheduledQueryRun(StripeModel):\n    \"\"\"\n    Stripe documentation: https://stripe.com/docs/api?lang=python#scheduled_queries\n    \"\"\"\n\n    stripe_class = stripe.sigma.ScheduledQueryRun\n\n    data_load_time = StripeDateTimeField(\n        help_text=(\n            \"When the query was run, Sigma contained a snapshot of your \"\n            \"Stripe data at this time.\"\n        )\n    )\n    error = JSONField(\n        null=True,\n        blank=True,\n        help_text=(\n            \"If the query run was not succeesful, contains information \"\n            \"about the failure.\"\n        ),\n    )\n    file = StripeForeignKey(\n        \"file\",\n        on_delete=models.SET_NULL,\n        null=True,\n        blank=True,\n        help_text=\"The file object representing the results of the query.\",\n    )\n    result_available_until = StripeDateTimeField(\n        help_text=(\n            \"Time at which the result expires and is no longer available for download.\"\n        )\n    )\n    sql = models.TextField(max_length=5000, help_text=\"SQL for the query.\")\n    status = StripeEnumField(\n        enum=enums.ScheduledQueryRunStatus, help_text=\"The query's execution status.\"\n    )\n    title = models.TextField(max_length=5000, help_text=\"Title of the query.\")\n\n    # TODO Write corresponding test\n    def __str__(self):\n        return f\"{self.title or self.id} ({self.status})\"\n</code></pre>"},{"location":"reference/models/#djstripe.models.sigma.ScheduledQueryRun-attributes","title":"Attributes","text":""},{"location":"reference/models/#djstripe.models.sigma.ScheduledQueryRun.data_load_time","title":"<code>djstripe.models.sigma.ScheduledQueryRun.data_load_time = StripeDateTimeField(help_text='When the query was run, Sigma contained a snapshot of your Stripe data at this time.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.sigma.ScheduledQueryRun.error","title":"<code>djstripe.models.sigma.ScheduledQueryRun.error = JSONField(null=True, blank=True, help_text='If the query run was not succeesful, contains information about the failure.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.sigma.ScheduledQueryRun.file","title":"<code>djstripe.models.sigma.ScheduledQueryRun.file = StripeForeignKey('file', on_delete=models.SET_NULL, null=True, blank=True, help_text='The file object representing the results of the query.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.sigma.ScheduledQueryRun.result_available_until","title":"<code>djstripe.models.sigma.ScheduledQueryRun.result_available_until = StripeDateTimeField(help_text='Time at which the result expires and is no longer available for download.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.sigma.ScheduledQueryRun.sql","title":"<code>djstripe.models.sigma.ScheduledQueryRun.sql = models.TextField(max_length=5000, help_text='SQL for the query.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.sigma.ScheduledQueryRun.status","title":"<code>djstripe.models.sigma.ScheduledQueryRun.status = StripeEnumField(enum=enums.ScheduledQueryRunStatus, help_text=\"The query's execution status.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.sigma.ScheduledQueryRun.stripe_class","title":"<code>djstripe.models.sigma.ScheduledQueryRun.stripe_class = stripe.sigma.ScheduledQueryRun</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.sigma.ScheduledQueryRun.title","title":"<code>djstripe.models.sigma.ScheduledQueryRun.title = models.TextField(max_length=5000, help_text='Title of the query.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.sigma.ScheduledQueryRun-functions","title":"Functions","text":""},{"location":"reference/models/#djstripe.models.sigma.ScheduledQueryRun.__str__","title":"<code>djstripe.models.sigma.ScheduledQueryRun.__str__()</code>","text":"Source code in <code>djstripe/models/sigma.py</code> <pre><code>def __str__(self):\n    return f\"{self.title or self.id} ({self.status})\"\n</code></pre>"},{"location":"reference/models/#webhooks","title":"Webhooks","text":"<p>Module for dj-stripe Webhook models</p>"},{"location":"reference/models/#djstripe.models.webhooks-attributes","title":"Attributes","text":""},{"location":"reference/models/#djstripe.models.webhooks-classes","title":"Classes","text":""},{"location":"reference/models/#djstripe.models.webhooks.WebhookEndpoint","title":"<code>djstripe.models.webhooks.WebhookEndpoint</code>","text":"<p>               Bases: <code>StripeModel</code></p> Source code in <code>djstripe/models/webhooks.py</code> <pre><code>class WebhookEndpoint(StripeModel):\n    stripe_class = stripe.WebhookEndpoint\n    stripe_dashboard_item_name = \"webhooks\"\n\n    api_version = models.CharField(\n        max_length=64,\n        blank=True,\n        help_text=(\n            \"The API version events are rendered as for this webhook endpoint. Defaults\"\n            \" to the configured Stripe API Version.\"\n        ),\n        default=djstripe_settings.STRIPE_API_VERSION,\n    )\n    enabled_events = JSONField(\n        help_text=(\n            \"The list of events to enable for this endpoint. ['*'] indicates that all\"\n            \" events are enabled, except those that require explicit selection.\"\n        )\n    )\n    secret = models.CharField(\n        max_length=256,\n        blank=True,\n        editable=False,\n        help_text=\"The endpoint's secret, used to generate webhook signatures.\",\n    )\n    status = StripeEnumField(\n        enum=WebhookEndpointStatus,\n        help_text=\"The status of the webhook. It can be enabled or disabled.\",\n    )\n    url = models.URLField(help_text=\"The URL of the webhook endpoint.\", max_length=2048)\n    application = models.CharField(\n        max_length=255,\n        blank=True,\n        help_text=\"The ID of the associated Connect application.\",\n    )\n\n    djstripe_uuid = models.UUIDField(\n        unique=True,\n        default=uuid4,\n        help_text=\"A UUID specific to dj-stripe generated for the endpoint\",\n    )\n    djstripe_tolerance = models.PositiveSmallIntegerField(\n        help_text=\"Controls the milliseconds tolerance which wards against replay attacks. Leave this to its default value unless you know what you're doing.\",\n        default=stripe.Webhook.DEFAULT_TOLERANCE,\n    )\n    djstripe_validation_method = StripeEnumField(\n        enum=WebhookEndpointValidation,\n        help_text=\"Controls the webhook validation method.\",\n        default=WebhookEndpointValidation.verify_signature,\n    )\n\n    def __str__(self):\n        return self.url or str(self.djstripe_uuid)\n\n    def _attach_objects_hook(\n        self, cls, data, current_ids=None, api_key=djstripe_settings.STRIPE_SECRET_KEY\n    ):\n        \"\"\"\n        Gets called by this object's create and sync methods just before save.\n        Use this to populate fields before the model is saved.\n        \"\"\"\n        super()._attach_objects_hook(\n            cls, data, current_ids=current_ids, api_key=api_key\n        )\n        self.djstripe_uuid = data.get(\"metadata\", {}).get(\"djstripe_uuid\")\n\n        djstripe_tolerance = data.get(\"djstripe_tolerance\")\n        # As djstripe_tolerance can be set to 0\n        if djstripe_tolerance is not None:\n            self.djstripe_tolerance = djstripe_tolerance\n\n        djstripe_validation_method = data.get(\"djstripe_validation_method\")\n        if djstripe_validation_method:\n            self.djstripe_validation_method = djstripe_validation_method\n</code></pre>"},{"location":"reference/models/#djstripe.models.webhooks.WebhookEndpoint-attributes","title":"Attributes","text":""},{"location":"reference/models/#djstripe.models.webhooks.WebhookEndpoint.api_version","title":"<code>djstripe.models.webhooks.WebhookEndpoint.api_version = models.CharField(max_length=64, blank=True, help_text='The API version events are rendered as for this webhook endpoint. Defaults to the configured Stripe API Version.', default=djstripe_settings.STRIPE_API_VERSION)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.webhooks.WebhookEndpoint.application","title":"<code>djstripe.models.webhooks.WebhookEndpoint.application = models.CharField(max_length=255, blank=True, help_text='The ID of the associated Connect application.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.webhooks.WebhookEndpoint.djstripe_tolerance","title":"<code>djstripe.models.webhooks.WebhookEndpoint.djstripe_tolerance = models.PositiveSmallIntegerField(help_text=\"Controls the milliseconds tolerance which wards against replay attacks. Leave this to its default value unless you know what you're doing.\", default=stripe.Webhook.DEFAULT_TOLERANCE)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.webhooks.WebhookEndpoint.djstripe_uuid","title":"<code>djstripe.models.webhooks.WebhookEndpoint.djstripe_uuid = models.UUIDField(unique=True, default=uuid4, help_text='A UUID specific to dj-stripe generated for the endpoint')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.webhooks.WebhookEndpoint.djstripe_validation_method","title":"<code>djstripe.models.webhooks.WebhookEndpoint.djstripe_validation_method = StripeEnumField(enum=WebhookEndpointValidation, help_text='Controls the webhook validation method.', default=WebhookEndpointValidation.verify_signature)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.webhooks.WebhookEndpoint.enabled_events","title":"<code>djstripe.models.webhooks.WebhookEndpoint.enabled_events = JSONField(help_text=\"The list of events to enable for this endpoint. ['*'] indicates that all events are enabled, except those that require explicit selection.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.webhooks.WebhookEndpoint.secret","title":"<code>djstripe.models.webhooks.WebhookEndpoint.secret = models.CharField(max_length=256, blank=True, editable=False, help_text=\"The endpoint's secret, used to generate webhook signatures.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.webhooks.WebhookEndpoint.status","title":"<code>djstripe.models.webhooks.WebhookEndpoint.status = StripeEnumField(enum=WebhookEndpointStatus, help_text='The status of the webhook. It can be enabled or disabled.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.webhooks.WebhookEndpoint.stripe_class","title":"<code>djstripe.models.webhooks.WebhookEndpoint.stripe_class = stripe.WebhookEndpoint</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.webhooks.WebhookEndpoint.stripe_dashboard_item_name","title":"<code>djstripe.models.webhooks.WebhookEndpoint.stripe_dashboard_item_name = 'webhooks'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.webhooks.WebhookEndpoint.url","title":"<code>djstripe.models.webhooks.WebhookEndpoint.url = models.URLField(help_text='The URL of the webhook endpoint.', max_length=2048)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.webhooks.WebhookEndpoint-functions","title":"Functions","text":""},{"location":"reference/models/#djstripe.models.webhooks.WebhookEndpoint.__str__","title":"<code>djstripe.models.webhooks.WebhookEndpoint.__str__()</code>","text":"Source code in <code>djstripe/models/webhooks.py</code> <pre><code>def __str__(self):\n    return self.url or str(self.djstripe_uuid)\n</code></pre>"},{"location":"reference/models/#djstripe.models.webhooks.WebhookEventTrigger","title":"<code>djstripe.models.webhooks.WebhookEventTrigger</code>","text":"<p>               Bases: <code>Model</code></p> <p>An instance of a request that reached the server endpoint for Stripe webhooks.</p> <p>Webhook Events are initially UNTRUSTED, as it is possible for any web entity to post any data to our webhook url. Data posted may be valid Stripe information, garbage, or even malicious. The 'valid' flag in this model monitors this.</p> Source code in <code>djstripe/models/webhooks.py</code> <pre><code>class WebhookEventTrigger(models.Model):\n    \"\"\"\n    An instance of a request that reached the server endpoint for Stripe webhooks.\n\n    Webhook Events are initially **UNTRUSTED**, as it is possible for any web entity to\n    post any data to our webhook url. Data posted may be valid Stripe information,\n    garbage, or even malicious.\n    The 'valid' flag in this model monitors this.\n    \"\"\"\n\n    id = models.BigAutoField(primary_key=True)\n    remote_ip = models.GenericIPAddressField(\n        help_text=\"IP address of the request client.\"\n    )\n    headers = JSONField()\n    body = models.TextField(blank=True)\n    valid = models.BooleanField(\n        default=False,\n        help_text=\"Whether or not the webhook event has passed validation\",\n    )\n    processed = models.BooleanField(\n        default=False,\n        help_text=\"Whether or not the webhook event has been successfully processed\",\n    )\n    exception = models.CharField(max_length=128, blank=True)\n    traceback = models.TextField(\n        blank=True, help_text=\"Traceback if an exception was thrown during processing\"\n    )\n    event = StripeForeignKey(\n        \"Event\",\n        on_delete=models.SET_NULL,\n        null=True,\n        blank=True,\n        help_text=\"Event object contained in the (valid) Webhook\",\n    )\n    djstripe_version = models.CharField(\n        max_length=32,\n        default=_get_version,  # Needs to be a callable, otherwise it's a db default.\n        help_text=\"The version of dj-stripe when the webhook was received\",\n    )\n    created = models.DateTimeField(auto_now_add=True)\n    updated = models.DateTimeField(auto_now=True)\n    stripe_trigger_account = StripeForeignKey(\n        \"djstripe.Account\",\n        on_delete=models.CASCADE,\n        to_field=\"id\",\n        null=True,\n        blank=True,\n        help_text=\"The Stripe Account this object belongs to.\",\n    )\n    webhook_endpoint = StripeForeignKey(\n        \"WebhookEndpoint\",\n        on_delete=models.SET_NULL,\n        null=True,\n        blank=True,\n        help_text=\"The endpoint this webhook was received on\",\n    )\n\n    def __str__(self):\n        return f\"id={self.id}, valid={self.valid}, processed={self.processed}\"\n\n    @classmethod\n    def from_request(cls, request, *, webhook_endpoint: WebhookEndpoint):\n        \"\"\"\n        Create, validate and process a WebhookEventTrigger given a Django\n        request object.\n\n        The process is three-fold:\n        1. Create a WebhookEventTrigger object from a Django request.\n        2. Validate the WebhookEventTrigger as a Stripe event using the API.\n        3. If valid, process it into an Event object (and child resource).\n        \"\"\"\n\n        try:\n            body = request.body.decode(request.encoding or \"utf-8\")\n        except Exception:\n            body = \"(error decoding body)\"\n\n        ip = get_remote_ip(request)\n\n        try:\n            data = json.loads(body)\n        except json.JSONDecodeError:\n            data = {}\n\n        stripe_account = StripeModel._find_owner_account(data=data)\n        secret = webhook_endpoint.secret\n\n        obj = cls.objects.create(\n            headers=dict(request.headers),\n            body=body,\n            remote_ip=ip,\n            stripe_trigger_account=stripe_account,\n            webhook_endpoint=webhook_endpoint,\n        )\n        api_key = (\n            stripe_account.default_api_key\n            or djstripe_settings.get_default_api_key(obj.livemode)\n        )\n\n        try:\n            # Validate the webhook first\n            signals.webhook_pre_validate.send(sender=cls, instance=obj)\n\n            # Default to per Webhook Endpoint Tolerance\n            obj.valid = obj.validate(\n                secret=secret,\n                api_key=api_key,\n            )\n\n            # send post webhook validate signal\n            signals.webhook_post_validate.send(\n                sender=cls, instance=obj, valid=obj.valid\n            )\n\n            if obj.valid:\n                signals.webhook_pre_process.send(sender=cls, instance=obj)\n\n                # todo this should be moved to per webhook endpoint callback\n                if djstripe_settings.WEBHOOK_EVENT_CALLBACK:\n                    # If WEBHOOK_EVENT_CALLBACK, pass it for processing\n                    djstripe_settings.WEBHOOK_EVENT_CALLBACK(obj, api_key=api_key)\n                else:\n                    # Process the item (do not save it, it'll get saved below)\n                    obj.process(save=False, api_key=api_key)\n                signals.webhook_post_process.send(\n                    sender=cls, instance=obj, api_key=api_key\n                )\n        except Exception as e:\n            max_length = cls._meta.get_field(\"exception\").max_length\n            obj.exception = str(e)[:max_length]\n            obj.traceback = format_exc()\n\n            # Send the exception as the webhook_processing_error signal\n            signals.webhook_processing_error.send(\n                sender=cls,\n                instance=obj,\n                api_key=api_key,\n                exception=e,\n                data=getattr(e, \"http_body\", \"\"),\n            )\n\n            # re-raise the exception so Django sees it\n            raise e\n        finally:\n            obj.save()\n\n        return obj\n\n    @cached_property\n    def json_body(self):\n        try:\n            return json.loads(self.body)\n        except ValueError:\n            return {}\n\n    @property\n    def is_test_event(self):\n        event_id = self.json_body.get(\"id\")\n        return event_id and event_id.endswith(\"_00000000000000\")\n\n    def verify_signature(self, secret: str, tolerance: int) -&gt; bool:\n        if not secret:\n            raise ValueError(\"Cannot verify event signature without a secret\")\n\n        # HTTP headers are case-insensitive, but we store them as a dict.\n        headers = CaseInsensitiveMapping(self.headers)\n        signature = headers.get(\"stripe-signature\")\n\n        try:\n            stripe.WebhookSignature.verify_header(\n                self.body, signature, secret, tolerance\n            )\n        except stripe.error.SignatureVerificationError:\n            logger.exception(\"Failed to verify header\")\n            return False\n        else:\n            return True\n\n    def validate(\n        self,\n        api_key: str,\n        secret: str,\n    ):\n        \"\"\"\n        The original contents of the Event message must be confirmed by\n        refetching it and comparing the fetched data with the original data.\n\n        This function makes an API call to Stripe to redownload the Event data\n        and returns whether or not it matches the WebhookEventTrigger data.\n        \"\"\"\n\n        local_data = self.json_body\n        if \"id\" not in local_data or \"livemode\" not in local_data:\n            logger.error(\n                '\"id\" not in json body or \"livemode\" not in json body(%s)', local_data\n            )\n            return False\n\n        if self.is_test_event:\n            logger.info(\"Test webhook received and discarded: %s\", local_data)\n            return False\n\n        validation_method = self.webhook_endpoint.djstripe_validation_method\n\n        if validation_method == WebhookEndpointValidation.none:\n            # validation disabled\n            warnings.warn(\"WEBHOOK VALIDATION is disabled.\")\n            return True\n        elif validation_method == WebhookEndpointValidation.verify_signature:\n            if settings.DEBUG:\n                # In debug mode, allow overriding the webhook secret with\n                # the x-djstripe-webhook-secret header.\n                # (used for stripe cli webhook forwarding)\n                headers = CaseInsensitiveMapping(self.headers)\n                local_secret = headers.get(\"x-djstripe-webhook-secret\")\n                secret = local_secret if local_secret else secret\n            return self.verify_signature(\n                secret=secret, tolerance=self.webhook_endpoint.djstripe_tolerance\n            )\n\n        livemode = local_data[\"livemode\"]\n        api_key = api_key or djstripe_settings.get_default_api_key(livemode)\n\n        # Retrieve the event using the api_version specified in itself\n        remote_data = Event.stripe_class.retrieve(\n            id=local_data[\"id\"],\n            api_key=api_key,\n            stripe_version=local_data[\"api_version\"],\n        )\n\n        return local_data[\"data\"] == remote_data[\"data\"]\n\n    def process(self, save=True, api_key: str = None):\n        # Reset traceback and exception in case of reprocessing\n        self.exception = \"\"\n        self.traceback = \"\"\n\n        self.event = Event.process(self.json_body, api_key=api_key)\n        self.processed = True\n        if save:\n            self.save()\n\n        return self.event\n</code></pre>"},{"location":"reference/models/#djstripe.models.webhooks.WebhookEventTrigger-attributes","title":"Attributes","text":""},{"location":"reference/models/#djstripe.models.webhooks.WebhookEventTrigger.body","title":"<code>djstripe.models.webhooks.WebhookEventTrigger.body = models.TextField(blank=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.webhooks.WebhookEventTrigger.created","title":"<code>djstripe.models.webhooks.WebhookEventTrigger.created = models.DateTimeField(auto_now_add=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.webhooks.WebhookEventTrigger.djstripe_version","title":"<code>djstripe.models.webhooks.WebhookEventTrigger.djstripe_version = models.CharField(max_length=32, default=_get_version, help_text='The version of dj-stripe when the webhook was received')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.webhooks.WebhookEventTrigger.event","title":"<code>djstripe.models.webhooks.WebhookEventTrigger.event = StripeForeignKey('Event', on_delete=models.SET_NULL, null=True, blank=True, help_text='Event object contained in the (valid) Webhook')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.webhooks.WebhookEventTrigger.exception","title":"<code>djstripe.models.webhooks.WebhookEventTrigger.exception = models.CharField(max_length=128, blank=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.webhooks.WebhookEventTrigger.headers","title":"<code>djstripe.models.webhooks.WebhookEventTrigger.headers = JSONField()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.webhooks.WebhookEventTrigger.id","title":"<code>djstripe.models.webhooks.WebhookEventTrigger.id = models.BigAutoField(primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.webhooks.WebhookEventTrigger.is_test_event","title":"<code>djstripe.models.webhooks.WebhookEventTrigger.is_test_event</code>  <code>property</code>","text":""},{"location":"reference/models/#djstripe.models.webhooks.WebhookEventTrigger.processed","title":"<code>djstripe.models.webhooks.WebhookEventTrigger.processed = models.BooleanField(default=False, help_text='Whether or not the webhook event has been successfully processed')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.webhooks.WebhookEventTrigger.remote_ip","title":"<code>djstripe.models.webhooks.WebhookEventTrigger.remote_ip = models.GenericIPAddressField(help_text='IP address of the request client.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.webhooks.WebhookEventTrigger.stripe_trigger_account","title":"<code>djstripe.models.webhooks.WebhookEventTrigger.stripe_trigger_account = StripeForeignKey('djstripe.Account', on_delete=models.CASCADE, to_field='id', null=True, blank=True, help_text='The Stripe Account this object belongs to.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.webhooks.WebhookEventTrigger.traceback","title":"<code>djstripe.models.webhooks.WebhookEventTrigger.traceback = models.TextField(blank=True, help_text='Traceback if an exception was thrown during processing')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.webhooks.WebhookEventTrigger.updated","title":"<code>djstripe.models.webhooks.WebhookEventTrigger.updated = models.DateTimeField(auto_now=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.webhooks.WebhookEventTrigger.valid","title":"<code>djstripe.models.webhooks.WebhookEventTrigger.valid = models.BooleanField(default=False, help_text='Whether or not the webhook event has passed validation')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.webhooks.WebhookEventTrigger.webhook_endpoint","title":"<code>djstripe.models.webhooks.WebhookEventTrigger.webhook_endpoint = StripeForeignKey('WebhookEndpoint', on_delete=models.SET_NULL, null=True, blank=True, help_text='The endpoint this webhook was received on')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#djstripe.models.webhooks.WebhookEventTrigger-functions","title":"Functions","text":""},{"location":"reference/models/#djstripe.models.webhooks.WebhookEventTrigger.__str__","title":"<code>djstripe.models.webhooks.WebhookEventTrigger.__str__()</code>","text":"Source code in <code>djstripe/models/webhooks.py</code> <pre><code>def __str__(self):\n    return f\"id={self.id}, valid={self.valid}, processed={self.processed}\"\n</code></pre>"},{"location":"reference/models/#djstripe.models.webhooks.WebhookEventTrigger.from_request","title":"<code>djstripe.models.webhooks.WebhookEventTrigger.from_request(request, *, webhook_endpoint)</code>  <code>classmethod</code>","text":"<p>Create, validate and process a WebhookEventTrigger given a Django request object.</p> <p>The process is three-fold: 1. Create a WebhookEventTrigger object from a Django request. 2. Validate the WebhookEventTrigger as a Stripe event using the API. 3. If valid, process it into an Event object (and child resource).</p> Source code in <code>djstripe/models/webhooks.py</code> <pre><code>@classmethod\ndef from_request(cls, request, *, webhook_endpoint: WebhookEndpoint):\n    \"\"\"\n    Create, validate and process a WebhookEventTrigger given a Django\n    request object.\n\n    The process is three-fold:\n    1. Create a WebhookEventTrigger object from a Django request.\n    2. Validate the WebhookEventTrigger as a Stripe event using the API.\n    3. If valid, process it into an Event object (and child resource).\n    \"\"\"\n\n    try:\n        body = request.body.decode(request.encoding or \"utf-8\")\n    except Exception:\n        body = \"(error decoding body)\"\n\n    ip = get_remote_ip(request)\n\n    try:\n        data = json.loads(body)\n    except json.JSONDecodeError:\n        data = {}\n\n    stripe_account = StripeModel._find_owner_account(data=data)\n    secret = webhook_endpoint.secret\n\n    obj = cls.objects.create(\n        headers=dict(request.headers),\n        body=body,\n        remote_ip=ip,\n        stripe_trigger_account=stripe_account,\n        webhook_endpoint=webhook_endpoint,\n    )\n    api_key = (\n        stripe_account.default_api_key\n        or djstripe_settings.get_default_api_key(obj.livemode)\n    )\n\n    try:\n        # Validate the webhook first\n        signals.webhook_pre_validate.send(sender=cls, instance=obj)\n\n        # Default to per Webhook Endpoint Tolerance\n        obj.valid = obj.validate(\n            secret=secret,\n            api_key=api_key,\n        )\n\n        # send post webhook validate signal\n        signals.webhook_post_validate.send(\n            sender=cls, instance=obj, valid=obj.valid\n        )\n\n        if obj.valid:\n            signals.webhook_pre_process.send(sender=cls, instance=obj)\n\n            # todo this should be moved to per webhook endpoint callback\n            if djstripe_settings.WEBHOOK_EVENT_CALLBACK:\n                # If WEBHOOK_EVENT_CALLBACK, pass it for processing\n                djstripe_settings.WEBHOOK_EVENT_CALLBACK(obj, api_key=api_key)\n            else:\n                # Process the item (do not save it, it'll get saved below)\n                obj.process(save=False, api_key=api_key)\n            signals.webhook_post_process.send(\n                sender=cls, instance=obj, api_key=api_key\n            )\n    except Exception as e:\n        max_length = cls._meta.get_field(\"exception\").max_length\n        obj.exception = str(e)[:max_length]\n        obj.traceback = format_exc()\n\n        # Send the exception as the webhook_processing_error signal\n        signals.webhook_processing_error.send(\n            sender=cls,\n            instance=obj,\n            api_key=api_key,\n            exception=e,\n            data=getattr(e, \"http_body\", \"\"),\n        )\n\n        # re-raise the exception so Django sees it\n        raise e\n    finally:\n        obj.save()\n\n    return obj\n</code></pre>"},{"location":"reference/models/#djstripe.models.webhooks.WebhookEventTrigger.json_body","title":"<code>djstripe.models.webhooks.WebhookEventTrigger.json_body()</code>","text":"Source code in <code>djstripe/models/webhooks.py</code> <pre><code>@cached_property\ndef json_body(self):\n    try:\n        return json.loads(self.body)\n    except ValueError:\n        return {}\n</code></pre>"},{"location":"reference/models/#djstripe.models.webhooks.WebhookEventTrigger.process","title":"<code>djstripe.models.webhooks.WebhookEventTrigger.process(save=True, api_key=None)</code>","text":"Source code in <code>djstripe/models/webhooks.py</code> <pre><code>def process(self, save=True, api_key: str = None):\n    # Reset traceback and exception in case of reprocessing\n    self.exception = \"\"\n    self.traceback = \"\"\n\n    self.event = Event.process(self.json_body, api_key=api_key)\n    self.processed = True\n    if save:\n        self.save()\n\n    return self.event\n</code></pre>"},{"location":"reference/models/#djstripe.models.webhooks.WebhookEventTrigger.validate","title":"<code>djstripe.models.webhooks.WebhookEventTrigger.validate(api_key, secret)</code>","text":"<p>The original contents of the Event message must be confirmed by refetching it and comparing the fetched data with the original data.</p> <p>This function makes an API call to Stripe to redownload the Event data and returns whether or not it matches the WebhookEventTrigger data.</p> Source code in <code>djstripe/models/webhooks.py</code> <pre><code>def validate(\n    self,\n    api_key: str,\n    secret: str,\n):\n    \"\"\"\n    The original contents of the Event message must be confirmed by\n    refetching it and comparing the fetched data with the original data.\n\n    This function makes an API call to Stripe to redownload the Event data\n    and returns whether or not it matches the WebhookEventTrigger data.\n    \"\"\"\n\n    local_data = self.json_body\n    if \"id\" not in local_data or \"livemode\" not in local_data:\n        logger.error(\n            '\"id\" not in json body or \"livemode\" not in json body(%s)', local_data\n        )\n        return False\n\n    if self.is_test_event:\n        logger.info(\"Test webhook received and discarded: %s\", local_data)\n        return False\n\n    validation_method = self.webhook_endpoint.djstripe_validation_method\n\n    if validation_method == WebhookEndpointValidation.none:\n        # validation disabled\n        warnings.warn(\"WEBHOOK VALIDATION is disabled.\")\n        return True\n    elif validation_method == WebhookEndpointValidation.verify_signature:\n        if settings.DEBUG:\n            # In debug mode, allow overriding the webhook secret with\n            # the x-djstripe-webhook-secret header.\n            # (used for stripe cli webhook forwarding)\n            headers = CaseInsensitiveMapping(self.headers)\n            local_secret = headers.get(\"x-djstripe-webhook-secret\")\n            secret = local_secret if local_secret else secret\n        return self.verify_signature(\n            secret=secret, tolerance=self.webhook_endpoint.djstripe_tolerance\n        )\n\n    livemode = local_data[\"livemode\"]\n    api_key = api_key or djstripe_settings.get_default_api_key(livemode)\n\n    # Retrieve the event using the api_version specified in itself\n    remote_data = Event.stripe_class.retrieve(\n        id=local_data[\"id\"],\n        api_key=api_key,\n        stripe_version=local_data[\"api_version\"],\n    )\n\n    return local_data[\"data\"] == remote_data[\"data\"]\n</code></pre>"},{"location":"reference/models/#djstripe.models.webhooks.WebhookEventTrigger.verify_signature","title":"<code>djstripe.models.webhooks.WebhookEventTrigger.verify_signature(secret, tolerance)</code>","text":"Source code in <code>djstripe/models/webhooks.py</code> <pre><code>def verify_signature(self, secret: str, tolerance: int) -&gt; bool:\n    if not secret:\n        raise ValueError(\"Cannot verify event signature without a secret\")\n\n    # HTTP headers are case-insensitive, but we store them as a dict.\n    headers = CaseInsensitiveMapping(self.headers)\n    signature = headers.get(\"stripe-signature\")\n\n    try:\n        stripe.WebhookSignature.verify_header(\n            self.body, signature, secret, tolerance\n        )\n    except stripe.error.SignatureVerificationError:\n        logger.exception(\"Failed to verify header\")\n        return False\n    else:\n        return True\n</code></pre>"},{"location":"reference/models/#djstripe.models.webhooks-functions","title":"Functions","text":""},{"location":"reference/models/#djstripe.models.webhooks.get_remote_ip","title":"<code>djstripe.models.webhooks.get_remote_ip(request)</code>","text":"<p>Given the HTTPRequest object return the IP Address of the client</p> <p>:param request: client request :type request: HTTPRequest</p> <p>:Returns: the client ip address</p> Source code in <code>djstripe/models/webhooks.py</code> <pre><code>def get_remote_ip(request):\n    \"\"\"Given the HTTPRequest object return the IP Address of the client\n\n    :param request: client request\n    :type request: HTTPRequest\n\n    :Returns: the client ip address\n    \"\"\"\n\n    # x-forwarded-for is relevant for django running behind a proxy\n    x_forwarded_for = request.headers.get(\"x-forwarded-for\")\n    if x_forwarded_for:\n        ip = x_forwarded_for.split(\",\")[0]\n    else:\n        ip = request.META.get(\"REMOTE_ADDR\")\n\n    if not ip:\n        warnings.warn(\n            \"Could not determine remote IP (missing REMOTE_ADDR). \"\n            \"This is likely an issue with your wsgi/server setup.\"\n        )\n        ip = \"0.0.0.0\"\n\n    return ip\n</code></pre>"},{"location":"reference/project/","title":"Tests","text":"<p>A Fake or multiple fakes for each stripe object.</p> <p>Originally collected using API VERSION 2015-07-28. Updated to API VERSION 2016-03-07 with bogus fields.</p>"},{"location":"reference/project/#tests-attributes","title":"Attributes","text":""},{"location":"reference/project/#tests.FAKE_ACCOUNT","title":"<code>tests.FAKE_ACCOUNT = {'id': 'acct_1032D82eZvKYlo2C', 'object': 'account', 'business_profile': {'name': 'dj-stripe', 'support_email': 'djstripe@example.com', 'support_phone': None, 'support_url': 'https://djstripe.com/support/', 'url': 'https://djstripe.com'}, 'settings': {'branding': {'icon': 'file_4hshrsKatMEEd6736724HYAXyj', 'logo': 'file_1E3fssKatMEEd6736724HYAXyj', 'primary_color': '#092e20'}, 'dashboard': {'display_name': 'dj-stripe', 'timezone': 'Etc/UTC'}, 'payments': {'statement_descriptor': 'DJSTRIPE'}}, 'charges_enabled': True, 'country': 'US', 'default_currency': 'usd', 'details_submitted': True, 'email': 'djstripe@example.com', 'payouts_enabled': True, 'type': 'standard'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_BALANCE_TRANSACTION","title":"<code>tests.FAKE_BALANCE_TRANSACTION = load_fixture('balance_transaction_txn_fake_ch_fakefakefakefakefake0001.json')</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_BALANCE_TRANSACTION_II","title":"<code>tests.FAKE_BALANCE_TRANSACTION_II = {'id': 'txn_16g5h62eZvKYlo2CQ2AHA89s', 'object': 'balance_transaction', 'amount': 65400, 'available_on': 1441670400, 'created': 1441079064, 'currency': 'usd', 'description': None, 'fee': 1927, 'fee_details': [{'amount': 1927, 'currency': 'usd', 'type': 'stripe_fee', 'description': 'Stripe processing fees', 'application': None}], 'net': 63473, 'source': 'ch_16g5h62eZvKYlo2CMRXkSqa0', 'sourced_transfers': {'object': 'list', 'total_count': 0, 'has_more': False, 'url': '/v1/transfers?source_transaction=ch_16g5h62eZvKYlo2CMRXkSqa0', 'data': []}, 'status': 'pending', 'type': 'charge'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_BALANCE_TRANSACTION_III","title":"<code>tests.FAKE_BALANCE_TRANSACTION_III = {'id': 'txn_16g5h62eZvKYlo2CQ2AHA89s', 'object': 'balance_transaction', 'amount': 2000, 'available_on': 1441670400, 'created': 1441079064, 'currency': 'usd', 'description': None, 'fee': 1927, 'fee_details': [{'amount': 1927, 'currency': 'usd', 'type': 'stripe_fee', 'description': 'Stripe processing fees', 'application': None}], 'net': 73, 'source': 'ch_16g5h62eZvKYlo2CMRXkSqa0', 'sourced_transfers': {'object': 'list', 'total_count': 0, 'has_more': False, 'url': '/v1/transfers?source_transaction=ch_16g5h62eZvKYlo2CMRXkSqa0', 'data': []}, 'status': 'pending', 'type': 'charge'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_BALANCE_TRANSACTION_IV","title":"<code>tests.FAKE_BALANCE_TRANSACTION_IV = {'id': 'txn_16g5h62eZvKYlo2CQ2AHA89s', 'object': 'balance_transaction', 'amount': 19010, 'available_on': 1441670400, 'created': 1441079064, 'currency': 'usd', 'description': None, 'fee': 1927, 'fee_details': [{'amount': 1927, 'currency': 'usd', 'type': 'stripe_fee', 'description': 'Stripe processing fees', 'application': None}], 'net': 17083, 'source': 'ch_16g5h62eZvKYlo2CMRXkSqa0', 'sourced_transfers': {'object': 'list', 'total_count': 0, 'has_more': False, 'url': '/v1/transfers?source_transaction=ch_16g5h62eZvKYlo2CMRXkSqa0', 'data': []}, 'status': 'pending', 'type': 'charge'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_BALANCE_TRANSACTION_REFUND","title":"<code>tests.FAKE_BALANCE_TRANSACTION_REFUND = {'id': 'txn_1E0he8KaGRDEd998TDswMZuN', 'amount': -1 * FAKE_CHARGE_REFUNDED['amount_refunded'], 'available_on': 1549425864, 'created': 1549425864, 'currency': 'usd', 'description': 'REFUND FOR CHARGE (Payment for invoice G432DF1C-0028)', 'exchange_rate': None, 'fee': 0, 'fee_details': [], 'net': -1 * FAKE_CHARGE_REFUNDED['amount_refunded'], 'object': 'balance_transaction', 'source': FAKE_REFUND['id'], 'status': 'available', 'type': 'refund'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_BANK_ACCOUNT","title":"<code>tests.FAKE_BANK_ACCOUNT = {'id': 'ba_16hTzo2eZvKYlo2CeSjfb0tS', 'object': 'bank_account', 'account_holder_name': None, 'account_holder_type': None, 'bank_name': 'STRIPE TEST BANK', 'country': 'US', 'currency': 'usd', 'fingerprint': '1JWtPxqbdX5Gamtc', 'last4': '6789', 'routing_number': '110000000', 'status': 'new'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_BANK_ACCOUNT_II","title":"<code>tests.FAKE_BANK_ACCOUNT_II = {'id': 'ba_17O4Tz2eZvKYlo2CMYsxroV5', 'object': 'bank_account', 'account_holder_name': None, 'account_holder_type': None, 'bank_name': None, 'country': 'US', 'currency': 'usd', 'fingerprint': '1JWtPxqbdX5Gamtc', 'last4': '6789', 'routing_number': '110000000', 'status': 'new'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_BANK_ACCOUNT_IV","title":"<code>tests.FAKE_BANK_ACCOUNT_IV = BankAccountDict(load_fixture('bank_account_ba_fakefakefakefakefake0004.json'))</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_BANK_ACCOUNT_SOURCE","title":"<code>tests.FAKE_BANK_ACCOUNT_SOURCE = BankAccountDict(load_fixture('bank_account_ba_fakefakefakefakefake0003.json'))</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_CARD","title":"<code>tests.FAKE_CARD = CardDict(load_fixture('card_card_fakefakefakefakefake0001.json'))</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_CARD_AS_PAYMENT_METHOD","title":"<code>tests.FAKE_CARD_AS_PAYMENT_METHOD = PaymentMethodDict(load_fixture('payment_method_card_fakefakefakefakefake0001.json'))</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_CARD_II","title":"<code>tests.FAKE_CARD_II = CardDict(load_fixture('card_card_fakefakefakefakefake0002.json'))</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_CARD_III","title":"<code>tests.FAKE_CARD_III = CardDict(load_fixture('card_card_fakefakefakefakefake0003.json'))</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_CARD_IV","title":"<code>tests.FAKE_CARD_IV = CardDict(load_fixture('card_card_fakefakefakefakefake0004.json'))</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_CHARGE","title":"<code>tests.FAKE_CHARGE = ChargeDict(load_fixture('charge_ch_fakefakefakefakefake0001.json'))</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_CHARGE_II","title":"<code>tests.FAKE_CHARGE_II = ChargeDict({'id': 'ch_16ag432eZvKYlo2CGDe6lvVs', 'object': 'charge', 'amount': 3000, 'amount_captured': 0, 'amount_refunded': 0, 'application_fee': None, 'application_fee_amount': None, 'balance_transaction': FAKE_BALANCE_TRANSACTION['id'], 'billing_details': {'address': {'city': None, 'country': 'US', 'line1': None, 'line2': None, 'postal_code': '92082', 'state': None}, 'email': 'kyoung@hotmail.com', 'name': 'John Foo', 'phone': None}, 'calculated_statement_descriptor': 'Stripe', 'captured': False, 'created': 1439788903, 'currency': 'usd', 'customer': 'cus_4UbFSo9tl62jqj', 'description': None, 'destination': None, 'dispute': None, 'disputed': False, 'failure_code': 'expired_card', 'failure_message': 'Your card has expired.', 'fraud_details': {}, 'invoice': 'in_16af5A2eZvKYlo2CJjANLL81', 'livemode': False, 'metadata': {}, 'on_behalf_of': None, 'order': None, 'outcome': {'network_status': 'declined_by_network', 'reason': 'expired_card', 'risk_level': 'normal', 'risk_score': 1, 'seller_message': 'The bank returned the decline code `expired_card`.', 'type': 'issuer_declined'}, 'paid': False, 'payment_intent': FAKE_PAYMENT_INTENT_II['id'], 'payment_method': FAKE_CARD_AS_PAYMENT_METHOD['id'], 'payment_method_details': {'card': {'brand': 'visa', 'checks': {'address_line1_check': None, 'address_postal_code_check': None, 'cvc_check': None}, 'country': 'US', 'exp_month': 6, 'exp_year': 2021, 'fingerprint': '88PuXw9tEmvYe69o', 'funding': 'credit', 'installments': None, 'last4': '4242', 'network': 'visa', 'three_d_secure': None, 'wallet': None}, 'type': 'card'}, 'receipt_email': None, 'receipt_number': None, 'receipt_url': None, 'refunded': False, 'refunds': {'object': 'list', 'total_count': 0, 'has_more': False, 'url': '/v1/charges/ch_16ag432eZvKYlo2CGDe6lvVs/refunds', 'data': []}, 'review': None, 'shipping': None, 'source': deepcopy(FAKE_CARD_II), 'source_transfer': None, 'statement_descriptor': None, 'statement_descriptor_suffix': None, 'status': 'failed', 'transfer_data': None, 'transfer_group': None})</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_CHARGE_REFUNDED","title":"<code>tests.FAKE_CHARGE_REFUNDED = FAKE_CHARGE_REFUNDED.refund(amount=FAKE_CHARGE_REFUNDED['amount'])</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_COUPON","title":"<code>tests.FAKE_COUPON = {'id': 'fake-coupon-1', 'object': 'coupon', 'applies_to': {'products': ['prod_fake1']}, 'amount_off': None, 'created': 1490157071, 'currency': None, 'duration': 'once', 'duration_in_months': None, 'livemode': False, 'max_redemptions': None, 'metadata': {}, 'percent_off': 1, 'redeem_by': None, 'times_redeemed': 0, 'valid': True}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_CUSTOMER","title":"<code>tests.FAKE_CUSTOMER = CustomerDict(load_fixture('customer_cus_6lsBvm5rJ0zyHc.json'))</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_CUSTOMER_II","title":"<code>tests.FAKE_CUSTOMER_II = CustomerDict(load_fixture('customer_cus_4UbFSo9tl62jqj.json'))</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_CUSTOMER_III","title":"<code>tests.FAKE_CUSTOMER_III = CustomerDict(load_fixture('customer_cus_4QWKsZuuTHcs7X.json'))</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_CUSTOMER_IV","title":"<code>tests.FAKE_CUSTOMER_IV = CustomerDict(load_fixture('customer_cus_example_with_bank_account.json'))</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_CUSTOM_ACCOUNT","title":"<code>tests.FAKE_CUSTOM_ACCOUNT = AccountDict(load_fixture('account_custom_acct_1IuHosQveW0ONQsd.json'))</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_DISCOUNT","title":"<code>tests.FAKE_DISCOUNT = {'id': 'di_fakefakefakefakefake0001', 'object': 'discount', 'description': '', 'checkout_session': None, 'coupon': deepcopy(FAKE_COUPON), 'customer': FAKE_CUSTOMER, 'end': None, 'invoice': None, 'invoice_item': None, 'promotion_code': '', 'start': 1493206114, 'subscription': 'sub_fakefakefakefakefake0001'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_DISCOUNT_CUSTOMER","title":"<code>tests.FAKE_DISCOUNT_CUSTOMER = {'id': 'di_fakefakefakefakefake0002', 'object': 'discount', 'coupon': deepcopy(FAKE_COUPON), 'customer': deepcopy(FAKE_CUSTOMER), 'start': 1493206114, 'end': None, 'subscription': None}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_DISPUTE_BALANCE_TRANSACTION","title":"<code>tests.FAKE_DISPUTE_BALANCE_TRANSACTION = load_fixture('dispute_txn_fakefakefakefake01.json')</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_DISPUTE_BALANCE_TRANSACTION_REFUND_FULL","title":"<code>tests.FAKE_DISPUTE_BALANCE_TRANSACTION_REFUND_FULL = deepcopy(FAKE_DISPUTE_BALANCE_TRANSACTION)</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_DISPUTE_BALANCE_TRANSACTION_REFUND_PARTIAL","title":"<code>tests.FAKE_DISPUTE_BALANCE_TRANSACTION_REFUND_PARTIAL = deepcopy(FAKE_DISPUTE_BALANCE_TRANSACTION)</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_DISPUTE_CHARGE","title":"<code>tests.FAKE_DISPUTE_CHARGE = load_fixture('dispute_ch_fakefakefakefake01.json')</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_DISPUTE_I","title":"<code>tests.FAKE_DISPUTE_I = load_fixture('dispute_dp_fakefakefakefake01.json')</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_DISPUTE_II","title":"<code>tests.FAKE_DISPUTE_II = load_fixture('dispute_dp_fakefakefakefake02.json')</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_DISPUTE_III","title":"<code>tests.FAKE_DISPUTE_III = deepcopy(FAKE_DISPUTE_II)</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_DISPUTE_IV","title":"<code>tests.FAKE_DISPUTE_IV = deepcopy(FAKE_DISPUTE_II)</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_DISPUTE_PAYMENT_INTENT","title":"<code>tests.FAKE_DISPUTE_PAYMENT_INTENT = load_fixture('dispute_pi_fakefakefakefake01.json')</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_DISPUTE_PAYMENT_METHOD","title":"<code>tests.FAKE_DISPUTE_PAYMENT_METHOD = load_fixture('dispute_pm_fakefakefakefake01.json')</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_DISPUTE_V_FULL","title":"<code>tests.FAKE_DISPUTE_V_FULL = load_fixture('dispute_dp_funds_reinstated_full.json')</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_DISPUTE_V_PARTIAL","title":"<code>tests.FAKE_DISPUTE_V_PARTIAL = load_fixture('dispute_dp_funds_reinstated_full.json')</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_ACCOUNT_APPLICATION_AUTHORIZED","title":"<code>tests.FAKE_EVENT_ACCOUNT_APPLICATION_AUTHORIZED = dict(load_fixture('event_account_application_authorized.json'))</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_ACCOUNT_APPLICATION_DEAUTHORIZED","title":"<code>tests.FAKE_EVENT_ACCOUNT_APPLICATION_DEAUTHORIZED = dict(load_fixture('event_account_application_deauthorized.json'))</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_ACCOUNT_EXTERNAL_ACCOUNT_BANK_ACCOUNT_CREATED","title":"<code>tests.FAKE_EVENT_ACCOUNT_EXTERNAL_ACCOUNT_BANK_ACCOUNT_CREATED = dict(load_fixture('event_external_account_bank_account_created.json'))</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_ACCOUNT_EXTERNAL_ACCOUNT_BANK_ACCOUNT_DELETED","title":"<code>tests.FAKE_EVENT_ACCOUNT_EXTERNAL_ACCOUNT_BANK_ACCOUNT_DELETED = dict(load_fixture('event_external_account_bank_account_deleted.json'))</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_ACCOUNT_EXTERNAL_ACCOUNT_BANK_ACCOUNT_UPDATED","title":"<code>tests.FAKE_EVENT_ACCOUNT_EXTERNAL_ACCOUNT_BANK_ACCOUNT_UPDATED = dict(load_fixture('event_external_account_bank_account_updated.json'))</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_ACCOUNT_EXTERNAL_ACCOUNT_CARD_CREATED","title":"<code>tests.FAKE_EVENT_ACCOUNT_EXTERNAL_ACCOUNT_CARD_CREATED = dict(load_fixture('event_external_account_card_created.json'))</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_ACCOUNT_EXTERNAL_ACCOUNT_CARD_DELETED","title":"<code>tests.FAKE_EVENT_ACCOUNT_EXTERNAL_ACCOUNT_CARD_DELETED = dict(load_fixture('event_external_account_card_deleted.json'))</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_ACCOUNT_EXTERNAL_ACCOUNT_CARD_UPDATED","title":"<code>tests.FAKE_EVENT_ACCOUNT_EXTERNAL_ACCOUNT_CARD_UPDATED = dict(load_fixture('event_external_account_card_updated.json'))</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_CARD_PAYMENT_METHOD_ATTACHED","title":"<code>tests.FAKE_EVENT_CARD_PAYMENT_METHOD_ATTACHED = {'id': 'evt_1FDOwDKatMEEd998o5Fghgfh', 'object': 'event', 'api_version': '2019-08-14', 'created': 1567228549, 'data': {'object': deepcopy(FAKE_CARD_AS_PAYMENT_METHOD)}, 'livemode': False, 'pending_webhooks': 0, 'request': {'id': 'req_9c9djVqxUhgfh', 'idempotency_key': None}, 'type': 'payment_method.attached'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_CARD_PAYMENT_METHOD_DETACHED","title":"<code>tests.FAKE_EVENT_CARD_PAYMENT_METHOD_DETACHED = {'id': 'evt_1FDOwDKatMEEd998o5435345', 'object': 'event', 'api_version': '2019-08-14', 'created': 1567228549, 'data': {'object': deepcopy(FAKE_CARD_AS_PAYMENT_METHOD)}, 'livemode': False, 'pending_webhooks': 0, 'request': {'id': 'req_9c9djVqx6tgeg', 'idempotency_key': None}, 'type': 'payment_method.detached'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_CHARGE_SUCCEEDED","title":"<code>tests.FAKE_EVENT_CHARGE_SUCCEEDED = {'id': 'evt_16YKQi2eZvKYlo2CT2oe5ff3', 'object': 'event', 'api_version': '2016-03-07', 'created': 1439229084, 'data': {'object': deepcopy(FAKE_CHARGE)}, 'livemode': False, 'pending_webhooks': 0, 'request': 'req_6lsB7hkicwhaDj', 'type': 'charge.succeeded'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_CUSTOMER_CREATED","title":"<code>tests.FAKE_EVENT_CUSTOMER_CREATED = {'id': 'evt_38DHch3whaDvKYlo2CT2oe5ff3', 'object': 'event', 'api_version': '2016-03-07; orders_beta=v3', 'created': 1439229084, 'data': {'object': deepcopy(FAKE_CUSTOMER)}, 'livemode': False, 'pending_webhooks': 0, 'request': 'req_6l38DHch3whaDj', 'type': 'customer.created'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_CUSTOMER_DELETED","title":"<code>tests.FAKE_EVENT_CUSTOMER_DELETED = deepcopy(FAKE_EVENT_CUSTOMER_CREATED)</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_CUSTOMER_DISCOUNT_CREATED","title":"<code>tests.FAKE_EVENT_CUSTOMER_DISCOUNT_CREATED = {'id': 'AGBWvF5zBm4sMCsLLPZrw9YY', 'object': 'event', 'api_version': '2018-05-21', 'created': 1439229084, 'data': {'object': deepcopy(FAKE_DISCOUNT_CUSTOMER)}, 'livemode': False, 'pending_webhooks': 0, 'request': 'req_6l38DHch3whaDj', 'type': 'customer.discount.created'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_CUSTOMER_DISCOUNT_DELETED","title":"<code>tests.FAKE_EVENT_CUSTOMER_DISCOUNT_DELETED = {'id': 'AGBWvF5zBm4sMCsLLPZrw9XX', 'type': 'customer.discount.deleted', 'api_version': '2017-02-14', 'created': 1439229084, 'object': 'event', 'livemode': False, 'pending_webhooks': 0, 'request': 'req_6l38DHch3whaDj', 'data': {'object': deepcopy(FAKE_DISCOUNT_CUSTOMER)}}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_CUSTOMER_SOURCE_CREATED","title":"<code>tests.FAKE_EVENT_CUSTOMER_SOURCE_CREATED = {'id': 'evt_DvKYlo38huDvKYlo2C7SXedrZk', 'object': 'event', 'api_version': '2016-03-07', 'created': 1439229084, 'data': {'object': deepcopy(FAKE_CARD)}, 'livemode': False, 'pending_webhooks': 0, 'request': 'req_o3whaDvh3whaDj', 'type': 'customer.source.created'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_CUSTOMER_SOURCE_DELETED","title":"<code>tests.FAKE_EVENT_CUSTOMER_SOURCE_DELETED = deepcopy(FAKE_EVENT_CUSTOMER_SOURCE_CREATED)</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_CUSTOMER_SOURCE_DELETED_DUPE","title":"<code>tests.FAKE_EVENT_CUSTOMER_SOURCE_DELETED_DUPE = deepcopy(FAKE_EVENT_CUSTOMER_SOURCE_DELETED)</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_CUSTOMER_SUBSCRIPTION_CREATED","title":"<code>tests.FAKE_EVENT_CUSTOMER_SUBSCRIPTION_CREATED = {'id': 'evt_38DHch3wHD2eZvKYlCT2oe5ff3', 'object': 'event', 'api_version': '2016-03-07', 'created': 1439229084, 'data': {'object': deepcopy(FAKE_SUBSCRIPTION)}, 'livemode': False, 'pending_webhooks': 0, 'request': 'req_6l87IHch3diaDj', 'type': 'customer.subscription.created'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_CUSTOMER_SUBSCRIPTION_DELETED","title":"<code>tests.FAKE_EVENT_CUSTOMER_SUBSCRIPTION_DELETED = deepcopy(FAKE_EVENT_CUSTOMER_SUBSCRIPTION_CREATED)</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_CUSTOMER_UPDATED","title":"<code>tests.FAKE_EVENT_CUSTOMER_UPDATED = deepcopy(FAKE_EVENT_CUSTOMER_CREATED)</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_CUSTOM_ACCOUNT_UPDATED","title":"<code>tests.FAKE_EVENT_CUSTOM_ACCOUNT_UPDATED = dict(load_fixture('event_account_updated_custom.json'))</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_DISPUTE_CLOSED","title":"<code>tests.FAKE_EVENT_DISPUTE_CLOSED = {'id': 'evt_1JAyTxJSZQVUcJYgNk1Jqu8o', 'object': 'event', 'api_version': '2020-08-27', 'created': 1439229084, 'data': {'object': deepcopy(FAKE_DISPUTE_IV)}, 'livemode': False, 'pending_webhooks': 0, 'request': 'req_6lsB7hkicwhaDj', 'type': 'charge.dispute.closed'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_DISPUTE_CREATED","title":"<code>tests.FAKE_EVENT_DISPUTE_CREATED = {'id': 'evt_16YKQi2eZvKYlo2CT2oe5ff3', 'object': 'event', 'api_version': '2017-08-15', 'created': 1439229084, 'data': {'object': deepcopy(FAKE_DISPUTE_I)}, 'livemode': False, 'pending_webhooks': 0, 'request': 'req_6lsB7hkicwhaDj', 'type': 'charge.dispute.created'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_DISPUTE_FUNDS_REINSTATED_FULL","title":"<code>tests.FAKE_EVENT_DISPUTE_FUNDS_REINSTATED_FULL = {'id': 'evt_1JAyTxJSZQVUcJYgNk1Jqu8o', 'object': 'event', 'api_version': '2020-08-27', 'created': 1439229084, 'data': {'object': deepcopy(FAKE_DISPUTE_V_FULL)}, 'livemode': False, 'pending_webhooks': 0, 'request': 'req_6lsB7hkicwhaDj', 'type': 'charge.dispute.funds_reinstated'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_DISPUTE_FUNDS_REINSTATED_PARTIAL","title":"<code>tests.FAKE_EVENT_DISPUTE_FUNDS_REINSTATED_PARTIAL = {'id': 'evt_1JAyTxJSZQVUcJYgNk1Jqu8o', 'object': 'event', 'api_version': '2020-08-27', 'created': 1439229084, 'data': {'object': deepcopy(FAKE_DISPUTE_V_PARTIAL)}, 'livemode': False, 'pending_webhooks': 0, 'request': 'req_6lsB7hkicwhaDj', 'type': 'charge.dispute.funds_reinstated'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_DISPUTE_FUNDS_WITHDRAWN","title":"<code>tests.FAKE_EVENT_DISPUTE_FUNDS_WITHDRAWN = {'id': 'evt_1JAyTxJSZQVUcJYgNk1Jqu8o', 'object': 'event', 'api_version': '2020-08-27', 'created': 1439229084, 'data': {'object': deepcopy(FAKE_DISPUTE_II)}, 'livemode': False, 'pending_webhooks': 0, 'request': 'req_6lsB7hkicwhaDj', 'type': 'charge.dispute.funds_withdrawn'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_DISPUTE_UPDATED","title":"<code>tests.FAKE_EVENT_DISPUTE_UPDATED = {'id': 'evt_1JAyTxJSZQVUcJYgNk1Jqu8o', 'object': 'event', 'api_version': '2020-08-27', 'created': 1439229084, 'data': {'object': deepcopy(FAKE_DISPUTE_III)}, 'livemode': False, 'pending_webhooks': 0, 'request': 'req_6lsB7hkicwhaDj', 'type': 'charge.dispute.funds_withdrawn'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_EXPRESS_ACCOUNT_UPDATED","title":"<code>tests.FAKE_EVENT_EXPRESS_ACCOUNT_UPDATED = dict(load_fixture('event_account_updated_express.json'))</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_FILE_CREATED","title":"<code>tests.FAKE_EVENT_FILE_CREATED = {'id': 'evt_1J5TusR44xKqawmIQVXSrGyf', 'object': 'event', 'api_version': '2020-08-27', 'created': 1439229084, 'data': {'object': deepcopy(FAKE_FILEUPLOAD_ICON)}, 'livemode': False, 'pending_webhooks': 0, 'request': 'req_sTSstDDIOpKi2w', 'type': 'file.created'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_INVOICEITEM_CREATED","title":"<code>tests.FAKE_EVENT_INVOICEITEM_CREATED = {'id': 'evt_187IHD2eZvKYlo2C7SXedrZk', 'object': 'event', 'api_version': '2016-03-07', 'created': 1462338623, 'data': {'object': deepcopy(FAKE_INVOICEITEM)}, 'livemode': False, 'pending_webhooks': 0, 'request': 'req_8O4Qbs2EDobDVT', 'type': 'invoiceitem.created'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_INVOICEITEM_DELETED","title":"<code>tests.FAKE_EVENT_INVOICEITEM_DELETED = deepcopy(FAKE_EVENT_INVOICEITEM_CREATED)</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_INVOICE_CREATED","title":"<code>tests.FAKE_EVENT_INVOICE_CREATED = {'id': 'evt_187IHD2eZvKYlo2C6YKQi2eZ', 'object': 'event', 'api_version': '2016-03-07', 'created': 1462338623, 'data': {'object': deepcopy(FAKE_INVOICE)}, 'livemode': False, 'pending_webhooks': 0, 'request': 'req_8O4sB7hkDobVT', 'type': 'invoice.created'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_INVOICE_DELETED","title":"<code>tests.FAKE_EVENT_INVOICE_DELETED = deepcopy(FAKE_EVENT_INVOICE_CREATED)</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_INVOICE_UPCOMING","title":"<code>tests.FAKE_EVENT_INVOICE_UPCOMING = {'id': 'evt_187IHD2eZvKYlo2C6YKQi2bc', 'object': 'event', 'api_version': '2017-02-14', 'created': 1501859641, 'data': {'object': deepcopy(FAKE_INVOICE)}, 'livemode': False, 'pending_webhooks': 0, 'request': 'req_8O4sB7hkDobZA', 'type': 'invoice.upcoming'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_PAYMENT_INTENT_SUCCEEDED_DESTINATION_CHARGE","title":"<code>tests.FAKE_EVENT_PAYMENT_INTENT_SUCCEEDED_DESTINATION_CHARGE = {'id': 'evt_1FG74XB7kbjcJ8Qq22i2BPdt', 'object': 'event', 'api_version': '2019-05-16', 'created': 1567874857, 'data': {'object': deepcopy(FAKE_PAYMENT_INTENT_DESTINATION_CHARGE)}, 'livemode': False, 'pending_webhooks': 1, 'request': {'id': 'req_AJAmnJE4eiPIzb', 'idempotency_key': None}, 'type': 'payment_intent.succeeded'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_PAYMENT_METHOD_ATTACHED","title":"<code>tests.FAKE_EVENT_PAYMENT_METHOD_ATTACHED = {'id': 'evt_1FDOwDKatMEEd998o5FyxxAB', 'object': 'event', 'api_version': '2019-08-14', 'created': 1567228549, 'data': {'object': deepcopy(FAKE_PAYMENT_METHOD_I)}, 'livemode': False, 'pending_webhooks': 0, 'request': {'id': 'req_9c9djVqxUZIKNr', 'idempotency_key': None}, 'type': 'payment_method.attached'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_PAYMENT_METHOD_DETACHED","title":"<code>tests.FAKE_EVENT_PAYMENT_METHOD_DETACHED = {'id': 'evt_1FDOwDKatMEEd998o5Fdadfds', 'object': 'event', 'api_version': '2019-08-14', 'created': 1567228549, 'data': {'object': deepcopy(FAKE_PAYMENT_METHOD_I)}, 'livemode': False, 'pending_webhooks': 0, 'request': {'id': 'req_9c9djVqxcxgdfg', 'idempotency_key': None}, 'type': 'payment_method.detached'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_PLAN_CREATED","title":"<code>tests.FAKE_EVENT_PLAN_CREATED = {'id': 'evt_1877X72eZvKYlo2CLK6daFxu', 'object': 'event', 'api_version': '2016-03-07', 'created': 1462297325, 'data': {'object': deepcopy(FAKE_PLAN)}, 'livemode': False, 'pending_webhooks': 0, 'request': 'req_8NtJXPttxSvFyM', 'type': 'plan.created'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_PLAN_DELETED","title":"<code>tests.FAKE_EVENT_PLAN_DELETED = deepcopy(FAKE_EVENT_PLAN_CREATED)</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_PLAN_REQUEST_IS_OBJECT","title":"<code>tests.FAKE_EVENT_PLAN_REQUEST_IS_OBJECT = {'id': 'evt_1AcdbXXXXXXXXXXXXXXXXXXX', 'object': 'event', 'api_version': '2017-06-05', 'created': 1499361420, 'data': {'object': FAKE_PLAN, 'previous_attributes': {'name': 'Plan anual test4'}}, 'livemode': False, 'pending_webhooks': 1, 'request': {'id': 'req_AyamqQWoi5AMR2', 'idempotency_key': None}, 'type': 'plan.updated'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_PRICE_CREATED","title":"<code>tests.FAKE_EVENT_PRICE_CREATED = {'id': 'evt_1HlZWCFz0jfFqjGsXOiPW10r', 'object': 'event', 'api_version': '2020-03-02', 'created': 1604925044, 'data': {'object': deepcopy(FAKE_PRICE)}, 'livemode': False, 'pending_webhooks': 0, 'request': {'id': 'req_Nq7dDuP0HRrqcP', 'idempotency_key': None}, 'type': 'price.created'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_PRICE_DELETED","title":"<code>tests.FAKE_EVENT_PRICE_DELETED = deepcopy(FAKE_EVENT_PRICE_CREATED)</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_PRICE_UPDATED","title":"<code>tests.FAKE_EVENT_PRICE_UPDATED = {'id': 'evt_1HlZbxFz0jfFqjGsZwiHHf7h', 'object': 'event', 'api_version': '2020-03-02', 'created': 1604925401, 'data': {'object': FAKE_PRICE, 'previous_attributes': {'unit_amount': 2000, 'unit_amount_decimal': '2000'}}, 'livemode': False, 'pending_webhooks': 0, 'request': {'id': 'req_78pnxbwPMvOIwe', 'idempotency_key': None}, 'type': 'price.updated'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_SESSION_COMPLETED","title":"<code>tests.FAKE_EVENT_SESSION_COMPLETED = {'id': 'evt_1JAyTxJSZQVUcJYgNk1Jqu8o', 'object': 'event', 'api_version': '2020-08-27', 'created': 1439229084, 'data': {'object': deepcopy(FAKE_SESSION_I)}, 'livemode': False, 'pending_webhooks': 0, 'request': 'req_6lsB7hkicwhaDj', 'type': 'checkout.session.completed'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_STANDARD_ACCOUNT_UPDATED","title":"<code>tests.FAKE_EVENT_STANDARD_ACCOUNT_UPDATED = dict(load_fixture('event_account_updated_standard.json'))</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_SUBSCRIPTION_SCHEDULE_ABORTED","title":"<code>tests.FAKE_EVENT_SUBSCRIPTION_SCHEDULE_ABORTED = deepcopy(FAKE_EVENT_SUBSCRIPTION_SCHEDULE_CREATED)</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_SUBSCRIPTION_SCHEDULE_CANCELED","title":"<code>tests.FAKE_EVENT_SUBSCRIPTION_SCHEDULE_CANCELED = deepcopy(FAKE_EVENT_SUBSCRIPTION_SCHEDULE_CREATED)</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_SUBSCRIPTION_SCHEDULE_COMPLETED","title":"<code>tests.FAKE_EVENT_SUBSCRIPTION_SCHEDULE_COMPLETED = deepcopy(FAKE_EVENT_SUBSCRIPTION_SCHEDULE_CREATED)</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_SUBSCRIPTION_SCHEDULE_CREATED","title":"<code>tests.FAKE_EVENT_SUBSCRIPTION_SCHEDULE_CREATED = {'id': 'evt_1Hm7q6Fz0jfFqjGsJSG4N91w', 'object': 'event', 'api_version': '2020-03-02', 'created': 1605056974, 'data': {'object': deepcopy(FAKE_SUBSCRIPTION_SCHEDULE)}, 'livemode': False, 'pending_webhooks': 0, 'request': {'id': 'req_Pttj3aW5RJwees', 'idempotency_key': 'd2a77191-cc07-4c60-abab-5fb11357bd63'}, 'type': 'subscription_schedule.created'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_SUBSCRIPTION_SCHEDULE_EXPIRING","title":"<code>tests.FAKE_EVENT_SUBSCRIPTION_SCHEDULE_EXPIRING = deepcopy(FAKE_EVENT_SUBSCRIPTION_SCHEDULE_CREATED)</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_SUBSCRIPTION_SCHEDULE_RELEASED","title":"<code>tests.FAKE_EVENT_SUBSCRIPTION_SCHEDULE_RELEASED = deepcopy(FAKE_EVENT_SUBSCRIPTION_SCHEDULE_CREATED)</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_SUBSCRIPTION_SCHEDULE_UPDATED","title":"<code>tests.FAKE_EVENT_SUBSCRIPTION_SCHEDULE_UPDATED = deepcopy(FAKE_EVENT_SUBSCRIPTION_SCHEDULE_CREATED)</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_TAX_ID_CREATED","title":"<code>tests.FAKE_EVENT_TAX_ID_CREATED = {'id': 'evt_16YKQi2eZvKYlo2CT2oe5ff3', 'object': 'event', 'api_version': '2020-08-27', 'created': 1439229084, 'data': {'object': deepcopy(FAKE_TAX_ID)}, 'livemode': False, 'pending_webhooks': 0, 'request': 'req_ZoH080M8fny6yR', 'type': 'customer.tax_id.created'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_TAX_ID_DELETED","title":"<code>tests.FAKE_EVENT_TAX_ID_DELETED = deepcopy(FAKE_EVENT_TAX_ID_UPDATED)</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_TAX_ID_UPDATED","title":"<code>tests.FAKE_EVENT_TAX_ID_UPDATED = {'id': 'evt_1J6Fy3JSZQVUcJYgnddjnMzx', 'object': 'event', 'api_version': '2020-08-27', 'created': 1439229084, 'data': {'object': deepcopy(FAKE_TAX_ID_UPDATED)}, 'livemode': False, 'pending_webhooks': 0, 'request': 'req_ZoH080M8fny6yR', 'type': 'customer.tax_id.updated'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_TEST_CHARGE_SUCCEEDED","title":"<code>tests.FAKE_EVENT_TEST_CHARGE_SUCCEEDED = deepcopy(FAKE_EVENT_CHARGE_SUCCEEDED)</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_TRANSFER_CREATED","title":"<code>tests.FAKE_EVENT_TRANSFER_CREATED = {'id': 'evt_16igNU2eZvKYlo2CYyMkYvet', 'object': 'event', 'api_version': '2016-03-07', 'created': 1441696732, 'data': {'object': deepcopy(FAKE_TRANSFER)}, 'livemode': False, 'pending_webhooks': 0, 'request': 'req_6wZW9MskhYU15Y', 'type': 'transfer.created'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EVENT_TRANSFER_DELETED","title":"<code>tests.FAKE_EVENT_TRANSFER_DELETED = deepcopy(FAKE_EVENT_TRANSFER_CREATED)</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_EXPRESS_ACCOUNT","title":"<code>tests.FAKE_EXPRESS_ACCOUNT = AccountDict(load_fixture('account_express_acct_1IuHosQveW0ONQsd.json'))</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_FILEUPLOAD_ICON","title":"<code>tests.FAKE_FILEUPLOAD_ICON = {'created': 1550134074, 'filename': 'icon_preview.png', 'id': 'file_4hshrsKatMEEd6736724HYAXyj', 'links': {'data': [{'created': 1550134074, 'expired': False, 'expires_at': 1850134074, 'file': 'file_4hshrsKatMEEd6736724HYAXyj', 'id': 'link_4jsdgsKatMEEd673672V0JSH', 'livemode': False, 'metadata': {}, 'object': 'file_link', 'url': 'https://files.stripe.com/links/fl_test_69vG4ISDx9Chjklasrf06BJeQo'}], 'has_more': False, 'object': 'list', 'url': '/v1/file_links?file=file_4hshrsKatMEEd6736724HYAXyj'}, 'object': 'file_upload', 'purpose': 'business_logo', 'size': 6650, 'type': 'png', 'url': 'https://files.stripe.com/files/f_test_BTJFKcS7VDahgkjqw8EVNWlM'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_FILEUPLOAD_LOGO","title":"<code>tests.FAKE_FILEUPLOAD_LOGO = {'created': 1550134074, 'filename': 'logo_preview.png', 'id': 'file_1E3fssKatMEEd6736724HYAXyj', 'links': {'data': [{'created': 1550134074, 'expired': False, 'expires_at': 1850134074, 'file': 'file_1E3fssKatMEEd6736724HYAXyj', 'id': 'link_1E3fssKatMEEd673672V0JSH', 'livemode': False, 'metadata': {}, 'object': 'file_link', 'url': 'https://files.stripe.com/links/fl_test_69vG4ISDx9Chjklasrf06BJeQo'}], 'has_more': False, 'object': 'list', 'url': '/v1/file_links?file=file_1E3fssKatMEEd6736724HYAXyj'}, 'object': 'file_upload', 'purpose': 'business_logo', 'size': 6650, 'type': 'png', 'url': 'https://files.stripe.com/files/f_test_BTJFKcS7VDahgkjqw8EVNWlM'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_INVOICE","title":"<code>tests.FAKE_INVOICE = InvoiceDict(FAKE_INVOICE)</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_INVOICEITEM","title":"<code>tests.FAKE_INVOICEITEM = {'id': 'ii_fakefakefakefakefake0001', 'object': 'invoiceitem', 'amount': 2000, 'currency': 'usd', 'customer': FAKE_CUSTOMER['id'], 'date': 1439033216, 'description': 'One-time setup fee', 'discountable': True, 'discounts': [], 'invoice': FAKE_INVOICE['id'], 'livemode': False, 'metadata': {'key1': 'value1', 'key2': 'value2'}, 'period': {'start': 1439033216, 'end': 1439033216}, 'plan': None, 'price': None, 'proration': False, 'quantity': None, 'subscription': None, 'subscription_item': None, 'tax_rates': [], 'unit_amount': 2000, 'unit_amount_decimal': '2000'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_INVOICEITEM_II","title":"<code>tests.FAKE_INVOICEITEM_II = {'id': 'ii_fakefakefakefakefake0001', 'object': 'invoiceitem', 'amount': 2000, 'currency': 'usd', 'customer': FAKE_CUSTOMER_II['id'], 'date': 1439033216, 'description': 'One-time setup fee', 'discountable': True, 'discounts': [], 'invoice': FAKE_INVOICE_II['id'], 'livemode': False, 'metadata': {'key1': 'value1', 'key2': 'value2'}, 'period': {'start': 1439033216, 'end': 1439033216}, 'plan': None, 'price': None, 'proration': False, 'quantity': None, 'subscription': None, 'subscription_item': None, 'tax_rates': [], 'unit_amount': 2000, 'unit_amount_decimal': '2000'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_INVOICEITEM_III","title":"<code>tests.FAKE_INVOICEITEM_III = {'id': 'ii_fakefakefakefakefake0001', 'object': 'invoiceitem', 'amount': 2000, 'currency': 'usd', 'customer': FAKE_CUSTOMER_II['id'], 'date': 1439033216, 'description': 'One-time setup fee', 'discountable': True, 'discounts': [], 'invoice': FAKE_INVOICE_II['id'], 'livemode': False, 'metadata': {'key1': 'value1', 'key2': 'value2'}, 'period': {'start': 1439033216, 'end': 1439033216}, 'plan': None, 'price': None, 'proration': False, 'quantity': None, 'subscription': None, 'subscription_item': None, 'tax_rates': [FAKE_TAX_RATE_EXAMPLE_1_VAT], 'unit_amount': 2000, 'unit_amount_decimal': '2000'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_INVOICE_II","title":"<code>tests.FAKE_INVOICE_II = InvoiceDict({'id': 'in_16af5A2eZvKYlo2CJjANLL81', 'object': 'invoice', 'amount_due': 3000, 'amount_paid': 0, 'amount_remaining': 3000, 'application_fee_amount': None, 'attempt_count': 1, 'attempted': True, 'auto_advance': True, 'collection_method': 'charge_automatically', 'charge': FAKE_CHARGE_II['id'], 'currency': 'usd', 'customer': 'cus_4UbFSo9tl62jqj', 'created': 1439785128, 'description': None, 'discount': None, 'discounts': [], 'due_date': None, 'ending_balance': 0, 'lines': {'data': [deepcopy(FAKE_LINE_ITEM_SUBSCRIPTION)], 'total_count': 1, 'object': 'list', 'url': '/v1/invoices/in_16af5A2eZvKYlo2CJjANLL81/lines'}, 'livemode': False, 'metadata': {}, 'next_payment_attempt': 1440048103, 'number': 'XXXXXXX-0002', 'paid': False, 'period_end': 1439784771, 'period_start': 1439698371, 'receipt_number': None, 'starting_balance': 0, 'statement_descriptor': None, 'subscription': FAKE_SUBSCRIPTION_III['id'], 'subtotal': 3000, 'tax': None, 'tax_percent': None, 'total': 3000, 'webhooks_delivered_at': 1439785139})</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_INVOICE_III","title":"<code>tests.FAKE_INVOICE_III = InvoiceDict({'id': 'in_16Z9dP2eZvKYlo2CgFHgFx2Z', 'object': 'invoice', 'amount_due': 0, 'amount_paid': 0, 'amount_remaining': 0, 'application_fee_amount': None, 'attempt_count': 0, 'attempted': True, 'auto_advance': True, 'collection_method': 'charge_automatically', 'charge': None, 'created': 1439425915, 'currency': 'usd', 'customer': 'cus_6lsBvm5rJ0zyHc', 'description': None, 'discount': None, 'discounts': [], 'due_date': None, 'ending_balance': 20, 'lines': {'data': [deepcopy(FAKE_LINE_ITEM_SUBSCRIPTION)], 'total_count': 1, 'object': 'list', 'url': '/v1/invoices/in_16Z9dP2eZvKYlo2CgFHgFx2Z/lines'}, 'livemode': False, 'metadata': {}, 'next_payment_attempt': None, 'number': 'XXXXXXX-0003', 'paid': False, 'period_end': 1439424571, 'period_start': 1436746171, 'receipt_number': None, 'starting_balance': 0, 'statement_descriptor': None, 'subscription': FAKE_SUBSCRIPTION['id'], 'subtotal': 20, 'tax': None, 'tax_percent': None, 'total': 20, 'webhooks_delivered_at': 1439426955})</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_INVOICE_IV","title":"<code>tests.FAKE_INVOICE_IV = InvoiceDict(load_fixture('invoice_in_fakefakefakefakefake0004.json'))</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_INVOICE_METERED_SUBSCRIPTION","title":"<code>tests.FAKE_INVOICE_METERED_SUBSCRIPTION = InvoiceDict({'id': 'in_1JGGM6JSZQVUcJYgpWqfBOIl', 'livemode': False, 'created': 1439425915, 'metadata': {}, 'description': '', 'amount_due': '1.05', 'amount_paid': '1.05', 'amount_remaining': '0.00', 'application_fee_amount': None, 'attempt_count': 1, 'attempted': True, 'auto_advance': False, 'collection_method': 'charge_automatically', 'currency': 'usd', 'customer': FAKE_CUSTOMER_II['id'], 'object': 'invoice', 'charge': None, 'discount': None, 'discounts': [], 'due_date': None, 'ending_balance': 0, 'lines': {'data': [deepcopy(FAKE_LINE_ITEM_SUBSCRIPTION)], 'total_count': 1, 'object': 'list', 'url': '/v1/invoices/in_1JGGM6JSZQVUcJYgpWqfBOIl/lines'}, 'next_payment_attempt': None, 'number': '84DE1540-0004', 'paid': True, 'period_end': 1439424571, 'period_start': 1436746171, 'receipt_number': None, 'starting_balance': 0, 'statement_descriptor': None, 'subscription': FAKE_INVOICE_METERED_SUBSCRIPTION_USAGE['id'], 'subtotal': '1.00', 'tax': None, 'tax_percent': None, 'total': '1.00', 'webhooks_delivered_at': 1439426955})</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_INVOICE_METERED_SUBSCRIPTION_USAGE","title":"<code>tests.FAKE_INVOICE_METERED_SUBSCRIPTION_USAGE = deepcopy(FAKE_SUBSCRIPTION_METERED)</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_LINE_ITEM","title":"<code>tests.FAKE_LINE_ITEM = load_fixture('line_item_il_invoice_item_fakefakefakefakefake0001.json')</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_LINE_ITEM_SUBSCRIPTION","title":"<code>tests.FAKE_LINE_ITEM_SUBSCRIPTION = load_fixture('line_item_il_invoice_item_fakefakefakefakefake0002.json')</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_PAYMENT_INTENT_DESTINATION_CHARGE","title":"<code>tests.FAKE_PAYMENT_INTENT_DESTINATION_CHARGE = load_fixture('payment_intent_pi_destination_charge.json')</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_PAYMENT_INTENT_I","title":"<code>tests.FAKE_PAYMENT_INTENT_I = load_fixture('payment_intent_pi_fakefakefakefakefake0001.json')</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_PAYMENT_INTENT_II","title":"<code>tests.FAKE_PAYMENT_INTENT_II = deepcopy(FAKE_PAYMENT_INTENT_I)</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_PAYMENT_METHOD_I","title":"<code>tests.FAKE_PAYMENT_METHOD_I = PaymentMethodDict(load_fixture('payment_method_pm_fakefakefakefake0001.json'))</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_PAYMENT_METHOD_II","title":"<code>tests.FAKE_PAYMENT_METHOD_II = deepcopy(FAKE_PAYMENT_METHOD_I)</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_PAYOUT_CUSTOM_BANK_ACCOUNT","title":"<code>tests.FAKE_PAYOUT_CUSTOM_BANK_ACCOUNT = PayoutDict(load_fixture('payout_custom_bank_account.json'))</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_PAYOUT_CUSTOM_CARD","title":"<code>tests.FAKE_PAYOUT_CUSTOM_CARD = PayoutDict(load_fixture('payout_custom_card.json'))</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_PLAN","title":"<code>tests.FAKE_PLAN = load_fixture('plan_gold21323.json')</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_PLAN_II","title":"<code>tests.FAKE_PLAN_II = load_fixture('plan_silver41294.json')</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_PLAN_METERED","title":"<code>tests.FAKE_PLAN_METERED = {'id': 'plan_fakemetered', 'billing_scheme': 'per_unit', 'object': 'plan', 'active': True, 'aggregate_usage': 'sum', 'amount': 200, 'collection_method': 'per_unit', 'created': 1552632817, 'currency': 'usd', 'interval': 'month', 'interval_count': 1, 'livemode': False, 'metadata': {}, 'nickname': 'Sum Metered Plan', 'product': FAKE_PRODUCT['id'], 'tiers': None, 'tiers_mode': None, 'transform_usage': None, 'trial_period_days': None, 'usage_type': 'metered'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_PLATFORM_ACCOUNT","title":"<code>tests.FAKE_PLATFORM_ACCOUNT = deepcopy(FAKE_STANDARD_ACCOUNT)</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_PRICE","title":"<code>tests.FAKE_PRICE = load_fixture('price_gold21323.json')</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_PRICE_II","title":"<code>tests.FAKE_PRICE_II = load_fixture('price_silver41294.json')</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_PRICE_METERED","title":"<code>tests.FAKE_PRICE_METERED = {'active': True, 'billing_scheme': 'per_unit', 'created': 1552632817, 'currency': 'usd', 'id': 'price_fakemetered', 'livemode': False, 'lookup_key': None, 'metadata': {}, 'nickname': 'Sum Metered Price', 'object': 'price', 'product': FAKE_PRODUCT['id'], 'recurring': {'aggregate_usage': 'sum', 'interval': 'month', 'interval_count': 1, 'trial_period_days': None, 'usage_type': 'metered'}, 'tiers_mode': None, 'transform_quantity': None, 'type': 'recurring', 'unit_amount': 200, 'unit_amount_decimal': '200'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_PRICE_ONETIME","title":"<code>tests.FAKE_PRICE_ONETIME = {'active': True, 'billing_scheme': 'per_unit', 'created': 1552632818, 'currency': 'usd', 'id': 'price_fakeonetime', 'livemode': False, 'lookup_key': None, 'metadata': {}, 'nickname': 'One-Time Price', 'object': 'price', 'product': FAKE_PRODUCT['id'], 'recurring': None, 'tiers_mode': None, 'transform_quantity': None, 'type': 'one_time', 'unit_amount': 2000, 'unit_amount_decimal': '2000'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_PRICE_TIER","title":"<code>tests.FAKE_PRICE_TIER = {'active': True, 'billing_scheme': 'tiered', 'created': 1386247539, 'currency': 'usd', 'id': 'price_tier21323', 'livemode': False, 'lookup_key': None, 'metadata': {}, 'nickname': 'New price name', 'object': 'price', 'product': FAKE_PRODUCT['id'], 'recurring': {'aggregate_usage': None, 'interval': 'month', 'interval_count': 1, 'trial_period_days': None, 'usage_type': 'licensed'}, 'tiers': [{'flat_amount': 4900, 'flat_amount_decimal': '4900', 'unit_amount': 1000, 'unit_amount_decimal': '1000', 'up_to': 5}, {'flat_amount': None, 'flat_amount_decimal': None, 'unit_amount': 900, 'unit_amount_decimal': '900', 'up_to': None}], 'tiers_mode': 'graduated', 'transform_quantity': None, 'type': 'recurring', 'unit_amount': None, 'unit_amount_decimal': None}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_PRODUCT","title":"<code>tests.FAKE_PRODUCT = load_fixture('product_prod_fake1.json')</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_REFUND","title":"<code>tests.FAKE_REFUND = {'id': 're_1E0he8KatMEEd8456454S01Vc', 'object': 'refund', 'amount': FAKE_CHARGE_REFUNDED['amount_refunded'], 'balance_transaction': 'txn_1E0he8KaGRDEd998TDswMZuN', 'charge': FAKE_CHARGE_REFUNDED['id'], 'created': 1549425864, 'currency': 'usd', 'metadata': {}, 'reason': None, 'receipt_number': None, 'source_transfer_reversal': None, 'status': 'succeeded', 'transfer_reversal': None}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_SESSION_I","title":"<code>tests.FAKE_SESSION_I = {'id': 'cs_test_OAgNmy75Td25OeREvKUs8XZ7SjMPO9qAplqHO1sBaEjOg9fYbaeMh2nA', 'object': 'checkout.session', 'amount_total': 1500, 'amount_subtotal': 1500, 'billing_address_collection': None, 'cancel_url': 'https://example.com/cancel', 'client_reference_id': None, 'currency': 'usd', 'customer': 'cus_6lsBvm5rJ0zyHc', 'customer_email': None, 'display_items': [{'amount': 1500, 'currency': 'usd', 'custom': {'description': 'Comfortable cotton t-shirt', 'images': None, 'name': 'T-shirt'}, 'quantity': 2, 'type': 'custom'}], 'livemode': False, 'locale': None, 'mode': None, 'payment_intent': FAKE_PAYMENT_INTENT_I['id'], 'payment_method_types': ['card'], 'payment_status': 'unpaid', 'setup_intent': FAKE_SETUP_INTENT_II['id'], 'shipping_address_collection': {}, 'shipping_cost': {}, 'shipping_details': {}, 'shipping_options': {}, 'status': 'open', 'submit_type': None, 'subscription': None, 'success_url': 'https://example.com/success', 'metadata': {}, 'line_tems': {}, 'url': '', 'total_details': {}}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_SETUP_INTENT_DESTINATION_CHARGE","title":"<code>tests.FAKE_SETUP_INTENT_DESTINATION_CHARGE = load_fixture('setup_intent_pi_destination_charge.json')</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_SETUP_INTENT_I","title":"<code>tests.FAKE_SETUP_INTENT_I = {'id': 'seti_fakefakefakefake0001', 'object': 'setup_intent', 'cancellation_reason': None, 'payment_method_types': ['card'], 'status': 'requires_payment_method', 'usage': 'off_session', 'payment_method': None, 'on_behalf_of': None, 'customer': None}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_SETUP_INTENT_II","title":"<code>tests.FAKE_SETUP_INTENT_II = {'application': None, 'cancellation_reason': None, 'client_secret': 'seti_1J0g0WJSZQVUcJYgWE2XSi1K_secret_Jdxw2mOaIEHBdE6eTsfJ2IfmamgNJaF', 'created': 1623301244, 'customer': 'cus_6lsBvm5rJ0zyHc', 'description': None, 'id': 'seti_1J0g0WJSZQVUcJYgWE2XSi1K', 'last_setup_error': None, 'latest_attempt': 'setatt_1J0g0WJSZQVUcJYgsrFgwxVh', 'livemode': False, 'mandate': None, 'metadata': {}, 'next_action': None, 'object': 'setup_intent', 'on_behalf_of': None, 'payment_method': 'pm_fakefakefakefake0001', 'payment_method_options': {'card': {'request_three_d_secure': 'automatic'}}, 'payment_method_types': ['card'], 'single_use_mandate': None, 'status': 'succeeded', 'usage': 'off_session'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_SHIPPING_RATE","title":"<code>tests.FAKE_SHIPPING_RATE = load_fixture('shipping_rate_shr_fakefakefakefakefake0001.json')</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_SHIPPING_RATE_WITH_TAX_CODE","title":"<code>tests.FAKE_SHIPPING_RATE_WITH_TAX_CODE = load_fixture('shipping_rate_shr_fakefakefakefakefake0002.json')</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_SOURCE","title":"<code>tests.FAKE_SOURCE = SourceDict(load_fixture('source_src_fakefakefakefakefake0001.json'))</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_SOURCE_II","title":"<code>tests.FAKE_SOURCE_II = SourceDict({'id': 'src_1DuuGjkE6hxDGaasasjdlajl', 'object': 'source', 'amount': None, 'card': {'address_line1_check': None, 'address_zip_check': 'pass', 'brand': 'Visa', 'country': 'US', 'cvc_check': 'pass', 'dynamic_last4': None, 'exp_month': 10, 'exp_year': 2029, 'fingerprint': 'TmOrYzPdAoO6YFNB', 'funding': 'credit', 'last4': '4242', 'name': None, 'three_d_secure': 'optional', 'tokenization_method': None}, 'client_secret': 'src_client_secret_ENg5dyB1KTXCAEJGJQWEf67X', 'created': 1548046215, 'currency': None, 'flow': 'none', 'livemode': False, 'metadata': {'djstripe_test_fake_id': 'src_fakefakefakefakefake0002'}, 'owner': {'address': {'city': None, 'country': None, 'line1': None, 'line2': None, 'postal_code': '90210', 'state': None}, 'email': None, 'name': None, 'phone': None, 'verified_address': None, 'verified_email': None, 'verified_name': None, 'verified_phone': None}, 'statement_descriptor': None, 'status': 'consumed', 'type': 'card', 'usage': 'reusable'})</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_SOURCE_TRANSACTION","title":"<code>tests.FAKE_SOURCE_TRANSACTION = load_fixture('sourcetransaction_srctxn_fakefakefakefakefake0001.json')</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_STANDARD_ACCOUNT","title":"<code>tests.FAKE_STANDARD_ACCOUNT = AccountDict(load_fixture('account_standard_acct_1Fg9jUA3kq9o1aTc.json'))</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_SUBSCRIPTION","title":"<code>tests.FAKE_SUBSCRIPTION = SubscriptionDict(load_fixture('subscription_sub_fakefakefakefakefake0001.json'))</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_SUBSCRIPTION_CANCELED","title":"<code>tests.FAKE_SUBSCRIPTION_CANCELED = deepcopy(FAKE_SUBSCRIPTION)</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_SUBSCRIPTION_CANCELED_AT_PERIOD_END","title":"<code>tests.FAKE_SUBSCRIPTION_CANCELED_AT_PERIOD_END = deepcopy(FAKE_SUBSCRIPTION)</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_SUBSCRIPTION_II","title":"<code>tests.FAKE_SUBSCRIPTION_II = SubscriptionDict(load_fixture('subscription_sub_fakefakefakefakefake0002.json'))</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_SUBSCRIPTION_III","title":"<code>tests.FAKE_SUBSCRIPTION_III = SubscriptionDict(load_fixture('subscription_sub_fakefakefakefakefake0003.json'))</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_SUBSCRIPTION_ITEM","title":"<code>tests.FAKE_SUBSCRIPTION_ITEM = {'id': 'si_JiphMAMFxZKW8s', 'object': 'subscription_item', 'metadata': {}, 'billing_thresholds': '', 'created': 1441907581, 'plan': deepcopy(FAKE_PLAN_METERED), 'price': deepcopy(FAKE_PRICE_METERED), 'quantity': 1, 'subscription': FAKE_INVOICE_METERED_SUBSCRIPTION_USAGE['id'], 'tax_rates': []}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_SUBSCRIPTION_ITEM_METERED","title":"<code>tests.FAKE_SUBSCRIPTION_ITEM_METERED = {'id': 'si_JiphMAMFxZKW8s', 'object': 'subscription_item', 'metadata': {}, 'billing_thresholds': '', 'created': 1441907581, 'plan': deepcopy(FAKE_PLAN_METERED), 'price': deepcopy(FAKE_PRICE_METERED), 'quantity': 1, 'subscription': FAKE_SUBSCRIPTION_METERED['id'], 'tax_rates': []}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_SUBSCRIPTION_ITEM_MULTI_PLAN","title":"<code>tests.FAKE_SUBSCRIPTION_ITEM_MULTI_PLAN = {'id': 'si_JiphMAMFxZKW8s', 'object': 'subscription_item', 'metadata': {}, 'billing_thresholds': '', 'created': 1441907581, 'plan': deepcopy(FAKE_PLAN), 'price': deepcopy(FAKE_PRICE), 'quantity': 1, 'subscription': FAKE_SUBSCRIPTION_MULTI_PLAN['id'], 'tax_rates': []}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_SUBSCRIPTION_ITEM_TAX_RATES","title":"<code>tests.FAKE_SUBSCRIPTION_ITEM_TAX_RATES = {'id': 'si_JiphMAMFxZKW8s', 'object': 'subscription_item', 'metadata': {}, 'billing_thresholds': '', 'created': 1441907581, 'plan': deepcopy(FAKE_PLAN_II), 'price': deepcopy(FAKE_PRICE_II), 'quantity': 1, 'subscription': FAKE_SUBSCRIPTION_II['id'], 'tax_rates': [{'id': 'txr_fakefakefakefakefake0001', 'object': 'tax_rate', 'active': True, 'created': 1593225980, 'description': None, 'display_name': 'VAT', 'inclusive': True, 'jurisdiction': 'Example1', 'livemode': False, 'metadata': {'djstripe_test_fake_id': 'txr_fakefakefakefakefake0001'}, 'percentage': 15.0}]}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_SUBSCRIPTION_METERED","title":"<code>tests.FAKE_SUBSCRIPTION_METERED = SubscriptionDict({'id': 'sub_1rn1dp7WgjMtx9', 'object': 'subscription', 'application_fee_percent': None, 'collection_method': 'charge_automatically', 'cancel_at_period_end': False, 'canceled_at': None, 'current_period_end': 1441907581, 'current_period_start': 1439229181, 'customer': 'cus_6lsBvm5rJ0zyHc', 'discount': None, 'ended_at': None, 'metadata': {'djstripe_test_fake_id': 'sub_fakefakefakefakefake0005'}, 'items': {'data': [{'created': 1441907581, 'id': 'si_UXYmKmJp6aWTw6', 'metadata': {}, 'object': 'subscription_item', 'plan': deepcopy(FAKE_PLAN_METERED), 'subscription': 'sub_1rn1dp7WgjMtx9'}]}, 'pause_collection': None, 'plan': deepcopy(FAKE_PLAN_METERED), 'quantity': 1, 'start': 1439229181, 'start_date': 1439229181, 'status': 'active', 'tax_percent': None, 'trial_end': None, 'trial_start': None})</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_SUBSCRIPTION_MULTI_PLAN","title":"<code>tests.FAKE_SUBSCRIPTION_MULTI_PLAN = SubscriptionDict(load_fixture('subscription_sub_fakefakefakefakefake0004.json'))</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_SUBSCRIPTION_NOT_PERIOD_CURRENT","title":"<code>tests.FAKE_SUBSCRIPTION_NOT_PERIOD_CURRENT = deepcopy(FAKE_SUBSCRIPTION)</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_SUBSCRIPTION_SCHEDULE","title":"<code>tests.FAKE_SUBSCRIPTION_SCHEDULE = {'id': 'sub_sched_1Hm7q6Fz0jfFqjGs2OxOSCzD', 'object': 'subscription_schedule', 'canceled_at': None, 'completed_at': None, 'created': 1605056974, 'current_phase': {}, 'customer': 'cus_6lsBvm5rJ0zyHc', 'default_settings': {'billing_cycle_anchor': 'automatic', 'billing_thresholds': None, 'collection_method': 'charge_automatically', 'default_payment_method': None, 'default_source': None, 'invoice_settings': None, 'transfer_data': None}, 'end_behavior': 'release', 'livemode': False, 'metadata': {}, 'phases': [{'add_invoice_items': [], 'application_fee_percent': None, 'billing_cycle_anchor': None, 'billing_thresholds': None, 'collection_method': None, 'coupon': None, 'default_payment_method': None, 'default_tax_rates': [], 'end_date': 1637195591, 'invoice_settings': None, 'plans': [{'billing_thresholds': None, 'plan': FAKE_PLAN_II['id'], 'price': FAKE_PRICE_II['id'], 'quantity': None, 'tax_rates': []}], 'prorate': True, 'proration_behavior': 'create_prorations', 'start_date': 1605659591, 'tax_percent': None, 'transfer_data': None, 'trial_end': None}], 'released_at': None, 'released_subscription': None, 'renewal_interval': None, 'status': 'not_started', 'subscription': FAKE_SUBSCRIPTION['id']}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_TAX_CODE","title":"<code>tests.FAKE_TAX_CODE = load_fixture('tax_code_txcd_fakefakefakefakefake0001.json')</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_TAX_ID","title":"<code>tests.FAKE_TAX_ID = load_fixture('tax_id_txi_fakefakefakefakefake0001.json')</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_TAX_ID_UPDATED","title":"<code>tests.FAKE_TAX_ID_UPDATED = deepcopy(FAKE_TAX_ID)</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_TAX_RATE_EXAMPLE_1_VAT","title":"<code>tests.FAKE_TAX_RATE_EXAMPLE_1_VAT = load_fixture('tax_rate_txr_fakefakefakefakefake0001.json')</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_TAX_RATE_EXAMPLE_2_SALES","title":"<code>tests.FAKE_TAX_RATE_EXAMPLE_2_SALES = load_fixture('tax_rate_txr_fakefakefakefakefake0002.json')</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_TIER_PLAN","title":"<code>tests.FAKE_TIER_PLAN = {'id': 'tier21323', 'object': 'plan', 'active': True, 'amount': None, 'created': 1386247539, 'currency': 'usd', 'interval': 'month', 'interval_count': 1, 'livemode': False, 'metadata': {}, 'nickname': 'New plan name', 'product': FAKE_PRODUCT['id'], 'trial_period_days': None, 'usage_type': 'licensed', 'tiers_mode': 'graduated', 'tiers': [{'flat_amount': 4900, 'unit_amount': 1000, 'up_to': 5}, {'flat_amount': None, 'unit_amount': 900, 'up_to': None}]}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_TOKEN","title":"<code>tests.FAKE_TOKEN = {'id': 'tok_16YDIe2eZvKYlo2CPvqprIJd', 'object': 'token', 'card': deepcopy(FAKE_CARD), 'client_ip': None, 'created': 1439201676, 'livemode': False, 'type': 'card', 'used': False}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_TRANSFER","title":"<code>tests.FAKE_TRANSFER = {'id': 'tr_16Y9BK2eZvKYlo2CR0ySu1BA', 'object': 'transfer', 'amount': 100, 'amount_reversed': 0, 'application_fee_amount': None, 'balance_transaction': deepcopy(FAKE_BALANCE_TRANSACTION_II), 'created': 1439185846, 'currency': 'usd', 'description': 'Test description - 1439185984', 'destination': FAKE_STANDARD_ACCOUNT['id'], 'destination_payment': 'py_16Y9BKFso9hLaeLueFmWAYUi', 'livemode': False, 'metadata': {}, 'recipient': None, 'reversals': {'object': 'list', 'total_count': 0, 'has_more': False, 'url': '/v1/transfers/tr_16Y9BK2eZvKYlo2CR0ySu1BA/reversals', 'data': []}, 'reversed': False, 'source_transaction': None, 'source_type': 'bank_account'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_TRANSFER_WITH_1_REVERSAL","title":"<code>tests.FAKE_TRANSFER_WITH_1_REVERSAL = {'id': 'tr_16Y9BK2eZvKYlo2CR0ySu1BA', 'object': 'transfer', 'amount': 100, 'amount_reversed': 0, 'application_fee_amount': None, 'balance_transaction': deepcopy(FAKE_BALANCE_TRANSACTION_II), 'created': 1439185846, 'currency': 'usd', 'description': 'Test description - 1439185984', 'destination': FAKE_STANDARD_ACCOUNT['id'], 'destination_payment': 'py_16Y9BKFso9hLaeLueFmWAYUi', 'livemode': False, 'metadata': {}, 'recipient': None, 'reversals': {'object': 'list', 'total_count': 1, 'has_more': False, 'url': '/v1/transfers/tr_16Y9BK2eZvKYlo2CR0ySu1BA/reversals', 'data': [{'id': 'trr_1J5UlFJSZQVUcJYgb38m1OZO', 'object': 'transfer_reversal', 'amount': 20, 'balance_transaction': deepcopy(FAKE_BALANCE_TRANSACTION_II), 'created': 1624449653, 'currency': 'usd', 'destination_payment_refund': 'pyr_1J5UlFR44xKqawmIBvFa6gW9', 'metadata': {}, 'source_refund': None, 'transfer': deepcopy(FAKE_TRANSFER)}]}, 'reversed': False, 'source_transaction': None, 'source_type': 'bank_account'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_UPCOMING_INVOICE","title":"<code>tests.FAKE_UPCOMING_INVOICE = InvoiceDict({'id': 'in', 'object': 'invoice', 'amount_due': 2000, 'amount_paid': 0, 'amount_remaining': 2000, 'application_fee_amount': None, 'attempt_count': 1, 'attempted': False, 'collection_method': 'charge_automatically', 'charge': None, 'created': 1439218864, 'currency': 'usd', 'customer': FAKE_CUSTOMER['id'], 'description': None, 'default_tax_rates': [{'id': 'txr_fakefakefakefakefake0001', 'object': 'tax_rate', 'active': True, 'created': 1570921289, 'description': None, 'display_name': 'VAT', 'inclusive': True, 'jurisdiction': 'Example1', 'livemode': False, 'metadata': {'djstripe_test_fake_id': 'txr_fakefakefakefakefake0001'}, 'percentage': 15.0}], 'discount': None, 'discounts': [], 'due_date': None, 'ending_balance': None, 'lines': {'data': [deepcopy(FAKE_LINE_ITEM_SUBSCRIPTION)], 'total_count': 1, 'object': 'list', 'url': '/v1/invoices/in_fakefakefakefakefake0001/lines'}, 'livemode': False, 'metadata': {}, 'next_payment_attempt': 1439218689, 'number': None, 'paid': False, 'period_end': 1439218689, 'period_start': 1439132289, 'receipt_number': None, 'starting_balance': 0, 'statement_descriptor': None, 'subscription': FAKE_SUBSCRIPTION['id'], 'subtotal': 2000, 'tax': 261, 'tax_percent': None, 'total': 2000, 'total_tax_amounts': [{'amount': 261, 'inclusive': True, 'tax_rate': 'txr_fakefakefakefakefake0001'}], 'webhooks_delivered_at': 1439218870})</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_USAGE_RECORD","title":"<code>tests.FAKE_USAGE_RECORD = {'id': 'mbur_1JPJz2JSZQVUcJYgK4otTE2V', 'livemode': False, 'object': 'usage_record', 'quantity': 100, 'subscription_item': FAKE_SUBSCRIPTION_ITEM['id'], 'timestamp': 1629174774, 'action': 'increment'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_USAGE_RECORD_SUMMARY","title":"<code>tests.FAKE_USAGE_RECORD_SUMMARY = UsageRecordSummaryDict(load_fixture('usage_record_summary_sis_fakefakefakefakefake0001.json'))</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FAKE_WEBHOOK_ENDPOINT_1","title":"<code>tests.FAKE_WEBHOOK_ENDPOINT_1 = WebhookEndpointDict(load_fixture('webhook_endpoint_fake0001.json'))</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FIXTURE_DIR_PATH","title":"<code>tests.FIXTURE_DIR_PATH = Path(__file__).parent.joinpath('fixtures')</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.FUTURE_DATE","title":"<code>tests.FUTURE_DATE = datetime.datetime(2100, 4, 30, tzinfo=get_timezone_utc())</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests.logger","title":"<code>tests.logger = logging.getLogger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/project/#tests-classes","title":"Classes","text":""},{"location":"reference/project/#tests.AccountDict","title":"<code>tests.AccountDict</code>","text":"<p>               Bases: <code>dict</code></p> Source code in <code>tests/__init__.py</code> <pre><code>class AccountDict(dict):\n    def save(self, idempotency_key=None):\n        return self\n\n    @property\n    def external_accounts(self):\n        return ExternalAccounts(\n            external_account_fakes=self[\"external_accounts\"][\"data\"]\n        )\n\n    def create(self):\n        from djstripe.models import Account\n\n        return Account.sync_from_stripe_data(self)\n</code></pre>"},{"location":"reference/project/#tests.AccountDict-attributes","title":"Attributes","text":""},{"location":"reference/project/#tests.AccountDict.external_accounts","title":"<code>tests.AccountDict.external_accounts</code>  <code>property</code>","text":""},{"location":"reference/project/#tests.AccountDict-functions","title":"Functions","text":""},{"location":"reference/project/#tests.AccountDict.create","title":"<code>tests.AccountDict.create()</code>","text":"Source code in <code>tests/__init__.py</code> <pre><code>def create(self):\n    from djstripe.models import Account\n\n    return Account.sync_from_stripe_data(self)\n</code></pre>"},{"location":"reference/project/#tests.AccountDict.save","title":"<code>tests.AccountDict.save(idempotency_key=None)</code>","text":"Source code in <code>tests/__init__.py</code> <pre><code>def save(self, idempotency_key=None):\n    return self\n</code></pre>"},{"location":"reference/project/#tests.AssertStripeFksMixin","title":"<code>tests.AssertStripeFksMixin</code>","text":"Source code in <code>tests/__init__.py</code> <pre><code>class AssertStripeFksMixin:\n    def _get_field_str(self, field) -&gt; str:\n        if isinstance(field, models.OneToOneRel):\n            if field.parent_link:\n                return \"\"\n            else:\n                reverse_id_name = str(field.remote_field.foreign_related_fields[0])\n                return (\n                    reverse_id_name.replace(\"djstripe_id\", field.name)\n                    + \" (related name)\"\n                )\n\n        elif isinstance(field, models.ForeignKey):\n            return str(field)\n\n        else:\n            return \"\"\n\n    def assert_fks(self, obj, expected_blank_fks, processed_stripe_ids=None):\n        \"\"\"\n        Recursively walk through fks on obj, asserting they're not-none\n        :param obj:\n        :param expected_blank_fks: fields that are expected to be None\n        :param processed_stripe_ids: set of objects ids already processed\n        :return:\n        \"\"\"\n\n        if processed_stripe_ids is None:\n            processed_stripe_ids = set()\n\n        processed_stripe_ids.add(obj.id)\n\n        for field in obj._meta.get_fields():\n            field_str = self._get_field_str(field)\n            if not field_str or field_str.endswith(\".djstripe_owner_account\"):\n                continue\n\n            try:\n                field_value = getattr(obj, field.name)\n            except ObjectDoesNotExist:\n                field_value = None\n\n            if field_str in expected_blank_fks:\n                self.assertIsNone(field_value, field_str)\n            else:\n                self.assertIsNotNone(field_value, field_str)\n\n                if field_value.id not in processed_stripe_ids:\n                    # recurse into the object if it's not already been checked\n                    self.assert_fks(\n                        field_value, expected_blank_fks, processed_stripe_ids\n                    )\n\n                logger.warning(\"checked %s\", field_str)\n</code></pre>"},{"location":"reference/project/#tests.AssertStripeFksMixin-functions","title":"Functions","text":""},{"location":"reference/project/#tests.AssertStripeFksMixin.assert_fks","title":"<code>tests.AssertStripeFksMixin.assert_fks(obj, expected_blank_fks, processed_stripe_ids=None)</code>","text":"<p>Recursively walk through fks on obj, asserting they're not-none :param obj: :param expected_blank_fks: fields that are expected to be None :param processed_stripe_ids: set of objects ids already processed :return:</p> Source code in <code>tests/__init__.py</code> <pre><code>def assert_fks(self, obj, expected_blank_fks, processed_stripe_ids=None):\n    \"\"\"\n    Recursively walk through fks on obj, asserting they're not-none\n    :param obj:\n    :param expected_blank_fks: fields that are expected to be None\n    :param processed_stripe_ids: set of objects ids already processed\n    :return:\n    \"\"\"\n\n    if processed_stripe_ids is None:\n        processed_stripe_ids = set()\n\n    processed_stripe_ids.add(obj.id)\n\n    for field in obj._meta.get_fields():\n        field_str = self._get_field_str(field)\n        if not field_str or field_str.endswith(\".djstripe_owner_account\"):\n            continue\n\n        try:\n            field_value = getattr(obj, field.name)\n        except ObjectDoesNotExist:\n            field_value = None\n\n        if field_str in expected_blank_fks:\n            self.assertIsNone(field_value, field_str)\n        else:\n            self.assertIsNotNone(field_value, field_str)\n\n            if field_value.id not in processed_stripe_ids:\n                # recurse into the object if it's not already been checked\n                self.assert_fks(\n                    field_value, expected_blank_fks, processed_stripe_ids\n                )\n\n            logger.warning(\"checked %s\", field_str)\n</code></pre>"},{"location":"reference/project/#tests.BankAccountDict","title":"<code>tests.BankAccountDict</code>","text":"<p>               Bases: <code>LegacySourceDict</code></p> Source code in <code>tests/__init__.py</code> <pre><code>class BankAccountDict(LegacySourceDict):\n    pass\n</code></pre>"},{"location":"reference/project/#tests.CardDict","title":"<code>tests.CardDict</code>","text":"<p>               Bases: <code>LegacySourceDict</code></p> Source code in <code>tests/__init__.py</code> <pre><code>class CardDict(LegacySourceDict):\n    pass\n</code></pre>"},{"location":"reference/project/#tests.ChargeDict","title":"<code>tests.ChargeDict</code>","text":"<p>               Bases: <code>StripeItem</code></p> Source code in <code>tests/__init__.py</code> <pre><code>class ChargeDict(StripeItem):\n    def __init__(self, *args, **kwargs):\n        \"\"\"Match Stripe's behavior: return a stripe iterable on `charge.refunds`.\"\"\"\n        super().__init__(*args, **kwargs)\n        self.refunds = StripeList(self.refunds)\n\n    def refund(self, amount=None, reason=None):\n        self.update({\"refunded\": True, \"amount_refunded\": amount})\n        return self\n\n    def capture(self):\n        self.update({\"captured\": True})\n        return self\n</code></pre>"},{"location":"reference/project/#tests.ChargeDict-attributes","title":"Attributes","text":""},{"location":"reference/project/#tests.ChargeDict.refunds","title":"<code>tests.ChargeDict.refunds = StripeList(self.refunds)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/project/#tests.ChargeDict-functions","title":"Functions","text":""},{"location":"reference/project/#tests.ChargeDict.__init__","title":"<code>tests.ChargeDict.__init__(*args, **kwargs)</code>","text":"<p>Match Stripe's behavior: return a stripe iterable on <code>charge.refunds</code>.</p> Source code in <code>tests/__init__.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    \"\"\"Match Stripe's behavior: return a stripe iterable on `charge.refunds`.\"\"\"\n    super().__init__(*args, **kwargs)\n    self.refunds = StripeList(self.refunds)\n</code></pre>"},{"location":"reference/project/#tests.ChargeDict.capture","title":"<code>tests.ChargeDict.capture()</code>","text":"Source code in <code>tests/__init__.py</code> <pre><code>def capture(self):\n    self.update({\"captured\": True})\n    return self\n</code></pre>"},{"location":"reference/project/#tests.ChargeDict.refund","title":"<code>tests.ChargeDict.refund(amount=None, reason=None)</code>","text":"Source code in <code>tests/__init__.py</code> <pre><code>def refund(self, amount=None, reason=None):\n    self.update({\"refunded\": True, \"amount_refunded\": amount})\n    return self\n</code></pre>"},{"location":"reference/project/#tests.CustomerDict","title":"<code>tests.CustomerDict</code>","text":"<p>               Bases: <code>dict</code></p> Source code in <code>tests/__init__.py</code> <pre><code>class CustomerDict(dict):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n        self[\"default_source\"] = convert_source_dict(self[\"default_source\"])\n\n        for n, d in enumerate(self[\"sources\"].get(\"data\", [])):\n            self[\"sources\"][\"data\"][n] = convert_source_dict(d)\n\n    def save(self, idempotency_key=None):\n        return self\n\n    def delete(self):\n        return self\n\n    @property\n    def sources(self):\n        return Sources(card_fakes=self[\"sources\"][\"data\"])\n\n    def create_for_user(self, user):\n        from djstripe.models import Customer\n\n        stripe_customer = Customer.sync_from_stripe_data(self)\n        stripe_customer.subscriber = user\n        stripe_customer.save()\n        return stripe_customer\n</code></pre>"},{"location":"reference/project/#tests.CustomerDict-attributes","title":"Attributes","text":""},{"location":"reference/project/#tests.CustomerDict.sources","title":"<code>tests.CustomerDict.sources</code>  <code>property</code>","text":""},{"location":"reference/project/#tests.CustomerDict-functions","title":"Functions","text":""},{"location":"reference/project/#tests.CustomerDict.__init__","title":"<code>tests.CustomerDict.__init__(*args, **kwargs)</code>","text":"Source code in <code>tests/__init__.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    super().__init__(*args, **kwargs)\n\n    self[\"default_source\"] = convert_source_dict(self[\"default_source\"])\n\n    for n, d in enumerate(self[\"sources\"].get(\"data\", [])):\n        self[\"sources\"][\"data\"][n] = convert_source_dict(d)\n</code></pre>"},{"location":"reference/project/#tests.CustomerDict.create_for_user","title":"<code>tests.CustomerDict.create_for_user(user)</code>","text":"Source code in <code>tests/__init__.py</code> <pre><code>def create_for_user(self, user):\n    from djstripe.models import Customer\n\n    stripe_customer = Customer.sync_from_stripe_data(self)\n    stripe_customer.subscriber = user\n    stripe_customer.save()\n    return stripe_customer\n</code></pre>"},{"location":"reference/project/#tests.CustomerDict.delete","title":"<code>tests.CustomerDict.delete()</code>","text":"Source code in <code>tests/__init__.py</code> <pre><code>def delete(self):\n    return self\n</code></pre>"},{"location":"reference/project/#tests.CustomerDict.save","title":"<code>tests.CustomerDict.save(idempotency_key=None)</code>","text":"Source code in <code>tests/__init__.py</code> <pre><code>def save(self, idempotency_key=None):\n    return self\n</code></pre>"},{"location":"reference/project/#tests.ExternalAccounts","title":"<code>tests.ExternalAccounts</code>","text":"<p>               Bases: <code>object</code></p> Source code in <code>tests/__init__.py</code> <pre><code>class ExternalAccounts(object):\n    def __init__(self, external_account_fakes):\n        self.external_account_fakes = external_account_fakes\n\n    def create(self, source, api_key=None):\n        for fake_external_account in self.external_account_fakes:\n            if fake_external_account[\"id\"] == source:\n                return fake_external_account\n\n    def retrieve(self, id, expand=None):\n        for fake_external_account in self.external_account_fakes:\n            if fake_external_account[\"id\"] == id:\n                return fake_external_account\n\n    def list(self, **kwargs):\n        return StripeList(data=self.external_account_fakes)\n</code></pre>"},{"location":"reference/project/#tests.ExternalAccounts-attributes","title":"Attributes","text":""},{"location":"reference/project/#tests.ExternalAccounts.external_account_fakes","title":"<code>tests.ExternalAccounts.external_account_fakes = external_account_fakes</code>  <code>instance-attribute</code>","text":""},{"location":"reference/project/#tests.ExternalAccounts-functions","title":"Functions","text":""},{"location":"reference/project/#tests.ExternalAccounts.__init__","title":"<code>tests.ExternalAccounts.__init__(external_account_fakes)</code>","text":"Source code in <code>tests/__init__.py</code> <pre><code>def __init__(self, external_account_fakes):\n    self.external_account_fakes = external_account_fakes\n</code></pre>"},{"location":"reference/project/#tests.ExternalAccounts.create","title":"<code>tests.ExternalAccounts.create(source, api_key=None)</code>","text":"Source code in <code>tests/__init__.py</code> <pre><code>def create(self, source, api_key=None):\n    for fake_external_account in self.external_account_fakes:\n        if fake_external_account[\"id\"] == source:\n            return fake_external_account\n</code></pre>"},{"location":"reference/project/#tests.ExternalAccounts.list","title":"<code>tests.ExternalAccounts.list(**kwargs)</code>","text":"Source code in <code>tests/__init__.py</code> <pre><code>def list(self, **kwargs):\n    return StripeList(data=self.external_account_fakes)\n</code></pre>"},{"location":"reference/project/#tests.ExternalAccounts.retrieve","title":"<code>tests.ExternalAccounts.retrieve(id, expand=None)</code>","text":"Source code in <code>tests/__init__.py</code> <pre><code>def retrieve(self, id, expand=None):\n    for fake_external_account in self.external_account_fakes:\n        if fake_external_account[\"id\"] == id:\n            return fake_external_account\n</code></pre>"},{"location":"reference/project/#tests.InvoiceDict","title":"<code>tests.InvoiceDict</code>","text":"<p>               Bases: <code>StripeItem</code></p> Source code in <code>tests/__init__.py</code> <pre><code>class InvoiceDict(StripeItem):\n    def __init__(self, *args, **kwargs):\n        \"\"\"Match Stripe's behavior: return a stripe iterable on `invoice.lines`.\"\"\"\n        super().__init__(*args, **kwargs)\n        self.lines = StripeList(self.lines)\n\n    def pay(self):\n        return self\n</code></pre>"},{"location":"reference/project/#tests.InvoiceDict-attributes","title":"Attributes","text":""},{"location":"reference/project/#tests.InvoiceDict.lines","title":"<code>tests.InvoiceDict.lines = StripeList(self.lines)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/project/#tests.InvoiceDict-functions","title":"Functions","text":""},{"location":"reference/project/#tests.InvoiceDict.__init__","title":"<code>tests.InvoiceDict.__init__(*args, **kwargs)</code>","text":"<p>Match Stripe's behavior: return a stripe iterable on <code>invoice.lines</code>.</p> Source code in <code>tests/__init__.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    \"\"\"Match Stripe's behavior: return a stripe iterable on `invoice.lines`.\"\"\"\n    super().__init__(*args, **kwargs)\n    self.lines = StripeList(self.lines)\n</code></pre>"},{"location":"reference/project/#tests.InvoiceDict.pay","title":"<code>tests.InvoiceDict.pay()</code>","text":"Source code in <code>tests/__init__.py</code> <pre><code>def pay(self):\n    return self\n</code></pre>"},{"location":"reference/project/#tests.LegacySourceDict","title":"<code>tests.LegacySourceDict</code>","text":"<p>               Bases: <code>dict</code></p> Source code in <code>tests/__init__.py</code> <pre><code>class LegacySourceDict(dict):\n    def delete(self):\n        return self\n</code></pre>"},{"location":"reference/project/#tests.LegacySourceDict-functions","title":"Functions","text":""},{"location":"reference/project/#tests.LegacySourceDict.delete","title":"<code>tests.LegacySourceDict.delete()</code>","text":"Source code in <code>tests/__init__.py</code> <pre><code>def delete(self):\n    return self\n</code></pre>"},{"location":"reference/project/#tests.PaymentMethodDict","title":"<code>tests.PaymentMethodDict</code>","text":"<p>               Bases: <code>dict</code></p> Source code in <code>tests/__init__.py</code> <pre><code>class PaymentMethodDict(dict):\n    def detach(self):\n        self.pop(\"customer\")\n        return self\n</code></pre>"},{"location":"reference/project/#tests.PaymentMethodDict-functions","title":"Functions","text":""},{"location":"reference/project/#tests.PaymentMethodDict.detach","title":"<code>tests.PaymentMethodDict.detach()</code>","text":"Source code in <code>tests/__init__.py</code> <pre><code>def detach(self):\n    self.pop(\"customer\")\n    return self\n</code></pre>"},{"location":"reference/project/#tests.PayoutDict","title":"<code>tests.PayoutDict</code>","text":"<p>               Bases: <code>StripeItem</code></p> Source code in <code>tests/__init__.py</code> <pre><code>class PayoutDict(StripeItem):\n    pass\n</code></pre>"},{"location":"reference/project/#tests.SourceDict","title":"<code>tests.SourceDict</code>","text":"<p>               Bases: <code>dict</code></p> Source code in <code>tests/__init__.py</code> <pre><code>class SourceDict(dict):\n    def detach(self):\n        self.pop(\"customer\")\n        self.update({\"status\": \"consumed\"})\n        return self\n</code></pre>"},{"location":"reference/project/#tests.SourceDict-functions","title":"Functions","text":""},{"location":"reference/project/#tests.SourceDict.detach","title":"<code>tests.SourceDict.detach()</code>","text":"Source code in <code>tests/__init__.py</code> <pre><code>def detach(self):\n    self.pop(\"customer\")\n    self.update({\"status\": \"consumed\"})\n    return self\n</code></pre>"},{"location":"reference/project/#tests.Sources","title":"<code>tests.Sources</code>","text":"<p>               Bases: <code>object</code></p> Source code in <code>tests/__init__.py</code> <pre><code>class Sources(object):\n    def __init__(self, card_fakes):\n        self.card_fakes = card_fakes\n\n    def create(self, source, api_key=None):\n        for fake_card in self.card_fakes:\n            if fake_card[\"id\"] == source:\n                return fake_card\n\n    def retrieve(self, id, expand=None):\n        for fake_card in self.card_fakes:\n            if fake_card[\"id\"] == id:\n                return fake_card\n\n    def list(self, **kwargs):\n        return StripeList(data=self.card_fakes)\n</code></pre>"},{"location":"reference/project/#tests.Sources-attributes","title":"Attributes","text":""},{"location":"reference/project/#tests.Sources.card_fakes","title":"<code>tests.Sources.card_fakes = card_fakes</code>  <code>instance-attribute</code>","text":""},{"location":"reference/project/#tests.Sources-functions","title":"Functions","text":""},{"location":"reference/project/#tests.Sources.__init__","title":"<code>tests.Sources.__init__(card_fakes)</code>","text":"Source code in <code>tests/__init__.py</code> <pre><code>def __init__(self, card_fakes):\n    self.card_fakes = card_fakes\n</code></pre>"},{"location":"reference/project/#tests.Sources.create","title":"<code>tests.Sources.create(source, api_key=None)</code>","text":"Source code in <code>tests/__init__.py</code> <pre><code>def create(self, source, api_key=None):\n    for fake_card in self.card_fakes:\n        if fake_card[\"id\"] == source:\n            return fake_card\n</code></pre>"},{"location":"reference/project/#tests.Sources.list","title":"<code>tests.Sources.list(**kwargs)</code>","text":"Source code in <code>tests/__init__.py</code> <pre><code>def list(self, **kwargs):\n    return StripeList(data=self.card_fakes)\n</code></pre>"},{"location":"reference/project/#tests.Sources.retrieve","title":"<code>tests.Sources.retrieve(id, expand=None)</code>","text":"Source code in <code>tests/__init__.py</code> <pre><code>def retrieve(self, id, expand=None):\n    for fake_card in self.card_fakes:\n        if fake_card[\"id\"] == id:\n            return fake_card\n</code></pre>"},{"location":"reference/project/#tests.StripeItem","title":"<code>tests.StripeItem</code>","text":"<p>               Bases: <code>dict</code></p> <p>Flexible class built to mock any generic Stripe object.</p> <p>Implements object access + deletion methods to match the behavior of Stripe's library, which allows both object + dictionary access.</p> <p>Has a delete method since (most) Stripe objects can be deleted.</p> Source code in <code>tests/__init__.py</code> <pre><code>class StripeItem(dict):\n    \"\"\"Flexible class built to mock any generic Stripe object.\n\n    Implements object access + deletion methods to match the behavior\n    of Stripe's library, which allows both object + dictionary access.\n\n    Has a delete method since (most) Stripe objects can be deleted.\n    \"\"\"\n\n    def __getattr__(self, name):\n        \"\"\"Give StripeItem normal object access to match Stripe behavior.\"\"\"\n        if name in self:\n            return self[name]\n        else:\n            raise AttributeError(\"No such attribute: \" + name)\n\n    def __setattr__(self, name, value):\n        self[name] = value\n\n    def __delattr__(self, name):\n        if name in self:\n            del self[name]\n        else:\n            raise AttributeError(\"No such attribute: \" + name)\n\n    def delete(self) -&gt; bool:\n        \"\"\"Superficial mock that adds a deleted attribute.\"\"\"\n        self.deleted = True\n\n        return self.deleted\n\n    @classmethod\n    def class_url(cls):\n        return \"/v1/test-items/\"\n\n    def instance_url(self):\n        \"\"\"Superficial mock that emulates instance_url.\"\"\"\n        id = self.get(\"id\")\n        base = self.class_url()\n        return \"%s/%s\" % (base, id)\n\n    def request(self, method, url, params) -&gt; Dict:\n        \"\"\"Superficial mock that emulates request method.\"\"\"\n        assert method == \"post\"\n        for key, value in params.items():\n            self.__setattr__(key, value)\n        return self\n</code></pre>"},{"location":"reference/project/#tests.StripeItem-functions","title":"Functions","text":""},{"location":"reference/project/#tests.StripeItem.__delattr__","title":"<code>tests.StripeItem.__delattr__(name)</code>","text":"Source code in <code>tests/__init__.py</code> <pre><code>def __delattr__(self, name):\n    if name in self:\n        del self[name]\n    else:\n        raise AttributeError(\"No such attribute: \" + name)\n</code></pre>"},{"location":"reference/project/#tests.StripeItem.__getattr__","title":"<code>tests.StripeItem.__getattr__(name)</code>","text":"<p>Give StripeItem normal object access to match Stripe behavior.</p> Source code in <code>tests/__init__.py</code> <pre><code>def __getattr__(self, name):\n    \"\"\"Give StripeItem normal object access to match Stripe behavior.\"\"\"\n    if name in self:\n        return self[name]\n    else:\n        raise AttributeError(\"No such attribute: \" + name)\n</code></pre>"},{"location":"reference/project/#tests.StripeItem.__setattr__","title":"<code>tests.StripeItem.__setattr__(name, value)</code>","text":"Source code in <code>tests/__init__.py</code> <pre><code>def __setattr__(self, name, value):\n    self[name] = value\n</code></pre>"},{"location":"reference/project/#tests.StripeItem.class_url","title":"<code>tests.StripeItem.class_url()</code>  <code>classmethod</code>","text":"Source code in <code>tests/__init__.py</code> <pre><code>@classmethod\ndef class_url(cls):\n    return \"/v1/test-items/\"\n</code></pre>"},{"location":"reference/project/#tests.StripeItem.delete","title":"<code>tests.StripeItem.delete()</code>","text":"<p>Superficial mock that adds a deleted attribute.</p> Source code in <code>tests/__init__.py</code> <pre><code>def delete(self) -&gt; bool:\n    \"\"\"Superficial mock that adds a deleted attribute.\"\"\"\n    self.deleted = True\n\n    return self.deleted\n</code></pre>"},{"location":"reference/project/#tests.StripeItem.instance_url","title":"<code>tests.StripeItem.instance_url()</code>","text":"<p>Superficial mock that emulates instance_url.</p> Source code in <code>tests/__init__.py</code> <pre><code>def instance_url(self):\n    \"\"\"Superficial mock that emulates instance_url.\"\"\"\n    id = self.get(\"id\")\n    base = self.class_url()\n    return \"%s/%s\" % (base, id)\n</code></pre>"},{"location":"reference/project/#tests.StripeItem.request","title":"<code>tests.StripeItem.request(method, url, params)</code>","text":"<p>Superficial mock that emulates request method.</p> Source code in <code>tests/__init__.py</code> <pre><code>def request(self, method, url, params) -&gt; Dict:\n    \"\"\"Superficial mock that emulates request method.\"\"\"\n    assert method == \"post\"\n    for key, value in params.items():\n        self.__setattr__(key, value)\n    return self\n</code></pre>"},{"location":"reference/project/#tests.StripeList","title":"<code>tests.StripeList</code>","text":"<p>               Bases: <code>dict</code></p> <p>Mock a generic Stripe Iterable.</p> <p>It has the relevant attributes of a stripe iterable (has_more, data).</p> <p>This mock is important so we can use stripe's <code>list</code> method in our testing. StripeList.list() will return the StripeList.</p> <p>Additionally, iterating over instances of MockStripeIterable will iterate over the data attribute, just like Stripe iterables.</p> <p>Attributes:</p> Name Type Description <code>has_more</code> <p>mock has_more flag. Default False.</p> <code>**kwargs</code> <p>all of the fields of the stripe object, generally as a dictionary.</p> Source code in <code>tests/__init__.py</code> <pre><code>class StripeList(dict):\n    \"\"\"Mock a generic Stripe Iterable.\n\n    It has the relevant attributes of a stripe iterable (has_more, data).\n\n    This mock is important so we can use stripe's `list` method in our testing.\n    StripeList.list() will return the StripeList.\n\n    Additionally, iterating over instances of MockStripeIterable will iterate over\n    the data attribute, just like Stripe iterables.\n\n    Attributes:\n        has_more: mock has_more flag. Default False.\n        **kwargs: all of the fields of the stripe object, generally as a dictionary.\n    \"\"\"\n\n    object = \"list\"\n    url = \"/v1/fakes\"\n    has_more = False\n\n    def __getattr__(self, name):\n        \"\"\"Give StripeItem normal object access to match Stripe behavior.\"\"\"\n        if name in self:\n            return self[name]\n        else:\n            raise AttributeError(\"No such attribute: \" + name)\n\n    def __setattr__(self, name, value):\n        self[name] = value\n\n    def __delattr__(self, name):\n        if name in self:\n            del self[name]\n        else:\n            raise AttributeError(\"No such attribute: \" + name)\n\n    def __iter__(self) -&gt; Any:\n        \"\"\"Make StripeList an iterable, to match the Stripe iterable behavior.\"\"\"\n        self.iter_copy = self.data.copy()\n        return self\n\n    def __next__(self) -&gt; StripeItem:\n        \"\"\"Define iteration for StripeList.\"\"\"\n        if len(self.iter_copy) &gt; 0:\n            return self.iter_copy.pop(0)\n        else:\n            raise StopIteration()\n\n    def list(self, **kwargs: Any) -&gt; \"StripeList\":\n        \"\"\"Add a list method to the StripeList which returns itself.\n\n        list() accepts arbitrary kwargs, be careful is you expect the\n        argument-accepting functionality of Stripe's list() method.\n        \"\"\"\n        return self\n\n    def auto_paging_iter(self) -&gt; \"StripeList\":\n        \"\"\"Add an auto_paging_iter method to the StripeList which returns itself.\n\n        The StripeList is an iterable, so this mimics the real behavior.\n        \"\"\"\n        return self\n\n    @property\n    def total_count(self):\n        return len(self.data)\n</code></pre>"},{"location":"reference/project/#tests.StripeList-attributes","title":"Attributes","text":""},{"location":"reference/project/#tests.StripeList.has_more","title":"<code>tests.StripeList.has_more = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/project/#tests.StripeList.object","title":"<code>tests.StripeList.object = 'list'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/project/#tests.StripeList.total_count","title":"<code>tests.StripeList.total_count</code>  <code>property</code>","text":""},{"location":"reference/project/#tests.StripeList.url","title":"<code>tests.StripeList.url = '/v1/fakes'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/project/#tests.StripeList-functions","title":"Functions","text":""},{"location":"reference/project/#tests.StripeList.__delattr__","title":"<code>tests.StripeList.__delattr__(name)</code>","text":"Source code in <code>tests/__init__.py</code> <pre><code>def __delattr__(self, name):\n    if name in self:\n        del self[name]\n    else:\n        raise AttributeError(\"No such attribute: \" + name)\n</code></pre>"},{"location":"reference/project/#tests.StripeList.__getattr__","title":"<code>tests.StripeList.__getattr__(name)</code>","text":"<p>Give StripeItem normal object access to match Stripe behavior.</p> Source code in <code>tests/__init__.py</code> <pre><code>def __getattr__(self, name):\n    \"\"\"Give StripeItem normal object access to match Stripe behavior.\"\"\"\n    if name in self:\n        return self[name]\n    else:\n        raise AttributeError(\"No such attribute: \" + name)\n</code></pre>"},{"location":"reference/project/#tests.StripeList.__iter__","title":"<code>tests.StripeList.__iter__()</code>","text":"<p>Make StripeList an iterable, to match the Stripe iterable behavior.</p> Source code in <code>tests/__init__.py</code> <pre><code>def __iter__(self) -&gt; Any:\n    \"\"\"Make StripeList an iterable, to match the Stripe iterable behavior.\"\"\"\n    self.iter_copy = self.data.copy()\n    return self\n</code></pre>"},{"location":"reference/project/#tests.StripeList.__next__","title":"<code>tests.StripeList.__next__()</code>","text":"<p>Define iteration for StripeList.</p> Source code in <code>tests/__init__.py</code> <pre><code>def __next__(self) -&gt; StripeItem:\n    \"\"\"Define iteration for StripeList.\"\"\"\n    if len(self.iter_copy) &gt; 0:\n        return self.iter_copy.pop(0)\n    else:\n        raise StopIteration()\n</code></pre>"},{"location":"reference/project/#tests.StripeList.__setattr__","title":"<code>tests.StripeList.__setattr__(name, value)</code>","text":"Source code in <code>tests/__init__.py</code> <pre><code>def __setattr__(self, name, value):\n    self[name] = value\n</code></pre>"},{"location":"reference/project/#tests.StripeList.auto_paging_iter","title":"<code>tests.StripeList.auto_paging_iter()</code>","text":"<p>Add an auto_paging_iter method to the StripeList which returns itself.</p> <p>The StripeList is an iterable, so this mimics the real behavior.</p> Source code in <code>tests/__init__.py</code> <pre><code>def auto_paging_iter(self) -&gt; \"StripeList\":\n    \"\"\"Add an auto_paging_iter method to the StripeList which returns itself.\n\n    The StripeList is an iterable, so this mimics the real behavior.\n    \"\"\"\n    return self\n</code></pre>"},{"location":"reference/project/#tests.StripeList.list","title":"<code>tests.StripeList.list(**kwargs)</code>","text":"<p>Add a list method to the StripeList which returns itself.</p> <p>list() accepts arbitrary kwargs, be careful is you expect the argument-accepting functionality of Stripe's list() method.</p> Source code in <code>tests/__init__.py</code> <pre><code>def list(self, **kwargs: Any) -&gt; \"StripeList\":\n    \"\"\"Add a list method to the StripeList which returns itself.\n\n    list() accepts arbitrary kwargs, be careful is you expect the\n    argument-accepting functionality of Stripe's list() method.\n    \"\"\"\n    return self\n</code></pre>"},{"location":"reference/project/#tests.SubscriptionDict","title":"<code>tests.SubscriptionDict</code>","text":"<p>               Bases: <code>StripeItem</code></p> Source code in <code>tests/__init__.py</code> <pre><code>class SubscriptionDict(StripeItem):\n    def __init__(self, *args, **kwargs):\n        \"\"\"Match Stripe's behavior: return a stripe iterable on `subscription.items`.\"\"\"\n        super().__init__(*args, **kwargs)\n        self[\"items\"] = StripeList(self[\"items\"])\n\n    def __setattr__(self, name, value):\n        if type(value) is datetime.datetime:\n            value = datetime_to_unix(value)\n\n        # Special case for price and plan\n        if name == \"price\":\n            for price in [\n                FAKE_PRICE,\n                FAKE_PRICE_II,\n                FAKE_PRICE_TIER,\n                FAKE_PRICE_METERED,\n            ]:\n                if value == price[\"id\"]:\n                    value = price\n        elif name == \"plan\":\n            for plan in [FAKE_PLAN, FAKE_PLAN_II, FAKE_TIER_PLAN, FAKE_PLAN_METERED]:\n                if value == plan[\"id\"]:\n                    value = plan\n\n        self[name] = value\n\n    def delete(self, **kwargs):\n        if \"at_period_end\" in kwargs:\n            self[\"cancel_at_period_end\"] = kwargs[\"at_period_end\"]\n\n        return self\n\n    def save(self, idempotency_key=None):\n        return self\n</code></pre>"},{"location":"reference/project/#tests.SubscriptionDict-functions","title":"Functions","text":""},{"location":"reference/project/#tests.SubscriptionDict.__init__","title":"<code>tests.SubscriptionDict.__init__(*args, **kwargs)</code>","text":"<p>Match Stripe's behavior: return a stripe iterable on <code>subscription.items</code>.</p> Source code in <code>tests/__init__.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    \"\"\"Match Stripe's behavior: return a stripe iterable on `subscription.items`.\"\"\"\n    super().__init__(*args, **kwargs)\n    self[\"items\"] = StripeList(self[\"items\"])\n</code></pre>"},{"location":"reference/project/#tests.SubscriptionDict.__setattr__","title":"<code>tests.SubscriptionDict.__setattr__(name, value)</code>","text":"Source code in <code>tests/__init__.py</code> <pre><code>def __setattr__(self, name, value):\n    if type(value) is datetime.datetime:\n        value = datetime_to_unix(value)\n\n    # Special case for price and plan\n    if name == \"price\":\n        for price in [\n            FAKE_PRICE,\n            FAKE_PRICE_II,\n            FAKE_PRICE_TIER,\n            FAKE_PRICE_METERED,\n        ]:\n            if value == price[\"id\"]:\n                value = price\n    elif name == \"plan\":\n        for plan in [FAKE_PLAN, FAKE_PLAN_II, FAKE_TIER_PLAN, FAKE_PLAN_METERED]:\n            if value == plan[\"id\"]:\n                value = plan\n\n    self[name] = value\n</code></pre>"},{"location":"reference/project/#tests.SubscriptionDict.delete","title":"<code>tests.SubscriptionDict.delete(**kwargs)</code>","text":"Source code in <code>tests/__init__.py</code> <pre><code>def delete(self, **kwargs):\n    if \"at_period_end\" in kwargs:\n        self[\"cancel_at_period_end\"] = kwargs[\"at_period_end\"]\n\n    return self\n</code></pre>"},{"location":"reference/project/#tests.SubscriptionDict.save","title":"<code>tests.SubscriptionDict.save(idempotency_key=None)</code>","text":"Source code in <code>tests/__init__.py</code> <pre><code>def save(self, idempotency_key=None):\n    return self\n</code></pre>"},{"location":"reference/project/#tests.UsageRecordSummaryDict","title":"<code>tests.UsageRecordSummaryDict</code>","text":"<p>               Bases: <code>StripeItem</code></p> Source code in <code>tests/__init__.py</code> <pre><code>class UsageRecordSummaryDict(StripeItem):\n    pass\n</code></pre>"},{"location":"reference/project/#tests.WebhookEndpointDict","title":"<code>tests.WebhookEndpointDict</code>","text":"<p>               Bases: <code>StripeItem</code></p> Source code in <code>tests/__init__.py</code> <pre><code>class WebhookEndpointDict(StripeItem):\n    pass\n</code></pre>"},{"location":"reference/project/#tests-functions","title":"Functions","text":""},{"location":"reference/project/#tests.convert_source_dict","title":"<code>tests.convert_source_dict(data)</code>","text":"Source code in <code>tests/__init__.py</code> <pre><code>def convert_source_dict(data):\n    if data:\n        source_type = data[\"object\"]\n        if source_type == \"card\":\n            data = CardDict(data)\n        elif source_type == \"bank_account\":\n            data = BankAccountDict(data)\n        elif source_type == \"source\":\n            data = SourceDict(data)\n        else:\n            raise ValueError(f\"Unknown source type: {source_type}\")\n\n    return data\n</code></pre>"},{"location":"reference/project/#tests.datetime_to_unix","title":"<code>tests.datetime_to_unix(datetime_)</code>","text":"Source code in <code>tests/__init__.py</code> <pre><code>def datetime_to_unix(datetime_):\n    return int(dateformat.format(datetime_, \"U\"))\n</code></pre>"},{"location":"reference/project/#tests.load_fixture","title":"<code>tests.load_fixture(filename)</code>","text":"Source code in <code>tests/__init__.py</code> <pre><code>def load_fixture(filename):\n    with FIXTURE_DIR_PATH.joinpath(filename).open(\"r\") as f:\n        return json.load(f)\n</code></pre>"},{"location":"reference/settings/","title":"Settings","text":""},{"location":"reference/settings/#stripe_api_version-2020-08-27","title":"STRIPE_API_VERSION (='2020-08-27')","text":"<p>The API version used to communicate with the Stripe API is configurable, and defaults to the latest version that has been tested as working. Using a value other than the default is allowed, as a string in the format of YYYY-MM-DD.</p> <p>For example, you can specify <code>\"2020-03-02\"</code> to use that API version:</p> <pre><code>STRIPE_API_VERSION = \"2020-03-02\"\n</code></pre> <p>However you do so at your own risk, as using a value other than the default might result in incompatibilities between Stripe and this library, especially if Stripe has labelled the differences between API versions as \"Major\". Even small differences such as a new enumeration value might cause issues.</p> <p>For this reason it is best to assume that only the default version is supported.</p> <p>For more information on API versioning, see the stripe documentation.</p> <p>See also API Versions.</p>"},{"location":"reference/settings/#djstripe_idempotency_key_callback-djstripesettingsdjstripe_settings_get_idempotency_key","title":"DJSTRIPE_IDEMPOTENCY_KEY_CALLBACK (=djstripe.settings.djstripe_settings._get_idempotency_key)","text":"<p>A function which will return an idempotency key for a particular object_type and action pair. By default, this is set to a function which will create a <code>djstripe.IdempotencyKey</code> object and return its <code>uuid</code>. You may want to customize this if you want to give your idempotency keys a different lifecycle than they normally would get.</p> <p>The function takes the following signature:</p> <pre><code>def get_idempotency_key(object_type: str, action: str, livemode: bool):\n    return \"&lt;idempotency key&gt;\"\n</code></pre> <p>The function MUST return a string suitably random for the object_type/action pair, and usable in the Stripe <code>Idempotency-Key</code> HTTP header. For more information, see the stripe documentation.</p>"},{"location":"reference/settings/#djstripe_subscriber_customer_key-djstripe_subscriber","title":"DJSTRIPE_SUBSCRIBER_CUSTOMER_KEY (=\"djstripe_subscriber\")","text":"<p>Every Customer object created in Stripe is tagged with metadata This setting controls what the name of the key in Stripe should be. The key name must be a string no more than 40 characters long.</p> <p>You may set this to <code>None</code> or <code>\"\"</code> to disable that behaviour altogether. This is probably not something you want to do, though.</p>"},{"location":"reference/settings/#djstripe_subscriber_model-settingsauth_user_model","title":"DJSTRIPE_SUBSCRIBER_MODEL (=settings.AUTH_USER_MODEL)","text":"<p>If the AUTH_USER_MODEL doesn't represent the object your application's subscription holder, you may define a subscriber model to use here. It should be a string in the form of 'app.model'.</p> <p>Note</p> <p>DJSTRIPE_SUBSCRIBER_MODEL must have an <code>email</code> field. If your existing model has no email field, add an email property that defines an email address to use.</p> <p>Example Model:</p> <pre><code>class Organization(models.Model):\n    name = CharField(max_length=200, unique=True)\n    admin = ForeignKey(settings.AUTH_USER_MODEL, on_delete=CASCADE)\n\n    @property\n    def email(self):\n        return self.admin.email\n</code></pre>"},{"location":"reference/settings/#djstripe_subscriber_model_migration_dependency-__first__","title":"DJSTRIPE_SUBSCRIBER_MODEL_MIGRATION_DEPENDENCY (=\"__first__\")","text":"<p>If the model referenced in DJSTRIPE_SUBSCRIBER_MODEL is not created in the <code>__first__</code> migration of an app you can specify the migration name to depend on here. For example: \"0003_here_the_subscriber_model_was_added\"</p>"},{"location":"reference/settings/#djstripe_webhook_event_callback-none","title":"DJSTRIPE_WEBHOOK_EVENT_CALLBACK (=None)","text":"<p>Webhook event callbacks allow an application to take control of what happens when an event from Stripe is received. It must be a callable or importable string to a callable that takes an event object.</p> <p>One suggestion is to put the event onto a task queue (such as celery) for asynchronous processing.</p> <p>Examples:</p> <pre><code># callbacks.py\ndef webhook_event_callback(event, api_key):\n    \"\"\" Dispatches the event to celery for processing. \"\"\"\n    from . import tasks\n    # Ansychronous hand-off to celery so that we can continue immediately\n    tasks.process_webhook_event.s(event.pk, api_key).apply_async()\n</code></pre> <pre><code># tasks.py\nfrom djstripe.models import WebhookEventTrigger\nfrom stripe import StripeError\n\n@shared_task(bind=True)\ndef process_webhook_event(self, pk, api_key):\n    \"\"\" Processes events from Stripe asynchronously. \"\"\"\n    logger.info(f\"Processing Stripe event: {pk}\")\n    try:\n        # get the event\n        obj = WebhookEventTrigger.objects.get(pk=pk)\n        # process the event.\n        # internally, this creates a Stripe WebhookEvent Object and invokes the respective Webhooks\n        try:\n            event = obj.process(save=False, api_key=api_key)\n            # only save the event if webhook process was successfuly, otherwise it won't retry\n            event.save()\n        except StripeError as exc:\n            # Mark the event as not processed\n            obj.processed = False\n            obj.save()\n            logger.error(f\"Failed to process Stripe event: {pk}. Retrying in 60 seconds.\")\n            raise self.retry(exc=exc, countdown=60)  # retry after 60 seconds\n    except WebhookEventTrigger.DoesNotExist as exc:\n        # This can happen in case the celery task got executed before the actual model got saved to the DB\n        raise self.retry(exc=exc, countdown=10)  # retry after 10 seconds\n\n    return event.type or \"Stripe Event Processed\"\n</code></pre> <pre><code># settings.py\nDJSTRIPE_WEBHOOK_EVENT_CALLBACK = 'callbacks.webhook_event_callback'\n</code></pre>"},{"location":"reference/settings/#stripe_api_host-unset","title":"STRIPE_API_HOST (= unset)","text":"<p>If set, this sets the base API host for Stripe. You may want to set this to, for example, <code>\"http://localhost:12111\"</code> if you are running stripe-mock.</p> <p>If this is set in production (DEBUG=False), a warning will be raised on <code>manage.py check</code>.</p>"},{"location":"reference/settings/#djstripe_subscriber_model_request_callback-optionally-required","title":"DJSTRIPE_SUBSCRIBER_MODEL_REQUEST_CALLBACK (Optionally Required)","text":"<p>This is required to be set in case you are linking Stripe Customers (via the <code>subscriber</code> model field) to a model other than the one defined by <code>settings.AUTH_USER_MODEL</code></p> <pre><code># settings.py\nDJSTRIPE_SUBSCRIBER_MODEL_REQUEST_CALLBACK=(lambda request: request.org)\n</code></pre>"},{"location":"reference/settings/#source-code","title":"Source Code","text":"<p>dj-stripe settings</p> <p>selection: filters: - \"!^[^]\"</p>"},{"location":"reference/settings/#djstripe.settings-attributes","title":"Attributes","text":""},{"location":"reference/settings/#djstripe.settings.djstripe_settings","title":"<code>djstripe.settings.djstripe_settings = DjstripeSettings()</code>  <code>module-attribute</code>","text":""},{"location":"reference/settings/#djstripe.settings-classes","title":"Classes","text":""},{"location":"reference/settings/#djstripe.settings.DjstripeSettings","title":"<code>djstripe.settings.DjstripeSettings</code>","text":"<p>Container for Dj-stripe settings</p> <p>:return: Initialised settings for Dj-stripe. :rtype: object</p> Source code in <code>djstripe/settings.py</code> <pre><code>class DjstripeSettings:\n    \"\"\"Container for Dj-stripe settings\n\n    :return: Initialised settings for Dj-stripe.\n    :rtype: object\n\n    \"\"\"\n\n    DEFAULT_STRIPE_API_VERSION = \"2020-08-27\"\n\n    ZERO_DECIMAL_CURRENCIES = {\n        \"bif\",\n        \"clp\",\n        \"djf\",\n        \"gnf\",\n        \"jpy\",\n        \"kmf\",\n        \"krw\",\n        \"mga\",\n        \"pyg\",\n        \"rwf\",\n        \"vnd\",\n        \"vuv\",\n        \"xaf\",\n        \"xof\",\n        \"xpf\",\n    }\n\n    def __init__(self):\n        # Set STRIPE_API_HOST if you want to use a different Stripe API server\n        # Example: https://github.com/stripe/stripe-mock\n        if hasattr(settings, \"STRIPE_API_HOST\"):\n            stripe.api_base = getattr(settings, \"STRIPE_API_HOST\")\n\n    # generic setter and deleter methods to ensure object patching works\n    def __setattr__(self, name, value):\n        self.__dict__[name] = value\n\n    def __delattr__(self, name):\n        del self.__dict__[name]\n\n    @property\n    def subscriber_request_callback(self):\n        return self.get_callback_function(\n            \"DJSTRIPE_SUBSCRIBER_MODEL_REQUEST_CALLBACK\",\n            default=(lambda request: request.user),\n        )\n\n    @property\n    def get_idempotency_key(self):\n        return self.get_callback_function(\n            \"DJSTRIPE_IDEMPOTENCY_KEY_CALLBACK\", self._get_idempotency_key\n        )\n\n    @property\n    def decimal_max_digits(self):\n        return 24\n\n    @property\n    def decimal_places(self):\n        return 12\n\n    # Webhook event callbacks allow an application to take control of what happens\n    # when an event from Stripe is received.  One suggestion is to put the event\n    # onto a task queue (such as celery) for asynchronous processing.\n    @property\n    def WEBHOOK_EVENT_CALLBACK(self):\n        return self.get_callback_function(\"DJSTRIPE_WEBHOOK_EVENT_CALLBACK\")\n\n    @property\n    def SUBSCRIBER_CUSTOMER_KEY(self):\n        return getattr(\n            settings, \"DJSTRIPE_SUBSCRIBER_CUSTOMER_KEY\", \"djstripe_subscriber\"\n        )\n\n    @property\n    def TEST_API_KEY(self):\n        return getattr(settings, \"STRIPE_TEST_SECRET_KEY\", \"\")\n\n    @property\n    def LIVE_API_KEY(self):\n        return getattr(settings, \"STRIPE_LIVE_SECRET_KEY\", \"\")\n\n    # Determines whether we are in live mode or test mode\n    @property\n    def STRIPE_LIVE_MODE(self):\n        return getattr(settings, \"STRIPE_LIVE_MODE\", False)\n\n    @property\n    def STRIPE_SECRET_KEY(self):\n        # Default secret key\n        if hasattr(settings, \"STRIPE_SECRET_KEY\"):\n            STRIPE_SECRET_KEY = settings.STRIPE_SECRET_KEY\n        else:\n            STRIPE_SECRET_KEY = (\n                self.LIVE_API_KEY if self.STRIPE_LIVE_MODE else self.TEST_API_KEY\n            )\n        return STRIPE_SECRET_KEY\n\n    @property\n    def STRIPE_PUBLIC_KEY(self):\n        # Default public key\n        if hasattr(settings, \"STRIPE_PUBLIC_KEY\"):\n            STRIPE_PUBLIC_KEY = settings.STRIPE_PUBLIC_KEY\n        elif self.STRIPE_LIVE_MODE:\n            STRIPE_PUBLIC_KEY = getattr(settings, \"STRIPE_LIVE_PUBLIC_KEY\", \"\")\n        else:\n            STRIPE_PUBLIC_KEY = getattr(settings, \"STRIPE_TEST_PUBLIC_KEY\", \"\")\n        return STRIPE_PUBLIC_KEY\n\n    @property\n    def STRIPE_API_VERSION(self) -&gt; str:\n        \"\"\"\n        Get the desired API version to use for Stripe requests.\n        \"\"\"\n        version = getattr(settings, \"STRIPE_API_VERSION\", stripe.api_version)\n        return version or self.DEFAULT_STRIPE_API_VERSION\n\n    def get_callback_function(self, setting_name, default=None):\n        \"\"\"\n        Resolve a callback function based on a setting name.\n\n        If the setting value isn't set, default is returned.  If the setting value\n        is already a callable function, that value is used - If the setting value\n        is a string, an attempt is made to import it.  Anything else will result in\n        a failed import causing ImportError to be raised.\n\n        :param setting_name: The name of the setting to resolve a callback from.\n        :type setting_name: string (``str``/``unicode``)\n        :param default: The default to return if setting isn't populated.\n        :type default: ``bool``\n        :returns: The resolved callback function (if any).\n        :type: ``callable``\n        \"\"\"\n        func = getattr(settings, setting_name, None)\n        if not func:\n            return default\n\n        if callable(func):\n            return func\n\n        if isinstance(func, str):\n            func = import_string(func)\n\n        if not callable(func):\n            raise ImproperlyConfigured(f\"{setting_name} must be callable.\")\n\n        return func\n\n    def _get_idempotency_key(self, object_type, action, livemode) -&gt; str:\n        from .models import IdempotencyKey\n\n        action = f\"{object_type}:{action}\"\n        idempotency_key, _created = IdempotencyKey.objects.get_or_create(\n            action=action, livemode=livemode\n        )\n        return str(idempotency_key.uuid)\n\n    def get_default_api_key(self, livemode) -&gt; str:\n        \"\"\"\n        Returns the default API key for a value of `livemode`.\n        \"\"\"\n        if livemode is None:\n            # Livemode is unknown. Use the default secret key.\n            return self.STRIPE_SECRET_KEY\n        elif livemode:\n            # Livemode is true, use the live secret key\n            return self.LIVE_API_KEY or self.STRIPE_SECRET_KEY\n        else:\n            # Livemode is false, use the test secret key\n            return self.TEST_API_KEY or self.STRIPE_SECRET_KEY\n\n    def get_subscriber_model_string(self) -&gt; str:\n        \"\"\"Get the configured subscriber model as a module path string.\"\"\"\n        return getattr(settings, \"DJSTRIPE_SUBSCRIBER_MODEL\", settings.AUTH_USER_MODEL)  # type: ignore\n\n    def get_subscriber_model(self):\n        \"\"\"\n        Attempt to pull settings.DJSTRIPE_SUBSCRIBER_MODEL.\n\n        Users have the option of specifying a custom subscriber model via the\n        DJSTRIPE_SUBSCRIBER_MODEL setting.\n\n        This methods falls back to AUTH_USER_MODEL if DJSTRIPE_SUBSCRIBER_MODEL is not set.\n\n        Returns the subscriber model that is active in this project.\n        \"\"\"\n        model_name = self.get_subscriber_model_string()\n\n        # Attempt a Django 1.7 app lookup\n        try:\n            subscriber_model = django_apps.get_model(model_name)\n        except ValueError:\n            raise ImproperlyConfigured(\n                \"DJSTRIPE_SUBSCRIBER_MODEL must be of the form 'app_label.model_name'.\"\n            )\n        except LookupError:\n            raise ImproperlyConfigured(\n                f\"DJSTRIPE_SUBSCRIBER_MODEL refers to model '{model_name}' \"\n                \"that has not been installed.\"\n            )\n\n        if (\n            \"email\"\n            not in [field_.name for field_ in subscriber_model._meta.get_fields()]\n        ) and not hasattr(subscriber_model, \"email\"):\n            raise ImproperlyConfigured(\n                \"DJSTRIPE_SUBSCRIBER_MODEL must have an email attribute.\"\n            )\n\n        if model_name != settings.AUTH_USER_MODEL:\n            # Custom user model detected. Make sure the callback is configured.\n            func = self.get_callback_function(\n                \"DJSTRIPE_SUBSCRIBER_MODEL_REQUEST_CALLBACK\"\n            )\n            if not func:\n                raise ImproperlyConfigured(\n                    \"DJSTRIPE_SUBSCRIBER_MODEL_REQUEST_CALLBACK must be implemented \"\n                    \"if a DJSTRIPE_SUBSCRIBER_MODEL is defined.\"\n                )\n\n        return subscriber_model\n</code></pre>"},{"location":"reference/settings/#djstripe.settings.DjstripeSettings-attributes","title":"Attributes","text":""},{"location":"reference/settings/#djstripe.settings.DjstripeSettings.DEFAULT_STRIPE_API_VERSION","title":"<code>djstripe.settings.DjstripeSettings.DEFAULT_STRIPE_API_VERSION = '2020-08-27'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/settings/#djstripe.settings.DjstripeSettings.LIVE_API_KEY","title":"<code>djstripe.settings.DjstripeSettings.LIVE_API_KEY</code>  <code>property</code>","text":""},{"location":"reference/settings/#djstripe.settings.DjstripeSettings.STRIPE_API_VERSION","title":"<code>djstripe.settings.DjstripeSettings.STRIPE_API_VERSION: str</code>  <code>property</code>","text":"<p>Get the desired API version to use for Stripe requests.</p>"},{"location":"reference/settings/#djstripe.settings.DjstripeSettings.STRIPE_LIVE_MODE","title":"<code>djstripe.settings.DjstripeSettings.STRIPE_LIVE_MODE</code>  <code>property</code>","text":""},{"location":"reference/settings/#djstripe.settings.DjstripeSettings.STRIPE_PUBLIC_KEY","title":"<code>djstripe.settings.DjstripeSettings.STRIPE_PUBLIC_KEY</code>  <code>property</code>","text":""},{"location":"reference/settings/#djstripe.settings.DjstripeSettings.STRIPE_SECRET_KEY","title":"<code>djstripe.settings.DjstripeSettings.STRIPE_SECRET_KEY</code>  <code>property</code>","text":""},{"location":"reference/settings/#djstripe.settings.DjstripeSettings.SUBSCRIBER_CUSTOMER_KEY","title":"<code>djstripe.settings.DjstripeSettings.SUBSCRIBER_CUSTOMER_KEY</code>  <code>property</code>","text":""},{"location":"reference/settings/#djstripe.settings.DjstripeSettings.TEST_API_KEY","title":"<code>djstripe.settings.DjstripeSettings.TEST_API_KEY</code>  <code>property</code>","text":""},{"location":"reference/settings/#djstripe.settings.DjstripeSettings.WEBHOOK_EVENT_CALLBACK","title":"<code>djstripe.settings.DjstripeSettings.WEBHOOK_EVENT_CALLBACK</code>  <code>property</code>","text":""},{"location":"reference/settings/#djstripe.settings.DjstripeSettings.ZERO_DECIMAL_CURRENCIES","title":"<code>djstripe.settings.DjstripeSettings.ZERO_DECIMAL_CURRENCIES = {'bif', 'clp', 'djf', 'gnf', 'jpy', 'kmf', 'krw', 'mga', 'pyg', 'rwf', 'vnd', 'vuv', 'xaf', 'xof', 'xpf'}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/settings/#djstripe.settings.DjstripeSettings.decimal_max_digits","title":"<code>djstripe.settings.DjstripeSettings.decimal_max_digits</code>  <code>property</code>","text":""},{"location":"reference/settings/#djstripe.settings.DjstripeSettings.decimal_places","title":"<code>djstripe.settings.DjstripeSettings.decimal_places</code>  <code>property</code>","text":""},{"location":"reference/settings/#djstripe.settings.DjstripeSettings.get_idempotency_key","title":"<code>djstripe.settings.DjstripeSettings.get_idempotency_key</code>  <code>property</code>","text":""},{"location":"reference/settings/#djstripe.settings.DjstripeSettings.subscriber_request_callback","title":"<code>djstripe.settings.DjstripeSettings.subscriber_request_callback</code>  <code>property</code>","text":""},{"location":"reference/settings/#djstripe.settings.DjstripeSettings-functions","title":"Functions","text":""},{"location":"reference/settings/#djstripe.settings.DjstripeSettings.__delattr__","title":"<code>djstripe.settings.DjstripeSettings.__delattr__(name)</code>","text":"Source code in <code>djstripe/settings.py</code> <pre><code>def __delattr__(self, name):\n    del self.__dict__[name]\n</code></pre>"},{"location":"reference/settings/#djstripe.settings.DjstripeSettings.__init__","title":"<code>djstripe.settings.DjstripeSettings.__init__()</code>","text":"Source code in <code>djstripe/settings.py</code> <pre><code>def __init__(self):\n    # Set STRIPE_API_HOST if you want to use a different Stripe API server\n    # Example: https://github.com/stripe/stripe-mock\n    if hasattr(settings, \"STRIPE_API_HOST\"):\n        stripe.api_base = getattr(settings, \"STRIPE_API_HOST\")\n</code></pre>"},{"location":"reference/settings/#djstripe.settings.DjstripeSettings.__setattr__","title":"<code>djstripe.settings.DjstripeSettings.__setattr__(name, value)</code>","text":"Source code in <code>djstripe/settings.py</code> <pre><code>def __setattr__(self, name, value):\n    self.__dict__[name] = value\n</code></pre>"},{"location":"reference/settings/#djstripe.settings.DjstripeSettings.get_callback_function","title":"<code>djstripe.settings.DjstripeSettings.get_callback_function(setting_name, default=None)</code>","text":"<p>Resolve a callback function based on a setting name.</p> <p>If the setting value isn't set, default is returned.  If the setting value is already a callable function, that value is used - If the setting value is a string, an attempt is made to import it.  Anything else will result in a failed import causing ImportError to be raised.</p> <p>:param setting_name: The name of the setting to resolve a callback from. :type setting_name: string (<code>str</code>/<code>unicode</code>) :param default: The default to return if setting isn't populated. :type default: <code>bool</code> :returns: The resolved callback function (if any). :type: <code>callable</code></p> Source code in <code>djstripe/settings.py</code> <pre><code>def get_callback_function(self, setting_name, default=None):\n    \"\"\"\n    Resolve a callback function based on a setting name.\n\n    If the setting value isn't set, default is returned.  If the setting value\n    is already a callable function, that value is used - If the setting value\n    is a string, an attempt is made to import it.  Anything else will result in\n    a failed import causing ImportError to be raised.\n\n    :param setting_name: The name of the setting to resolve a callback from.\n    :type setting_name: string (``str``/``unicode``)\n    :param default: The default to return if setting isn't populated.\n    :type default: ``bool``\n    :returns: The resolved callback function (if any).\n    :type: ``callable``\n    \"\"\"\n    func = getattr(settings, setting_name, None)\n    if not func:\n        return default\n\n    if callable(func):\n        return func\n\n    if isinstance(func, str):\n        func = import_string(func)\n\n    if not callable(func):\n        raise ImproperlyConfigured(f\"{setting_name} must be callable.\")\n\n    return func\n</code></pre>"},{"location":"reference/settings/#djstripe.settings.DjstripeSettings.get_default_api_key","title":"<code>djstripe.settings.DjstripeSettings.get_default_api_key(livemode)</code>","text":"<p>Returns the default API key for a value of <code>livemode</code>.</p> Source code in <code>djstripe/settings.py</code> <pre><code>def get_default_api_key(self, livemode) -&gt; str:\n    \"\"\"\n    Returns the default API key for a value of `livemode`.\n    \"\"\"\n    if livemode is None:\n        # Livemode is unknown. Use the default secret key.\n        return self.STRIPE_SECRET_KEY\n    elif livemode:\n        # Livemode is true, use the live secret key\n        return self.LIVE_API_KEY or self.STRIPE_SECRET_KEY\n    else:\n        # Livemode is false, use the test secret key\n        return self.TEST_API_KEY or self.STRIPE_SECRET_KEY\n</code></pre>"},{"location":"reference/settings/#djstripe.settings.DjstripeSettings.get_subscriber_model","title":"<code>djstripe.settings.DjstripeSettings.get_subscriber_model()</code>","text":"<p>Attempt to pull settings.DJSTRIPE_SUBSCRIBER_MODEL.</p> <p>Users have the option of specifying a custom subscriber model via the DJSTRIPE_SUBSCRIBER_MODEL setting.</p> <p>This methods falls back to AUTH_USER_MODEL if DJSTRIPE_SUBSCRIBER_MODEL is not set.</p> <p>Returns the subscriber model that is active in this project.</p> Source code in <code>djstripe/settings.py</code> <pre><code>def get_subscriber_model(self):\n    \"\"\"\n    Attempt to pull settings.DJSTRIPE_SUBSCRIBER_MODEL.\n\n    Users have the option of specifying a custom subscriber model via the\n    DJSTRIPE_SUBSCRIBER_MODEL setting.\n\n    This methods falls back to AUTH_USER_MODEL if DJSTRIPE_SUBSCRIBER_MODEL is not set.\n\n    Returns the subscriber model that is active in this project.\n    \"\"\"\n    model_name = self.get_subscriber_model_string()\n\n    # Attempt a Django 1.7 app lookup\n    try:\n        subscriber_model = django_apps.get_model(model_name)\n    except ValueError:\n        raise ImproperlyConfigured(\n            \"DJSTRIPE_SUBSCRIBER_MODEL must be of the form 'app_label.model_name'.\"\n        )\n    except LookupError:\n        raise ImproperlyConfigured(\n            f\"DJSTRIPE_SUBSCRIBER_MODEL refers to model '{model_name}' \"\n            \"that has not been installed.\"\n        )\n\n    if (\n        \"email\"\n        not in [field_.name for field_ in subscriber_model._meta.get_fields()]\n    ) and not hasattr(subscriber_model, \"email\"):\n        raise ImproperlyConfigured(\n            \"DJSTRIPE_SUBSCRIBER_MODEL must have an email attribute.\"\n        )\n\n    if model_name != settings.AUTH_USER_MODEL:\n        # Custom user model detected. Make sure the callback is configured.\n        func = self.get_callback_function(\n            \"DJSTRIPE_SUBSCRIBER_MODEL_REQUEST_CALLBACK\"\n        )\n        if not func:\n            raise ImproperlyConfigured(\n                \"DJSTRIPE_SUBSCRIBER_MODEL_REQUEST_CALLBACK must be implemented \"\n                \"if a DJSTRIPE_SUBSCRIBER_MODEL is defined.\"\n            )\n\n    return subscriber_model\n</code></pre>"},{"location":"reference/settings/#djstripe.settings.DjstripeSettings.get_subscriber_model_string","title":"<code>djstripe.settings.DjstripeSettings.get_subscriber_model_string()</code>","text":"<p>Get the configured subscriber model as a module path string.</p> Source code in <code>djstripe/settings.py</code> <pre><code>def get_subscriber_model_string(self) -&gt; str:\n    \"\"\"Get the configured subscriber model as a module path string.\"\"\"\n    return getattr(settings, \"DJSTRIPE_SUBSCRIBER_MODEL\", settings.AUTH_USER_MODEL)  # type: ignore\n</code></pre>"},{"location":"reference/utils/","title":"Utilities","text":"<p>Utility functions related to the djstripe app.</p>"},{"location":"reference/utils/#djstripe.utils-attributes","title":"Attributes","text":""},{"location":"reference/utils/#djstripe.utils.CURRENCY_SIGILS","title":"<code>djstripe.utils.CURRENCY_SIGILS = {'CAD': '$', 'EUR': '\u20ac', 'GBP': '\u00a3', 'USD': '$'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/utils/#djstripe.utils-classes","title":"Classes","text":""},{"location":"reference/utils/#djstripe.utils.QuerySetMock","title":"<code>djstripe.utils.QuerySetMock</code>","text":"<p>               Bases: <code>QuerySet</code></p> <p>A mocked QuerySet class that does not handle updates. Used by UpcomingInvoice.invoiceitems (deprecated) and UpcomingInvoice.lineitems.</p> Source code in <code>djstripe/utils.py</code> <pre><code>class QuerySetMock(QuerySet):\n    \"\"\"\n    A mocked QuerySet class that does not handle updates.\n    Used by UpcomingInvoice.invoiceitems (deprecated) and UpcomingInvoice.lineitems.\n    \"\"\"\n\n    @classmethod\n    def from_iterable(cls, model, iterable):\n        instance = cls(model)\n        instance._result_cache = list(iterable)\n        instance._prefetch_done = True\n        return instance\n\n    def _clone(self):\n        return self.__class__.from_iterable(self.model, self._result_cache)\n\n    def update(self):\n        return 0\n\n    def delete(self):\n        return 0\n</code></pre>"},{"location":"reference/utils/#djstripe.utils.QuerySetMock-functions","title":"Functions","text":""},{"location":"reference/utils/#djstripe.utils.QuerySetMock.delete","title":"<code>djstripe.utils.QuerySetMock.delete()</code>","text":"Source code in <code>djstripe/utils.py</code> <pre><code>def delete(self):\n    return 0\n</code></pre>"},{"location":"reference/utils/#djstripe.utils.QuerySetMock.from_iterable","title":"<code>djstripe.utils.QuerySetMock.from_iterable(model, iterable)</code>  <code>classmethod</code>","text":"Source code in <code>djstripe/utils.py</code> <pre><code>@classmethod\ndef from_iterable(cls, model, iterable):\n    instance = cls(model)\n    instance._result_cache = list(iterable)\n    instance._prefetch_done = True\n    return instance\n</code></pre>"},{"location":"reference/utils/#djstripe.utils.QuerySetMock.update","title":"<code>djstripe.utils.QuerySetMock.update()</code>","text":"Source code in <code>djstripe/utils.py</code> <pre><code>def update(self):\n    return 0\n</code></pre>"},{"location":"reference/utils/#djstripe.utils-functions","title":"Functions","text":""},{"location":"reference/utils/#djstripe.utils.clear_expired_idempotency_keys","title":"<code>djstripe.utils.clear_expired_idempotency_keys()</code>","text":"Source code in <code>djstripe/utils.py</code> <pre><code>def clear_expired_idempotency_keys():\n    from .models import IdempotencyKey\n\n    threshold = timezone.now() - datetime.timedelta(hours=24)\n    IdempotencyKey.objects.filter(created__lt=threshold).delete()\n</code></pre>"},{"location":"reference/utils/#djstripe.utils.convert_tstamp","title":"<code>djstripe.utils.convert_tstamp(response)</code>","text":"<p>Convert a Stripe API timestamp response (unix epoch) to a native datetime.</p> Source code in <code>djstripe/utils.py</code> <pre><code>def convert_tstamp(response) -&gt; Optional[datetime.datetime]:\n    \"\"\"\n    Convert a Stripe API timestamp response (unix epoch) to a native datetime.\n    \"\"\"\n    if response is None:\n        # Allow passing None to convert_tstamp()\n        return response\n\n    # Overrides the set timezone to UTC - I think...\n    tz = get_timezone_utc() if settings.USE_TZ else None\n\n    return datetime.datetime.fromtimestamp(response, tz)\n</code></pre>"},{"location":"reference/utils/#djstripe.utils.get_friendly_currency_amount","title":"<code>djstripe.utils.get_friendly_currency_amount(amount, currency)</code>","text":"Source code in <code>djstripe/utils.py</code> <pre><code>def get_friendly_currency_amount(amount, currency: str) -&gt; str:\n    currency = currency.upper()\n    sigil = CURRENCY_SIGILS.get(currency, \"\")\n    amount_two_decimals = f\"{amount:.2f}\"\n    return f\"{sigil}{intcomma(amount_two_decimals)} {currency}\"\n</code></pre>"},{"location":"reference/utils/#djstripe.utils.get_id_from_stripe_data","title":"<code>djstripe.utils.get_id_from_stripe_data(data)</code>","text":"<p>Extract stripe id from stripe field data</p> Source code in <code>djstripe/utils.py</code> <pre><code>def get_id_from_stripe_data(data):\n    \"\"\"\n    Extract stripe id from stripe field data\n    \"\"\"\n\n    if isinstance(data, str):\n        # data like \"sub_6lsC8pt7IcFpjA\"\n        return data\n    elif data:\n        # data like {\"id\": sub_6lsC8pt7IcFpjA\", ...}\n        return data.get(\"id\")\n    else:\n        return None\n</code></pre>"},{"location":"reference/utils/#djstripe.utils.get_model","title":"<code>djstripe.utils.get_model(model_name)</code>","text":"Source code in <code>djstripe/utils.py</code> <pre><code>def get_model(model_name):\n    app_label = \"djstripe\"\n    app_config = apps.get_app_config(app_label)\n    model = app_config.get_model(model_name)\n    return model\n</code></pre>"},{"location":"reference/utils/#djstripe.utils.get_queryset","title":"<code>djstripe.utils.get_queryset(pks, model_name)</code>","text":"Source code in <code>djstripe/utils.py</code> <pre><code>def get_queryset(pks, model_name):\n    model = get_model(model_name)\n    return model.objects.filter(pk__in=pks)\n</code></pre>"},{"location":"reference/utils/#djstripe.utils.get_supported_currency_choices","title":"<code>djstripe.utils.get_supported_currency_choices(api_key)</code>","text":"<p>Pull a stripe account's supported currencies and returns a choices tuple of those supported currencies.</p> <p>:param api_key: The api key associated with the account from which to pull data. :type api_key: str</p> Source code in <code>djstripe/utils.py</code> <pre><code>def get_supported_currency_choices(api_key):\n    \"\"\"\n    Pull a stripe account's supported currencies and returns a choices tuple of those\n    supported currencies.\n\n    :param api_key: The api key associated with the account from which to pull data.\n    :type api_key: str\n    \"\"\"\n    account = stripe.Account.retrieve(api_key=api_key)\n    supported_payment_currencies = stripe.CountrySpec.retrieve(\n        account[\"country\"], api_key=api_key\n    )[\"supported_payment_currencies\"]\n\n    return [(currency, currency.upper()) for currency in supported_payment_currencies]\n</code></pre>"},{"location":"reference/utils/#djstripe.utils.get_timezone_utc","title":"<code>djstripe.utils.get_timezone_utc()</code>","text":"<p>Returns UTC attribute in a backwards compatible way.</p> <p>UTC attribute has been moved from django.utils.timezone module to datetime.timezone class</p> Source code in <code>djstripe/utils.py</code> <pre><code>def get_timezone_utc():\n    \"\"\"\n    Returns UTC attribute in a backwards compatible way.\n\n    UTC attribute has been moved from django.utils.timezone module to\n    datetime.timezone class\n    \"\"\"\n    try:\n        # Django 4+\n        return datetime.timezone.utc\n    except AttributeError:\n        return timezone.utc\n</code></pre>"},{"location":"usage/add_payment_method_to_customer/","title":"How to add payment method to a customer","text":"<p>You can use the <code>add_payment_method</code> method on a customer object to add a payment method token to a customer on Stripe, this will allow you to charge the customer later on that payment method since it will be added as the default payment method.</p> <pre><code>from djstripe.models import Customer\n\ncustomer = Customer.objects.first() # Get the first customer in the database as an example\ncustomer.add_payment_method(\"pm_card_visa\") # Add a payment method to the customer as the default payment method\n</code></pre> <p>If you want to add a payment method to a customer without making it the default payment method, you can use the <code>add_payment_method</code> and pass the parameter <code>set_default=False</code>:</p> <pre><code>from djstripe.models import Customer\n\ncustomer = Customer.objects.first() # Get the first customer in the database as an example\ncustomer.add_payment_method(\"pm_card_visa\", set_default=False) # Add a payment method to the customer without making it the default payment method\n</code></pre> <p>!! warning     Please keep in mind that due to securities concerns, Stripe will not let you send credit card information through their API, so you will need to use a Stripe token to add a payment method to a customer. You can read more about Stripe tokens here.</p>"},{"location":"usage/creating_individual_charges/","title":"Creating individual charges","text":"<p>On the subscriber's customer object, use the <code>charge</code> method to generate a Stripe charge. In this example, we're using the user named <code>admin</code> as the subscriber.</p> <pre><code>from decimal import Decimal\nfrom django.contrib.auth import get_user_model\nfrom djstripe.models import Customer\n\nuser = get_user_model().objects.get(username=\"admin\")\ncustomer, created = Customer.get_or_create(subscriber=user)\ncustomer.charge(Decimal(\"10.00\"), currency=\"usd\")  # Create charge for 10.00 USD\n</code></pre>"},{"location":"usage/creating_usage_record/","title":"Create a Stripe Usage Record","text":"<p>Usage records allow you to report customer usage and metrics to Stripe for metered billing of subscription prices</p> <p>Usage records created using Djstripe's <code>UsageRecord.create()</code> method will both create and sync the created <code>UsageRecord</code> object with your db.</p> <p>Note</p> <p>UsageRecord objects created directly will not sync because Stripe does not expose a way to retrieve UsageRecord objects directly. They can thus only be synced at creation time.</p>"},{"location":"usage/creating_usage_record/#code","title":"Code:","text":"<pre><code>from djstripe.models import UsageRecord\n\n# create and sync UsageRecord object\nUsageRecord.create(id=&lt;SUBSCRIPTION_ITEM_ID&gt;, quantity=&lt;SUBSCRIPTION_ITEM_QUANTITY&gt;, timestamp=timestamp)\n</code></pre>"},{"location":"usage/local_webhook_testing/","title":"Local Webhook Testing","text":"<p>The Stripe CLI allows receiving webhooks events from Stripe on your local machine via a direct connection to Stripe's API.</p> <p>Set the <code>--forward-to</code> flag to the URL of a local webhook endpoint you created via the Django admin or the Stripe Dashboard. New Style <code>UUID</code> urls are also supported from <code>v2.7</code> onwards. For example:</p> <pre><code>stripe listen --forward-to http://localhost:8000/stripe/webhook/&lt;UUID&gt;/\n</code></pre> <p>The signatures of events sent by Stripe to the webhooks are verified to prevent third-parties from interacting with the endpoints. Events will be signed with a webhook secret different from existing endpoints (because Stripe CLI doesn't require a webhook endpoint to be set up). You can obtain this secret by looking at the output of <code>stripe listen</code> or by running <code>stripe listen --print-secret</code>.</p> <p>In order to let dj-stripe know about the secret key to verify the signature, it can be passed as an HTTP header; dj-stripe looks for a header called <code>X-Djstripe-Webhook-Secret</code>:</p> <pre><code>stripe listen \\\n  --forward-to http://localhost:8000/djstripe/webhook/&lt;UUID&gt;/ \\\n  -H \"x-djstripe-webhook-secret: $(stripe listen --print-secret)\"\n</code></pre> <p>From now on, whenever you make changes on the Stripe Dashboard, the webhook endpoint you specified with <code>--forward-to</code> will called with the respective changes.</p> <p>Hint</p> <p>If the webhook secret is not passed to dj-stripe, signature validation will fail with an HTTP status code 400 and the message \"Failed to verify header\".</p> <p>Stripe events can now be triggered like so:</p> <pre><code>stripe trigger customer.created\n</code></pre>"},{"location":"usage/managing_subscriptions/","title":"Managing subscriptions and payment sources","text":""},{"location":"usage/managing_subscriptions/#extending-subscriptions","title":"Extending subscriptions","text":"<p>For your convenience, dj-stripe provides a <code>Subscription.extend(*delta*)</code> method</p> <p>Subscriptions can be extended by using the <code>Subscription.extend</code> method, which takes a positive <code>timedelta</code> as its only property. This method is useful if you want to offer time-cards, gift-cards, or some other external way of subscribing users or extending subscriptions, while keeping the billing handling within Stripe.</p> <p>Warning</p> <p>Subscription extensions are achieved by manipulating the <code>trial_end</code> of the subscription instance, which means that Stripe will change the status to <code>trialing</code>.</p>"},{"location":"usage/manually_syncing_with_stripe/","title":"Manually syncing data with Stripe","text":"<p>If you're using dj-stripe's webhook handlers then data will be automatically synced from Stripe to the Django database, but in some circumstances you may want to manually sync Stripe API data as well.</p>"},{"location":"usage/manually_syncing_with_stripe/#command-line","title":"Command line","text":"<p>You can sync your database with stripe using the management command <code>djstripe_sync_models</code>, e.g. to populate an empty database from an existing Stripe account. <pre><code>    ./manage.py djstripe_sync_models\n</code></pre> With no arguments this will sync all supported models for all in database API Keys , or a list of models to sync can also be provided. <pre><code>    ./manage.py djstripe_sync_models Invoice Subscription\n</code></pre> Note that this may be redundant since we recursively sync related objects.</p> <p>A list of models to sync can also be provided along with the API Keys. <pre><code>    ./manage.py djstripe_sync_models Invoice Subscription --api-keys sk_test_XXX sk_test_YYY\n</code></pre> This will sync all the Invoice and Subscription data for the given API Keys. Please note that the API Keys sk_test_YYY and sk_test_XXX need to be in the database.</p> <p>You can manually reprocess events using the management commands <code>djstripe_process_events</code>. By default this processes all events, but options can be passed to limit the events processed. Note the Stripe API documents a limitation where events are only guaranteed to be available for 30 days.</p> <pre><code>    # all events\n    ./manage.py djstripe_process_events\n    # failed events (events with pending webhooks or where all webhook delivery attempts failed)\n    ./manage.py djstripe_process_events --failed\n    # filter by event type (all payment_intent events in this example)\n    ./manage.py djstripe_process_events --type payment_intent.*\n    # specific events by ID\n    ./manage.py djstripe_process_events --ids evt_foo evt_bar\n    # more output for debugging processing failures\n    ./manage.py djstripe_process_events -v 2\n</code></pre>"},{"location":"usage/manually_syncing_with_stripe/#in-code","title":"In Code","text":"<p>To sync in code, for example if you write to the Stripe API and want to work with the resulting dj-stripe object without having to wait for the webhook trigger.</p> <p>This can be done using the classmethod <code>sync_from_stripe_data</code> that exists on all dj-stripe model classes.</p> <p>E.g. creating a product using the Stripe API, and then syncing the API return data to Django using dj-stripe:</p>"},{"location":"usage/subscribing_customers/","title":"Subscribing a customer to one or more prices (or plans)","text":""},{"location":"usage/subscribing_customers/#recommended-approach","title":"Recommended Approach","text":"<pre><code># Recommended Approach to use items dict with Prices\n## This will subscribe &lt;customer&gt; to both &lt;price_1&gt; and &lt;price_2&gt;\nprice_1 = Price.objects.get(nickname=\"one_price\")\nprice_2 = Price.objects.get(nickname=\"two_price\")\ncustomer = Customer.objects.first()\ncustomer.subscribe(items=[{\"price\": price_1}, {\"price\": price_2}])\n\n## This will subscribe &lt;customer&gt; to &lt;price_1&gt;\nprice_1 = Price.objects.get(nickname=\"one_price\")\ncustomer = Customer.objects.first()\ncustomer.subscribe(items=[{\"price\": price_1}])\n</code></pre>"},{"location":"usage/subscribing_customers/#alternate-approach-1-with-legacy-plans","title":"Alternate Approach 1 (with legacy Plans)","text":"<pre><code>## (Alternate Approach) This will subscribe &lt;customer&gt; to &lt;price_1&gt;\nprice_1 = Price.objects.get(nickname=\"one_price\")\ncustomer = Customer.objects.first()\ncustomer.subscribe(price=price_1)\n\n# If you still use legacy Plans...\n## This will subscribe &lt;customer&gt; to both &lt;plan_1&gt; and &lt;plan_2&gt;\nplan_1 = Plan.objects.get(nickname=\"one_plan\")\nplan_2 = Plan.objects.get(nickname=\"two_plan\")\ncustomer = Customer.objects.first()\ncustomer.subscribe(items=[{\"plan\": plan_1}, {\"plan\": plan_2}])\n\n## This will subscribe &lt;customer&gt; to &lt;plan_1&gt;\nplan_1 = Plan.objects.get(nickname=\"one_plan\")\ncustomer = Customer.objects.first()\ncustomer.subscribe(items=[{\"plan\": plan_1}])\n</code></pre>"},{"location":"usage/subscribing_customers/#alternate-approach-2","title":"Alternate Approach 2","text":"<pre><code>## (Alternate Approach) This will subscribe &lt;customer&gt; to &lt;plan_1&gt;\nplan_1 = Plan.objects.get(nickname=\"one_plan\")\ncustomer = Customer.objects.first()\ncustomer.subscribe(plan=plan_1)\n</code></pre> <p>However in some cases <code>subscribe()</code> might not support all the arguments you need for your implementation. When this happens you can just call the official <code>stripe.Customer.subscribe()</code>.</p> <p>Tip</p> <p>Check out the following examples:</p> <ul> <li><code>form_valid view example</code></li> <li><code>djstripe.models.Customer.add_payment_method</code></li> </ul>"},{"location":"usage/using_stripe_checkout/","title":"Create a Stripe Checkout Session","text":"<p>For your convenience, dj-stripe has provided an example implementation on how to use <code>Checkouts</code></p> <p>Please note that in order for dj-stripe to create a link between your <code>customers</code> and your <code>subscribers</code>, you need to add the <code>DJSTRIPE_SUBSCRIBER_CUSTOMER_KEY</code> key to the <code>metadata</code> parameter of <code>Checkout</code>. This has also been demonstrated in the aforementioned example</p>"},{"location":"usage/using_with_docker/","title":"Using with Docker","text":"<p>A Docker image allows you to run the Stripe CLI in a container.</p> <p>Here is a sample <code>docker-compose.yaml</code> file that sets up all the services to use <code>Stripe CLI</code> in a <code>dockerised django container (with djstripe)</code></p> <pre><code>version: \"3.9\"\n\n\nvolumes:\n    postgres-data: {}\n\n\nservices:\n\n  db:\n    image: postgres:16\n    volumes:\n      - postgres-data:/var/lib/postgresql/data\n    environment:\n      - POSTGRES_DB=random_number\n      - POSTGRES_USER=root\n      - POSTGRES_PASSWORD=random_number\n\n\n  web:\n    build:\n      context: .\n      dockerfile: &lt;PATH_TO_DOCKERFILE&gt;\n    command: python manage.py runserver 0.0.0.0:8000\n    volumes:\n      - .:/app\n    ports:\n      - \"8000:8000\"\n    depends_on:\n      - db\n    environment:\n        # Stripe specific keys\n        - STRIPE_PUBLIC_KEY=pk_test_******\n        - STRIPE_SECRET_KEY=sk_test_******\n\n        # Database Specific Settings\n        - DJSTRIPE_TEST_DB_VENDOR=postgres\n        - DJSTRIPE_TEST_DB_PORT=5432\n        - DJSTRIPE_TEST_DB_USER=root\n        - DJSTRIPE_TEST_DB_NAME=random_number\n        - DJSTRIPE_TEST_DB_PASS=random_number\n        - DJSTRIPE_TEST_DB_HOST=db\n\n  stripe:\n    image: stripe/stripe-cli:v1.7.4\n    # In case Stripe CLI is used to perform local webhook testing, set x-djstripe-webhook-secret custom header to output of Stripe CLI.\n    command: [\"listen\", \"-H\", \"x-djstripe-webhook-secret: whsec_******\", \"--forward-to\", \"http://web:8000/djstripe/webhook/&lt;uuid&gt;/\"]\n    depends_on:\n      - web\n    environment:\n      - STRIPE_API_KEY=sk_test_******\n      - STRIPE_DEVICE_NAME=djstripe_docker\n</code></pre> <p>Note</p> <p>In case the <code>Stripe CLI</code> is used to perform local webhook testing, set <code>x-djstripe-webhook-secret</code> Custom Header in Stripe <code>listen</code> to the <code>Webhook Signing Secret</code> output of <code>Stripe CLI</code>. That is what Stripe expects and uses to create the <code>stripe-signature</code> header.</p>"},{"location":"usage/webhooks/","title":"Using Stripe Webhooks","text":""},{"location":"usage/webhooks/#setting-up-a-new-webhook-endpoint-in-dj-stripe","title":"Setting up a new webhook endpoint in dj-stripe","text":"<p>As of dj-stripe 2.7.0, dj-stripe can create its own webhook endpoints on Stripe from the Django administration.</p> <p>Create a new webhook endpoint from the Django administration by going to dj-stripe -&gt; Webhook endpoints -&gt; Add webhook endpoint (or <code>/admin/djstripe/webhookendpoint/add/</code>).</p> <p>From there, you can choose an account to create the endpoint for. If no account is chosen, the default Stripe API key will be used to create the endpoint. You can also choose to create the endpoint in test mode or live mode.</p> <p>You may want to change the base URL of the endpoint. This field will be prefilled with the current site. If you're running on the local development server, you may see <code>http://localhost:8000</code> or similar in there. Stripe won't let you save webhook endpoints with such a value, so you will want to change it to a real website URL.</p> <p>When saved from the admin, the endpoint will be created in Stripe with a dj-stripe specific UUID which will be part of the URL, making it impossible to guess externally by brute-force.</p>"},{"location":"usage/webhooks/#extra-configuration","title":"Extra configuration","text":"<p>dj-stripe provides the following settings to tune how your webhooks work:</p> <ul> <li><code>DJSTRIPE_WEBHOOK_VALIDATION</code></li> <li><code>DJSTRIPE_WEBHOOK_EVENT_CALLBACK</code></li> </ul>"},{"location":"usage/webhooks/#official-documentation","title":"Official documentation","text":"<p>Stripe docs for types of Events: https://stripe.com/docs/api/events/types</p> <p>Stripe docs for Webhooks: https://stripe.com/docs/webhooks</p> <p>Django docs for transactions: https://docs.djangoproject.com/en/dev/topics/db/transactions/#performing-actions-after-commit</p>"}]}